# .github/workflows/release.yml

name: Create GitHub Release (Simplified)

on:
  push:
    branches:
      - master # Trigger on pushes to the 'master' branch
  workflow_dispatch: # This line allows you to manually trigger the workflow from the GitHub UI

jobs:
  release-specific-file:
    runs-on: ubuntu-latest # Use a Linux runner
    permissions:
      # Grant write permission to the GITHUB_TOKEN for contents (required for releases)
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your code

      # Dynamically get all .app files from the /releases/ folder (no subfolders)
      - name: Discover .app files in releases directory
        id: discover_app_files
        run: |
          # Use 'find' to get all .app files directly in 'releases/'
          # -maxdepth 1 ensures no subfolders are included
          # -name "*.app" filters for .app files
          # -printf "%f\n" prints only the filename (e.g., "flow_editor_packaged.app")
          APP_FILES=$(find releases/ -maxdepth 1 -name "*.app" -printf "%f\n" | tr '\n' ' ')
          echo "Discovered APP_FILES: $APP_FILES"
          echo "APP_FILES=$APP_FILES" >> $GITHUB_OUTPUT

      - name: List root directory contents (Diagnostic)
        run: |
          echo "Contents of the repository root directory:"
          ls -la .
          echo "--- End of root directory contents ---"

      - name: List files in releases directory (Diagnostic)
        run: |
          echo "Contents of the 'releases' directory:"
          find releases/ -maxdepth 1 -print -ls
          echo "--- End of 'releases' directory contents ---"

      - name: Copy .app files and rename for release upload (Workaround for .app extension issue)
        run: |
          # Loop through the dynamically discovered APP_FILES and copy/rename each one
          # Check if APP_FILES is empty to avoid errors
          if [ -z "${{ steps.discover_app_files.outputs.APP_FILES }}" ]; then
            echo "No .app files found in 'releases/' to package. Exiting."
            exit 1
          fi

          for app_file in ${{ steps.discover_app_files.outputs.APP_FILES }}; do
            source_path="releases/$app_file"
            dest_name="${app_file%.app}.bin" # Rename .app to .bin
            dest_path="$dest_name"

            if [ -f "$source_path" ]; then
              cp "$source_path" "$dest_path"
              echo "Copied $source_path to $dest_path for upload."
              ls -la "$dest_path" # Verify copy and new name
            else
              # This case should ideally not happen if 'find' worked correctly,
              # but it's a good safeguard.
              echo "❌ Error: File '$source_path' was listed but not found during copy. Skipping."
              exit 1 # Exit if a specified file is not found
            CATION: Invalid workflow file: .github/workflows/main.yml#L191
            fi
          done

      # --- NEW STEP: Extract versions from .app files (JSON) and generate versions.json ---
      - name: Extract App Versions (from .app JSON) and Generate Manifest
        id: generate_versions_manifest
        run: |
          # Install jq if not available. ubuntu-latest usually has it, but it's good to ensure.
          sudo apt-get update && sudo apt-get install -y jq

          JSON_CONTENT="{\n"
          first_entry=true

          for app_file_original in ${{ steps.discover_app_files.outputs.APP_FILES }}; do
            # The .app file is the JSON file itself, e.g., "releases/flow_editor.app"
            APP_METADATA_PATH="releases/$app_file_original"

            echo "--- Processing $app_file_original ---"
            echo "Checking path: $APP_METADATA_PATH"
            ls -la "$APP_METADATA_PATH" || echo "File does not exist at path: $APP_METADATA_PATH" # Verify file existence
            
            if [ ! -f "$APP_METADATA_PATH" ]; then
              echo "❌ Error: App metadata file not found for $app_file_original at $APP_METADATA_PATH. Skipping."
              continue # Skip this file if .app metadata isn't found
            fi

            echo "Content of $APP_METADATA_PATH (first 500 chars):"
            head -c 500 "$APP_METADATA_PATH" # Show content of the .app file as seen by the runner
            echo "..." # Indicate content might be truncated

            # Extract the 'id' and 'version' from the 'app_metadata' object using jq
            # -r flag ensures raw string output without quotes
            # Added '|| echo ""' to ensure variable is empty if jq fails, not an error
            APP_ID=$(jq -r '.app_metadata.id' "$APP_METADATA_PATH" 2>/dev/null || echo "")
            APP_VERSION=$(jq -r '.app_metadata.version' "$APP_METADATA_PATH" 2>/dev/null || echo "")

            echo "Extracted APP_ID variable value: '$APP_ID'" # Verify variable content
            echo "Extracted APP_VERSION variable value: '$APP_VERSION'" # Verify variable content

            if [ -z "$APP_ID" ]; then
              echo "⚠️ Warning: Extracted 'id' is empty for $app_file_original. Skipping this app."
              continue
            fi
            if [ -z "$APP_VERSION" ]; then
              echo "⚠️ Warning: Extracted 'version' is empty for $app_file_original. Using 'unknown' for this app."
              APP_VERSION="unknown" # Fallback
            fi
            
            echo "Final ID: $APP_ID, Final Version: $APP_VERSION for $app_file_original"

            if [ "$first_entry" = true ]; then
              first_entry=false
            else
              JSON_CONTENT+=",\n"
            fi
            # Use the extracted app_id as the key in the manifest
            JSON_CONTENT+="  \"${APP_ID}\": \"${APP_VERSION}\""
          done
          JSON_CONTENT+="\n}"

          echo "Generated versions.json content:"
          echo -e "$JSON_CONTENT" | tee versions.json # Output to console and file

          # Output the path to the generated manifest file, for the next step to pick up
          echo "UPLOAD_VERSIONS_MANIFEST=versions.json" >> $GITHUB_OUTPUT
          # Also output the content itself for inclusion in the release body
          echo "VERSION_MANIFEST_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo -e "$JSON_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      # New step to generate the dynamic part of the release body AND the list of files for upload
      - name: Generate Release Body Content and Upload File List
        id: generate_content_lists
        run: |
          FILES_LIST=""
          UPLOAD_FILES=""
          for app_file in ${{ steps.discover_app_files.outputs.APP_FILES }}; do
            FILES_LIST+="- $app_file (Original Path: /releases/$app_file)\n"
            FILES_LIST+="  **Important:** The attached file is named ${app_file%.app}.bin. Please rename it to $app_file after downloading for proper use.\n"
            UPLOAD_FILES+="${app_file%.app}.bin\n" # Add to the list for upload
          done
          
          # Add the versions.json to the UPLOAD_FILES list, using the output from the previous step
          UPLOAD_FILES+="${{ steps.generate_versions_manifest.outputs.UPLOAD_VERSIONS_MANIFEST }}\n"

          # Escape newlines for multi-line output for the body
          echo "FILES_LIST<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FILES_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Output the list of files to upload, newline-separated
          echo "UPLOAD_FILES<<EOF" >> $GITHUB_OUTPUT
          echo -e "$UPLOAD_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Create GitHub Release and Upload Specific Assets
        id: create_release
        uses: softprops/action-gh-release@v2 # Action to create a GitHub Release
        with:
          name: Release ${{ github.run_number }}
          tag_name: release-${{ github.run_number }}
          body: |
            ## Automated Release #${{ github.run_number }}

            This release includes the following packaged application files:
            Triggered by a push to the `master` branch.

            ### Files Included:
            ${{ steps.generate_content_lists.outputs.FILES_LIST }} # Reference the output from the new step

            ### Component Versions:
            ```json
            ${{ steps.generate_versions_manifest.outputs.VERSION_MANIFEST_CONTENT }}
            ```
          draft: false
          prerelease: false
          # Now pointing to all the renamed .bin files and the versions.json in the root directory for upload
          files: |
            ${{ steps.generate_content_lists.outputs.UPLOAD_FILES }} # Use the new output for files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This was the line missing a closing '}'
