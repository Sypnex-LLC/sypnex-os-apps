name: Create GitHub Release (Simplified)

on:
  push:
    branches:
      - master # Trigger on pushes to the 'master' branch
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub UI

jobs:
  release-specific-file:
    runs-on: ubuntu-latest # Use a Linux runner
    permissions:
      contents: write # Grant write permission to the GITHUB_TOKEN for releases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Dynamically get all .app files from the /releases/ folder (no subfolders)
      - name: Discover .app files in releases directory
        id: discover_app_files
        run: |
          # Use 'find' to get all .app files directly in 'releases/'
          APP_FILES=$(find releases/ -maxdepth 1 -name "*.app" -printf "%f\n" | tr '\n' ' ')
          echo "Discovered APP_FILES: $APP_FILES"
          echo "APP_FILES=$APP_FILES" >> $GITHUB_OUTPUT

      # Dynamically get all .sha256 files from the /releases/ folder (no subfolders)
      - name: Discover .sha256 files in releases directory
        id: discover_sha_files
        run: |
          # Use 'find' to get all .sha256 files directly in 'releases/'
          SHA_FILES=$(find releases/ -maxdepth 1 -name "*.sha256" -printf "%f\n" | tr '\n' ' ')
          echo "Discovered SHA_FILES: $SHA_FILES"
          echo "SHA_FILES=$SHA_FILES" >> $GITHUB_OUTPUT

      - name: List root directory contents (Diagnostic)
        run: |
          echo "Contents of the repository root directory:"
          ls -la .
          echo "--- End of root directory contents ---"

      - name: List files in releases directory (Diagnostic)
        run: |
          echo "Contents of the 'releases' directory:"
          find releases/ -maxdepth 1 -print -ls
          echo "--- End of 'releases' directory contents ---"

      - name: Copy .app files and rename for release upload
        run: |
          # Check if APP_FILES is empty to avoid errors
          if [ -z "${{ steps.discover_app_files.outputs.APP_FILES }}" ]; then
            echo "No .app files found in 'releases/' to package. Exiting."
            exit 1
          fi

          # Loop through the dynamically discovered APP_FILES and copy/rename each one
          for app_file in ${{ steps.discover_app_files.outputs.APP_FILES }}; do
            source_path="releases/$app_file"
            dest_name="${app_file%.app}.bin" # Rename .app to .bin
            dest_path="$dest_name"

            if [ -f "$source_path" ]; then
              cp "$source_path" "$dest_path"
              echo "Copied $source_path to $dest_path for upload."
              ls -la "$dest_path" # Verify copy and new name
            else
              echo "❌ Error: File '$source_path' was listed but not found during copy. Skipping."
              exit 1 # Exit if a specified file is not found
            fi
          done

      - name: Copy .sha256 files for release upload
        run: |
          # Check if SHA_FILES is empty - this is optional, so don't exit if none found
          if [ -z "${{ steps.discover_sha_files.outputs.SHA_FILES }}" ]; then
            echo "No .sha256 files found in 'releases/' - this is optional."
          else
            # Loop through the dynamically discovered SHA_FILES and copy each one
            for sha_file in ${{ steps.discover_sha_files.outputs.SHA_FILES }}; do
              source_path="releases/$sha_file"
              dest_path="$sha_file" # Keep original name for SHA files

              if [ -f "$source_path" ]; then
                cp "$source_path" "$dest_path"
                echo "Copied $source_path to $dest_path for upload."
                ls -la "$dest_path" # Verify copy
              else
                echo "❌ Warning: File '$source_path' was listed but not found during copy. Skipping."
              fi
            done
          fi

      # --- UPDATED STEP: Extract full metadata from .app files and generate versions.json ---
      - name: Extract App Metadata (from .app JSON) and Generate Manifest
        id: generate_versions_manifest
        run: |
          # Ensure jq is installed
          sudo apt-get update && sudo apt-get install -y jq

          # Check if any .app files were found before proceeding
          if [ -z "${{ steps.discover_app_files.outputs.APP_FILES }}" ]; then
            echo "No .app files found. Creating an empty versions.json."
            JSON_CONTENT="{}"
          else
            echo "Processing .app files: ${{ steps.discover_app_files.outputs.APP_FILES }}"
            
            # Use jq to read all .app files, transform them into the desired structure, and combine them.
            # -s (--slurp) reads all input files into a single JSON array.
            # map(...) processes each element of the array.
            #   - .app_metadata selects the nested object.
            #   - select(.id != null and .version != null) filters out any apps missing an id or version.
            #   - {key: .id, value: {name, version, author, description}} creates a key-value pair for from_entries.
            # from_entries converts an array of {key, value} objects into a single large object.
            JSON_CONTENT=$(jq -s '
              map(
                .app_metadata |
                select(.id != null and .version != null) |
                {
                  key: .id,
                  value: {
                    name: .name,
                    version: .version,
                    author: .author,
                    description: .description,
                    icon: .icon
                  }
                }
              ) | from_entries
            ' releases/*.app) # The shell glob releases/*.app passes all matching files to jq
          fi

          echo "Generated versions.json content:"
          echo "$JSON_CONTENT" | tee versions.json # Output to console and file

          # Output the path to the generated manifest file
          echo "UPLOAD_VERSIONS_MANIFEST=versions.json" >> $GITHUB_OUTPUT
          # Output the content itself for the release body
          echo "VERSION_MANIFEST_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$JSON_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # --- This step remains the same ---
      - name: Generate Release Body Content and Upload File List
        id: generate_content_lists
        run: |
          FILES_LIST=""
          UPLOAD_FILES=""
          for app_file in ${{ steps.discover_app_files.outputs.APP_FILES }}; do
            FILES_LIST+="- $app_file (Original Path: /releases/$app_file)\n"
            FILES_LIST+="  **Important:** The attached file is named ${app_file%.app}.bin. Please rename it to $app_file after downloading for proper use.\n"
            UPLOAD_FILES+="${app_file%.app}.bin\n" # Add to the list for upload
          done
          
          # Add SHA256 files to the upload list (keep original names)
          for sha_file in ${{ steps.discover_sha_files.outputs.SHA_FILES }}; do
            FILES_LIST+="- $sha_file (Checksum file for integrity verification)\n"
            UPLOAD_FILES+="$sha_file\n" # Add to the list for upload
          done
          
          # Add the versions.json to the UPLOAD_FILES list
          UPLOAD_FILES+="${{ steps.generate_versions_manifest.outputs.UPLOAD_VERSIONS_MANIFEST }}\n"

          # Escape newlines for multi-line output for the body
          echo "FILES_LIST<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FILES_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Output the list of files to upload, newline-separated
          echo "UPLOAD_FILES<<EOF" >> $GITHUB_OUTPUT
          echo -e "$UPLOAD_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # --- This step remains the same ---
      - name: Create GitHub Release and Upload Specific Assets
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.run_number }}
          tag_name: release-${{ github.run_number }}
          body: |
            ## Automated Release #${{ github.run_number }}

            This release includes the following packaged application files:
            Triggered by a push to the `master` branch.

            ### Files Included:
            ${{ steps.generate_content_lists.outputs.FILES_LIST }}

            ### Component Versions:
            ```json
            ${{ steps.generate_versions_manifest.outputs.VERSION_MANIFEST_CONTENT }}
            ```
          draft: false
          prerelease: false
          # Pointing to all the renamed .bin files and the versions.json for upload
          files: |
            ${{ steps.generate_content_lists.outputs.UPLOAD_FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
