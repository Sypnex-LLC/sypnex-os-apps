{
  "app_metadata": {
    "id": "flow_editor",
    "name": "Flow Editor",
    "description": "Visual node-based workflow editor for creating and executing data processing pipelines",
    "icon": "fas fa-project-diagram",
    "keywords": [
      "flow",
      "workflow",
      "nodes",
      "pipeline",
      "visual",
      "editor"
    ],
    "author": "Sypnex OS",
    "version": "1.1.7",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/node-registry.js",
      "js/canvas.js",
      "js/node-config.js",
      "js/node-renderer.js",
      "js/data-executors.js",
      "js/http-executors.js",
      "js/media-executors.js",
      "js/flow-executors.js",
      "js/ai-executors.js",
      "js/execution-engine.js",
      "js/workflow.js",
      "js/canvas-manager.js",
      "js/tag-manager.js",
      "js/file-manager.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "styles": [
      "css/layout.css",
      "css/nodes.css",
      "css/components.css",
      "css/node-types.css",
      "css/responsive.css",
      "css/performance.css",
      "css/os-theme.css"
    ],
    "additional_files": [
      {
        "vfs_path": "/apps/installed/flow_editor/nodes-pack.json",
        "source_file": "node-definitions/nodes-pack.json"
      }
    ],
    "settings": [
      {
        "key": "DEFAULT_HTTP_TIMEOUT",
        "name": "HTTP Timeout (ms)",
        "type": "number",
        "value": 30000,
        "description": "Default timeout for HTTP requests in milliseconds"
      },
      {
        "key": "AUTO_SAVE_INTERVAL",
        "name": "Auto Save Interval (s)",
        "type": "number",
        "value": 30,
        "description": "Auto save workflows every N seconds (0 = disabled)"
      },
      {
        "key": "MAX_NODES",
        "name": "Maximum Nodes",
        "type": "number",
        "value": 50,
        "description": "Maximum number of nodes allowed in a workflow"
      }
    ]
  },
  "files": {
    "flow_editor.app": "ew0KICAiaWQiOiAiZmxvd19lZGl0b3IiLA0KICAibmFtZSI6ICJGbG93IEVkaXRvciIsDQogICJkZXNjcmlwdGlvbiI6ICJWaXN1YWwgbm9kZS1iYXNlZCB3b3JrZmxvdyBlZGl0b3IgZm9yIGNyZWF0aW5nIGFuZCBleGVjdXRpbmcgZGF0YSBwcm9jZXNzaW5nIHBpcGVsaW5lcyIsDQogICJpY29uIjogImZhcyBmYS1wcm9qZWN0LWRpYWdyYW0iLA0KICAia2V5d29yZHMiOiBbImZsb3ciLCAid29ya2Zsb3ciLCAibm9kZXMiLCAicGlwZWxpbmUiLCAidmlzdWFsIiwgImVkaXRvciJdLA0KICAiYXV0aG9yIjogIlN5cG5leCBPUyIsDQogICJ2ZXJzaW9uIjogIjEuMS43IiwNCiAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAic2NyaXB0cyI6IFsNCiAgICAianMvdXRpbHMuanMiLA0KICAgICJqcy9ub2RlLXJlZ2lzdHJ5LmpzIiwNCiAgICAianMvY2FudmFzLmpzIiwNCiAgICAianMvbm9kZS1jb25maWcuanMiLA0KICAgICJqcy9ub2RlLXJlbmRlcmVyLmpzIiwNCiAgICAianMvZGF0YS1leGVjdXRvcnMuanMiLA0KICAgICJqcy9odHRwLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL21lZGlhLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL2Zsb3ctZXhlY3V0b3JzLmpzIiwNCiAgICAianMvYWktZXhlY3V0b3JzLmpzIiwNCiAgICAianMvZXhlY3V0aW9uLWVuZ2luZS5qcyIsDQogICAgImpzL3dvcmtmbG93LmpzIiwNCiAgICAianMvY2FudmFzLW1hbmFnZXIuanMiLA0KICAgICJqcy90YWctbWFuYWdlci5qcyIsDQogICAgImpzL2ZpbGUtbWFuYWdlci5qcyIsDQogICAgImpzL3VpLW1hbmFnZXIuanMiLA0KICAgICJqcy9tYWluLmpzIg0KICBdLA0KICAic3R5bGVzIjogWw0KICAgICJjc3MvbGF5b3V0LmNzcyIsDQogICAgImNzcy9ub2Rlcy5jc3MiLA0KICAgICJjc3MvY29tcG9uZW50cy5jc3MiLA0KICAgICJjc3Mvbm9kZS10eXBlcy5jc3MiLA0KICAgICJjc3MvcmVzcG9uc2l2ZS5jc3MiLA0KICAgICJjc3MvcGVyZm9ybWFuY2UuY3NzIiwNCiAgICAiY3NzL29zLXRoZW1lLmNzcyINCiAgXSwNCiAgImFkZGl0aW9uYWxfZmlsZXMiOiBbDQogICAgew0KICAgICAgInZmc19wYXRoIjogIi9hcHBzL2luc3RhbGxlZC9mbG93X2VkaXRvci9ub2Rlcy1wYWNrLmpzb24iLA0KICAgICAgInNvdXJjZV9maWxlIjogIm5vZGUtZGVmaW5pdGlvbnMvbm9kZXMtcGFjay5qc29uIg0KICAgIH0NCiAgXSwNCiAgInNldHRpbmdzIjogWw0KICAgIHsNCiAgICAgICJrZXkiOiAiREVGQVVMVF9IVFRQX1RJTUVPVVQiLA0KICAgICAgIm5hbWUiOiAiSFRUUCBUaW1lb3V0IChtcykiLA0KICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICJ2YWx1ZSI6IDMwMDAwLA0KICAgICAgImRlc2NyaXB0aW9uIjogIkRlZmF1bHQgdGltZW91dCBmb3IgSFRUUCByZXF1ZXN0cyBpbiBtaWxsaXNlY29uZHMiDQogICAgfSwNCiAgICB7DQogICAgICAia2V5IjogIkFVVE9fU0FWRV9JTlRFUlZBTCIsDQogICAgICAibmFtZSI6ICJBdXRvIFNhdmUgSW50ZXJ2YWwgKHMpIiwNCiAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAidmFsdWUiOiAzMCwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJBdXRvIHNhdmUgd29ya2Zsb3dzIGV2ZXJ5IE4gc2Vjb25kcyAoMCA9IGRpc2FibGVkKSINCiAgICB9LA0KICAgIHsNCiAgICAgICJrZXkiOiAiTUFYX05PREVTIiwNCiAgICAgICJuYW1lIjogIk1heGltdW0gTm9kZXMiLA0KICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICJ2YWx1ZSI6IDUwLA0KICAgICAgImRlc2NyaXB0aW9uIjogIk1heGltdW0gbnVtYmVyIG9mIG5vZGVzIGFsbG93ZWQgaW4gYSB3b3JrZmxvdyINCiAgICB9DQogIF0NCn0=",
    "flow_editor.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-12T01:31:41.693684",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\flow_editor"
  },
  "additional_files": [
    {
      "vfs_path": "/apps/installed/flow_editor/nodes-pack.json",
      "filename": "nodes-pack.json",
      "data": "",
      "size": 38497
    }
  ]
}