{
  "app_metadata": {
    "id": "flow_editor",
    "name": "Flow Editor",
    "description": "Visual node-based workflow editor for creating and executing data processing pipelines",
    "icon": "fas fa-project-diagram",
    "keywords": [
      "flow",
      "workflow",
      "nodes",
      "pipeline",
      "visual",
      "editor"
    ],
    "author": "Sypnex OS",
    "version": "1.1.4",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/node-registry.js",
      "js/canvas.js",
      "js/node-config.js",
      "js/node-renderer.js",
      "js/data-executors.js",
      "js/http-executors.js",
      "js/media-executors.js",
      "js/flow-executors.js",
      "js/ai-executors.js",
      "js/execution-engine.js",
      "js/workflow.js",
      "js/canvas-manager.js",
      "js/tag-manager.js",
      "js/file-manager.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "styles": [
      "css/layout.css",
      "css/nodes.css",
      "css/components.css",
      "css/node-types.css",
      "css/responsive.css",
      "css/os-theme.css"
    ],
    "additional_files": [
      {
        "vfs_path": "/nodes/nodes-pack.json",
        "source_file": "node-definitions/nodes-pack.json"
      }
    ],
    "settings": [
      {
        "key": "DEFAULT_HTTP_TIMEOUT",
        "name": "HTTP Timeout (ms)",
        "type": "number",
        "value": 30000,
        "description": "Default timeout for HTTP requests in milliseconds"
      },
      {
        "key": "AUTO_SAVE_INTERVAL",
        "name": "Auto Save Interval (s)",
        "type": "number",
        "value": 30,
        "description": "Auto save workflows every N seconds (0 = disabled)"
      },
      {
        "key": "MAX_NODES",
        "name": "Maximum Nodes",
        "type": "number",
        "value": 50,
        "description": "Maximum number of nodes allowed in a workflow"
      }
    ]
  },
  "files": {
    "flow_editor.app": "ew0KICAiaWQiOiAiZmxvd19lZGl0b3IiLA0KICAibmFtZSI6ICJGbG93IEVkaXRvciIsDQogICJkZXNjcmlwdGlvbiI6ICJWaXN1YWwgbm9kZS1iYXNlZCB3b3JrZmxvdyBlZGl0b3IgZm9yIGNyZWF0aW5nIGFuZCBleGVjdXRpbmcgZGF0YSBwcm9jZXNzaW5nIHBpcGVsaW5lcyIsDQogICJpY29uIjogImZhcyBmYS1wcm9qZWN0LWRpYWdyYW0iLA0KICAia2V5d29yZHMiOiBbImZsb3ciLCAid29ya2Zsb3ciLCAibm9kZXMiLCAicGlwZWxpbmUiLCAidmlzdWFsIiwgImVkaXRvciJdLA0KICAiYXV0aG9yIjogIlN5cG5leCBPUyIsDQogICJ2ZXJzaW9uIjogIjEuMS40IiwNCiAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAic2NyaXB0cyI6IFsNCiAgICAianMvdXRpbHMuanMiLA0KICAgICJqcy9ub2RlLXJlZ2lzdHJ5LmpzIiwNCiAgICAianMvY2FudmFzLmpzIiwNCiAgICAianMvbm9kZS1jb25maWcuanMiLA0KICAgICJqcy9ub2RlLXJlbmRlcmVyLmpzIiwNCiAgICAianMvZGF0YS1leGVjdXRvcnMuanMiLA0KICAgICJqcy9odHRwLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL21lZGlhLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL2Zsb3ctZXhlY3V0b3JzLmpzIiwNCiAgICAianMvYWktZXhlY3V0b3JzLmpzIiwNCiAgICAianMvZXhlY3V0aW9uLWVuZ2luZS5qcyIsDQogICAgImpzL3dvcmtmbG93LmpzIiwNCiAgICAianMvY2FudmFzLW1hbmFnZXIuanMiLA0KICAgICJqcy90YWctbWFuYWdlci5qcyIsDQogICAgImpzL2ZpbGUtbWFuYWdlci5qcyIsDQogICAgImpzL3VpLW1hbmFnZXIuanMiLA0KICAgICJqcy9tYWluLmpzIg0KICBdLA0KICAic3R5bGVzIjogWw0KICAgICJjc3MvbGF5b3V0LmNzcyIsDQogICAgImNzcy9ub2Rlcy5jc3MiLA0KICAgICJjc3MvY29tcG9uZW50cy5jc3MiLA0KICAgICJjc3Mvbm9kZS10eXBlcy5jc3MiLA0KICAgICJjc3MvcmVzcG9uc2l2ZS5jc3MiLA0KICAgICJjc3Mvb3MtdGhlbWUuY3NzIg0KICBdLA0KICAiYWRkaXRpb25hbF9maWxlcyI6IFsNCiAgICB7DQogICAgICAidmZzX3BhdGgiOiAiL25vZGVzL25vZGVzLXBhY2suanNvbiIsDQogICAgICAic291cmNlX2ZpbGUiOiAibm9kZS1kZWZpbml0aW9ucy9ub2Rlcy1wYWNrLmpzb24iDQogICAgfQ0KICBdLA0KICAic2V0dGluZ3MiOiBbDQogICAgew0KICAgICAgImtleSI6ICJERUZBVUxUX0hUVFBfVElNRU9VVCIsDQogICAgICAibmFtZSI6ICJIVFRQIFRpbWVvdXQgKG1zKSIsDQogICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgInZhbHVlIjogMzAwMDAsDQogICAgICAiZGVzY3JpcHRpb24iOiAiRGVmYXVsdCB0aW1lb3V0IGZvciBIVFRQIHJlcXVlc3RzIGluIG1pbGxpc2Vjb25kcyINCiAgICB9LA0KICAgIHsNCiAgICAgICJrZXkiOiAiQVVUT19TQVZFX0lOVEVSVkFMIiwNCiAgICAgICJuYW1lIjogIkF1dG8gU2F2ZSBJbnRlcnZhbCAocykiLA0KICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICJ2YWx1ZSI6IDMwLA0KICAgICAgImRlc2NyaXB0aW9uIjogIkF1dG8gc2F2ZSB3b3JrZmxvd3MgZXZlcnkgTiBzZWNvbmRzICgwID0gZGlzYWJsZWQpIg0KICAgIH0sDQogICAgew0KICAgICAgImtleSI6ICJNQVhfTk9ERVMiLA0KICAgICAgIm5hbWUiOiAiTWF4aW11bSBOb2RlcyIsDQogICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgInZhbHVlIjogNTAsDQogICAgICAiZGVzY3JpcHRpb24iOiAiTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgYWxsb3dlZCBpbiBhIHdvcmtmbG93Ig0KICAgIH0NCiAgXQ0KfQ==",
    "flow_editor.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-26T10:04:31.013053",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\flow_editor"
  },
  "additional_files": [
    {
      "vfs_path": "/nodes/nodes-pack.json",
      "filename": "nodes-pack.json",
      "data": "",
      "size": 33450
    }
  ]
}