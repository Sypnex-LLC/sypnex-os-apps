{
  "app_metadata": {
    "id": "flow_editor",
    "name": "Flow Editor",
    "description": "Visual node-based workflow editor for creating and executing data processing pipelines",
    "icon": "fas fa-project-diagram",
    "keywords": [
      "flow",
      "workflow",
      "nodes",
      "pipeline",
      "visual",
      "editor"
    ],
    "author": "Sypnex OS",
    "version": "1.1.0",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/node-registry.js",
      "js/canvas.js",
      "js/node-config.js",
      "js/node-renderer.js",
      "js/data-executors.js",
      "js/http-executors.js",
      "js/media-executors.js",
      "js/flow-executors.js",
      "js/ai-executors.js",
      "js/execution-engine.js",
      "js/workflow.js",
      "js/canvas-manager.js",
      "js/tag-manager.js",
      "js/file-manager.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "styles": [
      "css/layout.css",
      "css/nodes.css",
      "css/components.css",
      "css/node-types.css",
      "css/responsive.css",
      "css/os-theme.css"
    ],
    "additional_files": [
      {
        "vfs_path": "/nodes/nodes-pack.json",
        "source_file": "node-definitions/nodes-pack.json"
      }
    ],
    "settings": [
      {
        "key": "DEFAULT_HTTP_TIMEOUT",
        "name": "HTTP Timeout (ms)",
        "type": "number",
        "value": 30000,
        "description": "Default timeout for HTTP requests in milliseconds"
      },
      {
        "key": "AUTO_SAVE_INTERVAL",
        "name": "Auto Save Interval (s)",
        "type": "number",
        "value": 30,
        "description": "Auto save workflows every N seconds (0 = disabled)"
      },
      {
        "key": "MAX_NODES",
        "name": "Maximum Nodes",
        "type": "number",
        "value": 50,
        "description": "Maximum number of nodes allowed in a workflow"
      }
    ]
  },
  "files": {
    "flow_editor.app": "ew0KICAiaWQiOiAiZmxvd19lZGl0b3IiLA0KICAibmFtZSI6ICJGbG93IEVkaXRvciIsDQogICJkZXNjcmlwdGlvbiI6ICJWaXN1YWwgbm9kZS1iYXNlZCB3b3JrZmxvdyBlZGl0b3IgZm9yIGNyZWF0aW5nIGFuZCBleGVjdXRpbmcgZGF0YSBwcm9jZXNzaW5nIHBpcGVsaW5lcyIsDQogICJpY29uIjogImZhcyBmYS1wcm9qZWN0LWRpYWdyYW0iLA0KICAia2V5d29yZHMiOiBbImZsb3ciLCAid29ya2Zsb3ciLCAibm9kZXMiLCAicGlwZWxpbmUiLCAidmlzdWFsIiwgImVkaXRvciJdLA0KICAiYXV0aG9yIjogIlN5cG5leCBPUyIsDQogICJ2ZXJzaW9uIjogIjEuMS4wIiwNCiAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAic2NyaXB0cyI6IFsNCiAgICAianMvdXRpbHMuanMiLA0KICAgICJqcy9ub2RlLXJlZ2lzdHJ5LmpzIiwNCiAgICAianMvY2FudmFzLmpzIiwNCiAgICAianMvbm9kZS1jb25maWcuanMiLA0KICAgICJqcy9ub2RlLXJlbmRlcmVyLmpzIiwNCiAgICAianMvZGF0YS1leGVjdXRvcnMuanMiLA0KICAgICJqcy9odHRwLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL21lZGlhLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL2Zsb3ctZXhlY3V0b3JzLmpzIiwNCiAgICAianMvYWktZXhlY3V0b3JzLmpzIiwNCiAgICAianMvZXhlY3V0aW9uLWVuZ2luZS5qcyIsDQogICAgImpzL3dvcmtmbG93LmpzIiwNCiAgICAianMvY2FudmFzLW1hbmFnZXIuanMiLA0KICAgICJqcy90YWctbWFuYWdlci5qcyIsDQogICAgImpzL2ZpbGUtbWFuYWdlci5qcyIsDQogICAgImpzL3VpLW1hbmFnZXIuanMiLA0KICAgICJqcy9tYWluLmpzIg0KICBdLA0KICAic3R5bGVzIjogWw0KICAgICJjc3MvbGF5b3V0LmNzcyIsDQogICAgImNzcy9ub2Rlcy5jc3MiLA0KICAgICJjc3MvY29tcG9uZW50cy5jc3MiLA0KICAgICJjc3Mvbm9kZS10eXBlcy5jc3MiLA0KICAgICJjc3MvcmVzcG9uc2l2ZS5jc3MiLA0KICAgICJjc3Mvb3MtdGhlbWUuY3NzIg0KICBdLA0KICAiYWRkaXRpb25hbF9maWxlcyI6IFsNCiAgICB7DQogICAgICAidmZzX3BhdGgiOiAiL25vZGVzL25vZGVzLXBhY2suanNvbiIsDQogICAgICAic291cmNlX2ZpbGUiOiAibm9kZS1kZWZpbml0aW9ucy9ub2Rlcy1wYWNrLmpzb24iDQogICAgfQ0KICBdLA0KICAic2V0dGluZ3MiOiBbDQogICAgew0KICAgICAgImtleSI6ICJERUZBVUxUX0hUVFBfVElNRU9VVCIsDQogICAgICAibmFtZSI6ICJIVFRQIFRpbWVvdXQgKG1zKSIsDQogICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgInZhbHVlIjogMzAwMDAsDQogICAgICAiZGVzY3JpcHRpb24iOiAiRGVmYXVsdCB0aW1lb3V0IGZvciBIVFRQIHJlcXVlc3RzIGluIG1pbGxpc2Vjb25kcyINCiAgICB9LA0KICAgIHsNCiAgICAgICJrZXkiOiAiQVVUT19TQVZFX0lOVEVSVkFMIiwNCiAgICAgICJuYW1lIjogIkF1dG8gU2F2ZSBJbnRlcnZhbCAocykiLA0KICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICJ2YWx1ZSI6IDMwLA0KICAgICAgImRlc2NyaXB0aW9uIjogIkF1dG8gc2F2ZSB3b3JrZmxvd3MgZXZlcnkgTiBzZWNvbmRzICgwID0gZGlzYWJsZWQpIg0KICAgIH0sDQogICAgew0KICAgICAgImtleSI6ICJNQVhfTk9ERVMiLA0KICAgICAgIm5hbWUiOiAiTWF4aW11bSBOb2RlcyIsDQogICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgInZhbHVlIjogNTAsDQogICAgICAiZGVzY3JpcHRpb24iOiAiTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgYWxsb3dlZCBpbiBhIHdvcmtmbG93Ig0KICAgIH0NCiAgXQ0KfQ==",
    "flow_editor.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-25T09:04:09.153901",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\flow_editor"
  },
  "additional_files": [
    {
      "vfs_path": "/nodes/nodes-pack.json",
      "filename": "nodes-pack.json",
      "data": "ew0KICAidmVyc2lvbiI6ICIxLjAuMCIsDQogICJwYWNrZWRfYXQiOiAiMjAyNS0wNy0yNVQwNjo1NjoyMC4zMjQ3OTkiLA0KICAidG90YWxfbm9kZXMiOiAxNiwNCiAgIm5vZGVzIjogew0KICAgICJhcnJheSI6IHsNCiAgICAgICJpZCI6ICJhcnJheSIsDQogICAgICAibmFtZSI6ICJBcnJheSBPcGVyYXRpb25zIiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJQcm9jZXNzIGFycmF5cyBhbmQgbGlzdHMgd2l0aCBtYXAsIGZpbHRlciwgYW5kIG90aGVyIG9wZXJhdGlvbnMiLA0KICAgICAgImljb24iOiAiZmFzIGZhLWxpc3QiLA0KICAgICAgImNvbG9yIjogInByaW1hcnkiLA0KICAgICAgImNhdGVnb3J5IjogImRhdGEiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJhcnJheSIsDQogICAgICAgICAgIm5hbWUiOiAiQXJyYXkiLA0KICAgICAgICAgICJ0eXBlIjogImpzb24iDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInJlc3VsdCIsDQogICAgICAgICAgIm5hbWUiOiAiUmVzdWx0IiwNCiAgICAgICAgICAidHlwZSI6ICJqc29uIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidGV4dCIsDQogICAgICAgICAgIm5hbWUiOiAiVGV4dCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJsZW5ndGgiLA0KICAgICAgICAgICJuYW1lIjogIkxlbmd0aCIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImZpcnN0IiwNCiAgICAgICAgICAibmFtZSI6ICJGaXJzdCBJdGVtIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImxhc3QiLA0KICAgICAgICAgICJuYW1lIjogIkxhc3QgSXRlbSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJvcGVyYXRpb24iOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiT3BlcmF0aW9uIiwNCiAgICAgICAgICAidmFsdWUiOiAibWFwIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJtYXAiLA0KICAgICAgICAgICAgImZpbHRlciIsDQogICAgICAgICAgICAibGVuZ3RoIiwNCiAgICAgICAgICAgICJqb2luIiwNCiAgICAgICAgICAgICJmaXJzdCIsDQogICAgICAgICAgICAibGFzdCIsDQogICAgICAgICAgICAic2xpY2UiLA0KICAgICAgICAgICAgInJldmVyc2UiLA0KICAgICAgICAgICAgInNvcnQiLA0KICAgICAgICAgICAgInVuaXF1ZSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJmaWVsZF9wYXRoIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJGaWVsZCBQYXRoIChmb3IgbWFwL2ZpbHRlcikiLA0KICAgICAgICAgICJ2YWx1ZSI6ICIiLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICJlLmcuLCBuYW1lLCB1c2VyLmVtYWlsLCBpZCINCiAgICAgICAgfSwNCiAgICAgICAgImZpbHRlcl92YWx1ZSI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwNCiAgICAgICAgICAibGFiZWwiOiAiRmlsdGVyIFZhbHVlIiwNCiAgICAgICAgICAidmFsdWUiOiAiIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiVmFsdWUgdG8gZmlsdGVyIGJ5Ig0KICAgICAgICB9LA0KICAgICAgICAiZmlsdGVyX29wZXJhdG9yIjogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkZpbHRlciBPcGVyYXRvciIsDQogICAgICAgICAgInZhbHVlIjogImVxdWFscyIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAiZXF1YWxzIiwNCiAgICAgICAgICAgICJub3RfZXF1YWxzIiwNCiAgICAgICAgICAgICJjb250YWlucyIsDQogICAgICAgICAgICAiZ3JlYXRlcl90aGFuIiwNCiAgICAgICAgICAgICJsZXNzX3RoYW4iLA0KICAgICAgICAgICAgInN0YXJ0c193aXRoIiwNCiAgICAgICAgICAgICJlbmRzX3dpdGgiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiam9pbl9zZXBhcmF0b3IiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIkpvaW4gU2VwYXJhdG9yIiwNCiAgICAgICAgICAidmFsdWUiOiAiLCAiLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICJTZXBhcmF0b3IgZm9yIGpvaW4gb3BlcmF0aW9uIg0KICAgICAgICB9LA0KICAgICAgICAic2xpY2Vfc3RhcnQiOiB7DQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAibGFiZWwiOiAiU2xpY2UgU3RhcnQiLA0KICAgICAgICAgICJ2YWx1ZSI6IDAsDQogICAgICAgICAgIm1pbiI6IDANCiAgICAgICAgfSwNCiAgICAgICAgInNsaWNlX2VuZCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJTbGljZSBFbmQgKDAgPSBlbmQpIiwNCiAgICAgICAgICAidmFsdWUiOiAwLA0KICAgICAgICAgICJtaW4iOiAwDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAiYXJyYXlfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgImF1ZGlvIjogew0KICAgICAgImlkIjogImF1ZGlvIiwNCiAgICAgICJuYW1lIjogIkF1ZGlvIFBsYXllciIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiUGxheSBhdWRpbyBmaWxlcyBhbmQgY29udHJvbCBwbGF5YmFjayIsDQogICAgICAiaWNvbiI6ICJmYXMgZmEtdm9sdW1lLXVwIiwNCiAgICAgICJjb2xvciI6ICJ3YXJuaW5nIiwNCiAgICAgICJjYXRlZ29yeSI6ICJtZWRpYSIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiZnJvbnRlbmRfb25seSIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiYmluYXJ5IiwNCiAgICAgICAgICAibmFtZSI6ICJCaW5hcnkiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJhdWRpb19kYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJBdWRpbyBEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJiaW5hcnkiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidXJsIiwNCiAgICAgICAgICAibmFtZSI6ICJVUkwiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImJpbmFyeSIsDQogICAgICAgICAgIm5hbWUiOiAiQmluYXJ5IiwNCiAgICAgICAgICAidHlwZSI6ICJiaW5hcnkiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiYXVkaW9fZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiQXVkaW8gRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImF1ZGlvX3VybCIsDQogICAgICAgICAgIm5hbWUiOiAiQXVkaW8gVVJMIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImR1cmF0aW9uIiwNCiAgICAgICAgICAibmFtZSI6ICJEdXJhdGlvbiIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogIm9yaWdpbmFsIiwNCiAgICAgICAgICAibmFtZSI6ICJPcmlnaW5hbCIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgImNvbmZpZyI6IHsNCiAgICAgICAgImF1dG9QbGF5Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkF1dG8gUGxheSIsDQogICAgICAgICAgInZhbHVlIjogImZhbHNlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJ2b2x1bWUiOiB7DQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAibGFiZWwiOiAiVm9sdW1lICgwLTEpIiwNCiAgICAgICAgICAidmFsdWUiOiAxLA0KICAgICAgICAgICJtaW4iOiAwLA0KICAgICAgICAgICJtYXgiOiAxLA0KICAgICAgICAgICJzdGVwIjogMC4xDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAiYXVkaW9fZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgImNvbmRpdGlvbiI6IHsNCiAgICAgICJpZCI6ICJjb25kaXRpb24iLA0KICAgICAgIm5hbWUiOiAiQ29uZGl0aW9uIiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJDb21wYXJlIGlucHV0IHZhbHVlIHRvIGEgY29uZGl0aW9uIGFuZCBvdXRwdXQgdHJ1ZS9mYWxzZSIsDQogICAgICAiaWNvbiI6ICJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlIiwNCiAgICAgICJjb2xvciI6ICJ3YXJuaW5nIiwNCiAgICAgICJjYXRlZ29yeSI6ICJsb2dpYyIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInZhbHVlIiwNCiAgICAgICAgICAibmFtZSI6ICJWYWx1ZSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInJlc3VsdCIsDQogICAgICAgICAgIm5hbWUiOiAiUmVzdWx0IiwNCiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgImNvbmZpZyI6IHsNCiAgICAgICAgIm9wZXJhdG9yIjogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIk9wZXJhdG9yIiwNCiAgICAgICAgICAidmFsdWUiOiAiZXF1YWxzIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJlcXVhbHMiLA0KICAgICAgICAgICAgIm5vdF9lcXVhbHMiLA0KICAgICAgICAgICAgImdyZWF0ZXJfdGhhbiIsDQogICAgICAgICAgICAibGVzc190aGFuIiwNCiAgICAgICAgICAgICJncmVhdGVyX3RoYW5fb3JfZXF1YWwiLA0KICAgICAgICAgICAgImxlc3NfdGhhbl9vcl9lcXVhbCIsDQogICAgICAgICAgICAiY29udGFpbnMiLA0KICAgICAgICAgICAgIm5vdF9jb250YWlucyIsDQogICAgICAgICAgICAic3RhcnRzX3dpdGgiLA0KICAgICAgICAgICAgImVuZHNfd2l0aCIsDQogICAgICAgICAgICAiaXNfZW1wdHkiLA0KICAgICAgICAgICAgImlzX25vdF9lbXB0eSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJjb21wYXJlX3ZhbHVlIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJDb21wYXJlIFRvIiwNCiAgICAgICAgICAidmFsdWUiOiAiIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiVmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0Ig0KICAgICAgICB9LA0KICAgICAgICAiY2FzZV9zZW5zaXRpdmUiOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiQ2FzZSBTZW5zaXRpdmUiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJ0cnVlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAiY29uZGl0aW9uX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJkaXNwbGF5Ijogew0KICAgICAgImlkIjogImRpc3BsYXkiLA0KICAgICAgIm5hbWUiOiAiRGlzcGxheSBUZXh0IiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJEaXNwbGF5IHRleHQgZGF0YSBpbiB2YXJpb3VzIGZvcm1hdHMiLA0KICAgICAgImljb24iOiAiZmFzIGZhLWV5ZSIsDQogICAgICAiY29sb3IiOiAic3VjY2VzcyIsDQogICAgICAiY2F0ZWdvcnkiOiAib3V0cHV0IiwNCiAgICAgICJleGVjdXRpb25fbW9kZSI6ICJmcm9udGVuZF9vbmx5IiwNCiAgICAgICJpbnB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0ZXh0IiwNCiAgICAgICAgICAibmFtZSI6ICJUZXh0IiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImpzb24iLA0KICAgICAgICAgICJuYW1lIjogIkpTT04iLA0KICAgICAgICAgICJ0eXBlIjogImpzb24iDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiYmluYXJ5IiwNCiAgICAgICAgICAibmFtZSI6ICJCaW5hcnkiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidGV4dCIsDQogICAgICAgICAgIm5hbWUiOiAiVGV4dCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkaXNwbGF5ZWQiLA0KICAgICAgICAgICJuYW1lIjogIkRpc3BsYXllZCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJpbnB1dF9wb3J0Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIklucHV0IFBvcnQiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJhdXRvIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJhdXRvIiwNCiAgICAgICAgICAgICJ0ZXh0IiwNCiAgICAgICAgICAgICJqc29uIiwNCiAgICAgICAgICAgICJkYXRhIiwNCiAgICAgICAgICAgICJiaW5hcnkiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiZm9ybWF0Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkZvcm1hdCIsDQogICAgICAgICAgInZhbHVlIjogInRleHQiLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgInRleHQiLA0KICAgICAgICAgICAgImpzb24iLA0KICAgICAgICAgICAgImh0bWwiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAibWF4TGVuZ3RoIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIk1heCBMZW5ndGgiLA0KICAgICAgICAgICJ2YWx1ZSI6IDEwMDAsDQogICAgICAgICAgIm1pbiI6IDEsDQogICAgICAgICAgIm1heCI6IDEwMDAwLA0KICAgICAgICAgICJzdGVwIjogMTAwDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAiZGlzcGxheV9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfSwNCiAgICAiaHR0cCI6IHsNCiAgICAgICJpZCI6ICJodHRwIiwNCiAgICAgICJuYW1lIjogIkhUVFAgUmVxdWVzdCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiTWFrZSBIVFRQIHJlcXVlc3RzIHRvIGV4dGVybmFsIEFQSXMgYW5kIHNlcnZpY2VzIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1nbG9iZSIsDQogICAgICAiY29sb3IiOiAicHJpbWFyeSIsDQogICAgICAiY2F0ZWdvcnkiOiAibmV0d29yayIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidHJpZ2dlciIsDQogICAgICAgICAgIm5hbWUiOiAiVHJpZ2dlciIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidGV4dCIsDQogICAgICAgICAgIm5hbWUiOiAiVGV4dCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJqc29uIiwNCiAgICAgICAgICAibmFtZSI6ICJKU09OIiwNCiAgICAgICAgICAidHlwZSI6ICJqc29uIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImJpbmFyeSIsDQogICAgICAgICAgIm5hbWUiOiAiQmluYXJ5IiwNCiAgICAgICAgICAidHlwZSI6ICJiaW5hcnkiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAic3RhdHVzX2NvZGUiLA0KICAgICAgICAgICJuYW1lIjogIlN0YXR1cyBDb2RlIiwNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiaGVhZGVycyIsDQogICAgICAgICAgIm5hbWUiOiAiSGVhZGVycyIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ1cmwiLA0KICAgICAgICAgICJuYW1lIjogIlVSTCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJ1cmwiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIlVSTCIsDQogICAgICAgICAgInZhbHVlIjogImh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cy8xIg0KICAgICAgICB9LA0KICAgICAgICAibWV0aG9kIjogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIk1ldGhvZCIsDQogICAgICAgICAgInZhbHVlIjogIkdFVCIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAiR0VUIiwNCiAgICAgICAgICAgICJQT1NUIiwNCiAgICAgICAgICAgICJQVVQiLA0KICAgICAgICAgICAgIkRFTEVURSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJoZWFkZXJzIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHRhcmVhIiwNCiAgICAgICAgICAibGFiZWwiOiAiSGVhZGVycyAoSlNPTikiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJ7XCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJ9Ig0KICAgICAgICB9LA0KICAgICAgICAiYm9keSI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0YXJlYSIsDQogICAgICAgICAgImxhYmVsIjogIkJvZHkgKEpTT04pIiwNCiAgICAgICAgICAidmFsdWUiOiAie1wibWVzc2FnZVwiOiBcInt7VkFMVUV9fVwiLCBcInRpbWVzdGFtcFwiOiBcInt7SlNPTjp0aW1lc3RhbXB9fVwifSINCiAgICAgICAgfQ0KICAgICAgfSwNCiAgICAgICJleGVjdXRvciI6ICJodHRwX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJpbWFnZSI6IHsNCiAgICAgICJpZCI6ICJpbWFnZSIsDQogICAgICAibmFtZSI6ICJJbWFnZSBEaXNwbGF5IiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJEaXNwbGF5IGltYWdlcyBhbmQgY29udHJvbCB2aXN1YWxpemF0aW9uIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1pbWFnZSIsDQogICAgICAiY29sb3IiOiAiaW5mbyIsDQogICAgICAiY2F0ZWdvcnkiOiAibWVkaWEiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImZyb250ZW5kX29ubHkiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImJpbmFyeSIsDQogICAgICAgICAgIm5hbWUiOiAiQmluYXJ5IiwNCiAgICAgICAgICAidHlwZSI6ICJiaW5hcnkiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiaW1hZ2VfZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiSW1hZ2UgRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInVybCIsDQogICAgICAgICAgIm5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJiaW5hcnkiLA0KICAgICAgICAgICJuYW1lIjogIkJpbmFyeSIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImltYWdlX2RhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkltYWdlIERhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJpbWFnZV91cmwiLA0KICAgICAgICAgICJuYW1lIjogIkltYWdlIFVSTCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkaW1lbnNpb25zIiwNCiAgICAgICAgICAibmFtZSI6ICJEaW1lbnNpb25zIiwNCiAgICAgICAgICAidHlwZSI6ICJqc29uIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogIm9yaWdpbmFsIiwNCiAgICAgICAgICAibmFtZSI6ICJPcmlnaW5hbCIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgImNvbmZpZyI6IHsNCiAgICAgICAgIm1heF9wcmV2aWV3X3NpemUiOiB7DQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAibGFiZWwiOiAiTWF4IFByZXZpZXcgU2l6ZSIsDQogICAgICAgICAgInZhbHVlIjogMzAwLA0KICAgICAgICAgICJtaW4iOiA1MCwNCiAgICAgICAgICAibWF4IjogODAwLA0KICAgICAgICAgICJzdGVwIjogNTANCiAgICAgICAgfSwNCiAgICAgICAgInNob3dfaW5mbyI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJTaG93IEluZm8iLA0KICAgICAgICAgICJ2YWx1ZSI6ICJ0cnVlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAiaW1hZ2VfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgImpzb25fZXh0cmFjdCI6IHsNCiAgICAgICJpZCI6ICJqc29uX2V4dHJhY3QiLA0KICAgICAgIm5hbWUiOiAiSlNPTiBFeHRyYWN0IiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFeHRyYWN0IHZhbHVlcyBmcm9tIEpTT04gZGF0YSB1c2luZyBkb3Qgbm90YXRpb24iLA0KICAgICAgImljb24iOiAiZmFzIGZhLWNvZGUtYnJhbmNoIiwNCiAgICAgICJjb2xvciI6ICJpbmZvIiwNCiAgICAgICJjYXRlZ29yeSI6ICJkYXRhIiwNCiAgICAgICJleGVjdXRpb25fbW9kZSI6ICJib3RoIiwNCiAgICAgICJpbnB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJqc29uIiwNCiAgICAgICAgICAibmFtZSI6ICJKU09OIiwNCiAgICAgICAgICAidHlwZSI6ICJqc29uIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRleHQiLA0KICAgICAgICAgICJuYW1lIjogIlRleHQiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRleHQiLA0KICAgICAgICAgICJuYW1lIjogIlRleHQiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAianNvbiIsDQogICAgICAgICAgIm5hbWUiOiAiSlNPTiIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJleHRyYWN0ZWRfdmFsdWUiLA0KICAgICAgICAgICJuYW1lIjogIkV4dHJhY3RlZCBWYWx1ZSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJmaWVsZF9wYXRoIiwNCiAgICAgICAgICAibmFtZSI6ICJGaWVsZCBQYXRoIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogIm9yaWdpbmFsIiwNCiAgICAgICAgICAibmFtZSI6ICJPcmlnaW5hbCIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJmaWVsZF9wYXRoIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJGaWVsZCBQYXRoIiwNCiAgICAgICAgICAidmFsdWUiOiAiZGF0YS5pdGVtcyIsDQogICAgICAgICAgInBsYWNlaG9sZGVyIjogIlVzZSBkb3Qgbm90YXRpb24gKGUuZy4sIGRhdGEuaXRlbXMuMC5uYW1lKSINCiAgICAgICAgfSwNCiAgICAgICAgImRpc3BsYXlfZm9ybWF0Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkRpc3BsYXkgRm9ybWF0IiwNCiAgICAgICAgICAidmFsdWUiOiAidGV4dCIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidGV4dCIsDQogICAgICAgICAgICAianNvbiINCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAianNvbl9leHRyYWN0X2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJsbG1fY2hhdCI6IHsNCiAgICAgICJpZCI6ICJsbG1fY2hhdCIsDQogICAgICAibmFtZSI6ICJMTE0gQ2hhdCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiQ2hhdCB3aXRoIExhcmdlIExhbmd1YWdlIE1vZGVscyB1c2luZyBPbGxhbWEiLA0KICAgICAgImljb24iOiAiZmFzIGZhLXJvYm90IiwNCiAgICAgICJjb2xvciI6ICJpbmZvIiwNCiAgICAgICJjYXRlZ29yeSI6ICJhaSIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInByb21wdCIsDQogICAgICAgICAgIm5hbWUiOiAiUHJvbXB0IiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInN5c3RlbV9tZXNzYWdlIiwNCiAgICAgICAgICAibmFtZSI6ICJTeXN0ZW0gTWVzc2FnZSIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJjb250ZXh0IiwNCiAgICAgICAgICAibmFtZSI6ICJDb250ZXh0IiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAicmVzcG9uc2UiLA0KICAgICAgICAgICJuYW1lIjogIlJlc3BvbnNlIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRva2Vuc191c2VkIiwNCiAgICAgICAgICAibmFtZSI6ICJUb2tlbnMgVXNlZCIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogIm1vZGVsX3VzZWQiLA0KICAgICAgICAgICJuYW1lIjogIk1vZGVsIFVzZWQiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZnVsbF9yZXNwb25zZSIsDQogICAgICAgICAgIm5hbWUiOiAiRnVsbCBSZXNwb25zZSIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJlbmRwb2ludCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwNCiAgICAgICAgICAibGFiZWwiOiAiT2xsYW1hIEVuZHBvaW50IiwNCiAgICAgICAgICAidmFsdWUiOiAiaHR0cDovLzEyNy4wLjAuMToxMTQzNC92MSIsDQogICAgICAgICAgInBsYWNlaG9sZGVyIjogImh0dHA6Ly8xMjcuMC4wLjE6MTE0MzQvdjEiDQogICAgICAgIH0sDQogICAgICAgICJtb2RlbCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwNCiAgICAgICAgICAibGFiZWwiOiAiTW9kZWwgTmFtZSIsDQogICAgICAgICAgInZhbHVlIjogIkhhbW1lckFJL21uLW1hZy1tZWxsLXIxOmxhdGVzdCIsDQogICAgICAgICAgInBsYWNlaG9sZGVyIjogImxsYW1hMiwgY29kZWxsYW1hLCBldGMuIg0KICAgICAgICB9LA0KICAgICAgICAidGVtcGVyYXR1cmUiOiB7DQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAibGFiZWwiOiAiVGVtcGVyYXR1cmUiLA0KICAgICAgICAgICJ2YWx1ZSI6IDAuNywNCiAgICAgICAgICAibWluIjogMCwNCiAgICAgICAgICAibWF4IjogMiwNCiAgICAgICAgICAic3RlcCI6IDAuMQ0KICAgICAgICB9LA0KICAgICAgICAibWF4X3Rva2VucyI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJNYXggVG9rZW5zIiwNCiAgICAgICAgICAidmFsdWUiOiAyMDQ4LA0KICAgICAgICAgICJtaW4iOiAxLA0KICAgICAgICAgICJtYXgiOiA4MTkyLA0KICAgICAgICAgICJzdGVwIjogMQ0KICAgICAgICB9LA0KICAgICAgICAic3lzdGVtX3Byb21wdCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0YXJlYSIsDQogICAgICAgICAgImxhYmVsIjogIlN5c3RlbSBQcm9tcHQiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJZb3UgYXJlIGEgaGVscGZ1bCBBSSBhc3Npc3RhbnQuIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiRGVmaW5lIHRoZSBBSSdzIHJvbGUgYW5kIGJlaGF2aW9yIg0KICAgICAgICB9LA0KICAgICAgICAiaW5jbHVkZV9jb250ZXh0Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkluY2x1ZGUgQ29udGV4dCIsDQogICAgICAgICAgInZhbHVlIjogInRydWUiLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgInRydWUiLA0KICAgICAgICAgICAgImZhbHNlIg0KICAgICAgICAgIF0NCiAgICAgICAgfQ0KICAgICAgfSwNCiAgICAgICJleGVjdXRvciI6ICJsbG1fY2hhdF9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfSwNCiAgICAibG9naWNhbF9nYXRlIjogew0KICAgICAgImlkIjogImxvZ2ljYWxfZ2F0ZSIsDQogICAgICAibmFtZSI6ICJMb2dpY2FsIEdhdGUiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIk9ubHkgY29udGludWUgZXhlY3V0aW9uIGlmIGlucHV0IGlzIHRydWUiLA0KICAgICAgImljb24iOiAiZmFzIGZhLWZpbHRlciIsDQogICAgICAiY29sb3IiOiAiaW5mbyIsDQogICAgICAiY2F0ZWdvcnkiOiAibG9naWMiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJjb25kaXRpb24iLA0KICAgICAgICAgICJuYW1lIjogIkNvbmRpdGlvbiIsDQogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRyaWdnZXIiLA0KICAgICAgICAgICJuYW1lIjogIlRyaWdnZXIiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAiaW52ZXJ0Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkludmVydCBMb2dpYyIsDQogICAgICAgICAgInZhbHVlIjogImZhbHNlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJkZXNjcmlwdGlvbiI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwNCiAgICAgICAgICAibGFiZWwiOiAiRGVzY3JpcHRpb24iLA0KICAgICAgICAgICJ2YWx1ZSI6ICIiLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICJPcHRpb25hbCBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoaXMgZ2F0ZSBkb2VzIg0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogImxvZ2ljYWxfZ2F0ZV9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfSwNCiAgICAibWF0aCI6IHsNCiAgICAgICJpZCI6ICJtYXRoIiwNCiAgICAgICJuYW1lIjogIk1hdGggT3BlcmF0aW9ucyIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiUGVyZm9ybSBtYXRoZW1hdGljYWwgb3BlcmF0aW9ucyBvbiBudW1lcmljIHZhbHVlcyIsDQogICAgICAiaWNvbiI6ICJmYXMgZmEtY2FsY3VsYXRvciIsDQogICAgICAiY29sb3IiOiAiaW5mbyIsDQogICAgICAiY2F0ZWdvcnkiOiAiZGF0YSIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInZhbHVlX2EiLA0KICAgICAgICAgICJuYW1lIjogIlZhbHVlIEEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidmFsdWVfYiIsDQogICAgICAgICAgIm5hbWUiOiAiVmFsdWUgQiIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJudW1iZXJfYSIsDQogICAgICAgICAgIm5hbWUiOiAiTnVtYmVyIEEiLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJudW1iZXJfYiIsDQogICAgICAgICAgIm5hbWUiOiAiTnVtYmVyIEIiLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInJlc3VsdCIsDQogICAgICAgICAgIm5hbWUiOiAiUmVzdWx0IiwNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0ZXh0IiwNCiAgICAgICAgICAibmFtZSI6ICJUZXh0IiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImZvcm1hdHRlZCIsDQogICAgICAgICAgIm5hbWUiOiAiRm9ybWF0dGVkIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgImNvbmZpZyI6IHsNCiAgICAgICAgIm9wZXJhdGlvbiI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJPcGVyYXRpb24iLA0KICAgICAgICAgICJ2YWx1ZSI6ICJhZGQiLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgImFkZCIsDQogICAgICAgICAgICAic3VidHJhY3QiLA0KICAgICAgICAgICAgIm11bHRpcGx5IiwNCiAgICAgICAgICAgICJkaXZpZGUiLA0KICAgICAgICAgICAgIm1vZHVsbyIsDQogICAgICAgICAgICAicG93ZXIiLA0KICAgICAgICAgICAgIm1pbiIsDQogICAgICAgICAgICAibWF4IiwNCiAgICAgICAgICAgICJhYnMiLA0KICAgICAgICAgICAgInJvdW5kIiwNCiAgICAgICAgICAgICJmbG9vciIsDQogICAgICAgICAgICAiY2VpbCINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJ2YWx1ZV9hIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIlZhbHVlIEEgKGlmIG5vdCBjb25uZWN0ZWQpIiwNCiAgICAgICAgICAidmFsdWUiOiAwLA0KICAgICAgICAgICJzdGVwIjogMC4wMQ0KICAgICAgICB9LA0KICAgICAgICAidmFsdWVfYiI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJWYWx1ZSBCIChpZiBub3QgY29ubmVjdGVkKSIsDQogICAgICAgICAgInZhbHVlIjogMCwNCiAgICAgICAgICAic3RlcCI6IDAuMDENCiAgICAgICAgfSwNCiAgICAgICAgImRlY2ltYWxfcGxhY2VzIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIkRlY2ltYWwgUGxhY2VzIiwNCiAgICAgICAgICAidmFsdWUiOiAwLA0KICAgICAgICAgICJtaW4iOiAwLA0KICAgICAgICAgICJtYXgiOiAxMCwNCiAgICAgICAgICAic3RlcCI6IDENCiAgICAgICAgfQ0KICAgICAgfSwNCiAgICAgICJleGVjdXRvciI6ICJtYXRoX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJyZXBlYXRlciI6IHsNCiAgICAgICJpZCI6ICJyZXBlYXRlciIsDQogICAgICAibmFtZSI6ICJSZXBlYXRlciIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiUmVwZWF0IGNvbm5lY3RlZCB3b3JrZmxvdyBhdCBpbnRlcnZhbHMiLA0KICAgICAgImljb24iOiAiZmFzIGZhLXJlZG8iLA0KICAgICAgImNvbG9yIjogIndhcm5pbmciLA0KICAgICAgImNhdGVnb3J5IjogInRyaWdnZXIiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0cmlnZ2VyIiwNCiAgICAgICAgICAibmFtZSI6ICJUcmlnZ2VyIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidHJpZ2dlciIsDQogICAgICAgICAgIm5hbWUiOiAiVHJpZ2dlciIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJjb3VudCIsDQogICAgICAgICAgIm5hbWUiOiAiQ291bnQiLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJpbnRlcnZhbCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJJbnRlcnZhbCAobXMpIiwNCiAgICAgICAgICAidmFsdWUiOiAxMDAwLA0KICAgICAgICAgICJtaW4iOiAxMDAsDQogICAgICAgICAgIm1heCI6IDMwMDAwMCwNCiAgICAgICAgICAic3RlcCI6IDEwMA0KICAgICAgICB9LA0KICAgICAgICAiY291bnQiOiB7DQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAibGFiZWwiOiAiQ291bnQgKDAgPSBpbmZpbml0ZSkiLA0KICAgICAgICAgICJ2YWx1ZSI6IDAsDQogICAgICAgICAgIm1pbiI6IDAsDQogICAgICAgICAgInN0ZXAiOiAxDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAicmVwZWF0ZXJfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgInN0cmluZyI6IHsNCiAgICAgICJpZCI6ICJzdHJpbmciLA0KICAgICAgIm5hbWUiOiAiU3RyaW5nIE9wZXJhdGlvbnMiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIk1hbmlwdWxhdGUgYW5kIHByb2Nlc3MgdGV4dCBzdHJpbmdzIHdpdGggdmFyaW91cyBvcGVyYXRpb25zIiwNCiAgICAgICJpY29uIjogImZhcyBmYS10ZXh0LXdpZHRoIiwNCiAgICAgICJjb2xvciI6ICJzZWNvbmRhcnkiLA0KICAgICAgImNhdGVnb3J5IjogImRhdGEiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0ZXh0IiwNCiAgICAgICAgICAibmFtZSI6ICJUZXh0IiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRleHRfYiIsDQogICAgICAgICAgIm5hbWUiOiAiVGV4dCBCIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJyZXN1bHQiLA0KICAgICAgICAgICJuYW1lIjogIlJlc3VsdCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImFycmF5IiwNCiAgICAgICAgICAibmFtZSI6ICJBcnJheSIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJsZW5ndGgiLA0KICAgICAgICAgICJuYW1lIjogIkxlbmd0aCIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogIndvcmRfY291bnQiLA0KICAgICAgICAgICJuYW1lIjogIldvcmQgQ291bnQiLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJvcGVyYXRpb24iOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiT3BlcmF0aW9uIiwNCiAgICAgICAgICAidmFsdWUiOiAiY29uY2F0ZW5hdGUiLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgImNvbmNhdGVuYXRlIiwNCiAgICAgICAgICAgICJzcGxpdCIsDQogICAgICAgICAgICAicmVwbGFjZSIsDQogICAgICAgICAgICAidHJpbSIsDQogICAgICAgICAgICAidXBwZXJjYXNlIiwNCiAgICAgICAgICAgICJsb3dlcmNhc2UiLA0KICAgICAgICAgICAgInN1YnN0cmluZyIsDQogICAgICAgICAgICAicmVnZXhfbWF0Y2giLA0KICAgICAgICAgICAgInJlZ2V4X3JlcGxhY2UiLA0KICAgICAgICAgICAgInN0YXJ0c193aXRoIiwNCiAgICAgICAgICAgICJlbmRzX3dpdGgiLA0KICAgICAgICAgICAgImNvbnRhaW5zIiwNCiAgICAgICAgICAgICJyZXBlYXQiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAidGV4dF9iIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJUZXh0IEIgKGlmIG5vdCBjb25uZWN0ZWQpIiwNCiAgICAgICAgICAidmFsdWUiOiAiIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiU2Vjb25kIHRleHQgaW5wdXQiDQogICAgICAgIH0sDQogICAgICAgICJzZXBhcmF0b3IiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIlNlcGFyYXRvci9EZWxpbWl0ZXIiLA0KICAgICAgICAgICJ2YWx1ZSI6ICIsIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiRm9yIHNwbGl0L2pvaW4gb3BlcmF0aW9ucyINCiAgICAgICAgfSwNCiAgICAgICAgInNlYXJjaF90ZXh0Ijogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJTZWFyY2ggVGV4dCIsDQogICAgICAgICAgInZhbHVlIjogIiIsDQogICAgICAgICAgInBsYWNlaG9sZGVyIjogIlRleHQgdG8gc2VhcmNoL3JlcGxhY2UiDQogICAgICAgIH0sDQogICAgICAgICJyZXBsYWNlX3RleHQiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIlJlcGxhY2UgV2l0aCIsDQogICAgICAgICAgInZhbHVlIjogIiIsDQogICAgICAgICAgInBsYWNlaG9sZGVyIjogIlJlcGxhY2VtZW50IHRleHQiDQogICAgICAgIH0sDQogICAgICAgICJzdGFydF9pbmRleCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJTdGFydCBJbmRleCIsDQogICAgICAgICAgInZhbHVlIjogMCwNCiAgICAgICAgICAibWluIjogMA0KICAgICAgICB9LA0KICAgICAgICAiZW5kX2luZGV4Ijogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIkVuZCBJbmRleCAoMCA9IGVuZCkiLA0KICAgICAgICAgICJ2YWx1ZSI6IDAsDQogICAgICAgICAgIm1pbiI6IDANCiAgICAgICAgfSwNCiAgICAgICAgInJlcGVhdF9jb3VudCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJSZXBlYXQgQ291bnQiLA0KICAgICAgICAgICJ2YWx1ZSI6IDEsDQogICAgICAgICAgIm1pbiI6IDEsDQogICAgICAgICAgIm1heCI6IDEwMA0KICAgICAgICB9LA0KICAgICAgICAiY2FzZV9zZW5zaXRpdmUiOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiQ2FzZSBTZW5zaXRpdmUiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJ0cnVlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAic3RyaW5nX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJ0ZXh0Ijogew0KICAgICAgImlkIjogInRleHQiLA0KICAgICAgIm5hbWUiOiAiVGV4dCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiT3V0cHV0IHN0YXRpYyB0ZXh0IGNvbnRlbnQiLA0KICAgICAgImljb24iOiAiZmFzIGZhLWZvbnQiLA0KICAgICAgImNvbG9yIjogInNlY29uZGFyeSIsDQogICAgICAiY2F0ZWdvcnkiOiAiZGF0YSIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidHJpZ2dlciIsDQogICAgICAgICAgIm5hbWUiOiAiVHJpZ2dlciIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidGV4dCIsDQogICAgICAgICAgIm5hbWUiOiAiVGV4dCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ1cHBlcmNhc2UiLA0KICAgICAgICAgICJuYW1lIjogIlVwcGVyY2FzZSIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJsb3dlcmNhc2UiLA0KICAgICAgICAgICJuYW1lIjogIkxvd2VyY2FzZSIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ3b3JkX2NvdW50IiwNCiAgICAgICAgICAibmFtZSI6ICJXb3JkIENvdW50IiwNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAibGVuZ3RoIiwNCiAgICAgICAgICAibmFtZSI6ICJMZW5ndGgiLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJ0ZXh0X2NvbnRlbnQiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dGFyZWEiLA0KICAgICAgICAgICJsYWJlbCI6ICJUZXh0IENvbnRlbnQiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJIZWxsbywgV29ybGQhIg0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogInRleHRfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgInRpbWVyIjogew0KICAgICAgImlkIjogInRpbWVyIiwNCiAgICAgICJuYW1lIjogIlRpbWVyIiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJEZWxheSBleGVjdXRpb24gZm9yIHNwZWNpZmllZCBtaWxsaXNlY29uZHMiLA0KICAgICAgImljb24iOiAiZmFzIGZhLWNsb2NrIiwNCiAgICAgICJjb2xvciI6ICJ3YXJuaW5nIiwNCiAgICAgICJjYXRlZ29yeSI6ICJ0cmlnZ2VyIiwNCiAgICAgICJleGVjdXRpb25fbW9kZSI6ICJib3RoIiwNCiAgICAgICJpbnB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0cmlnZ2VyIiwNCiAgICAgICAgICAibmFtZSI6ICJUcmlnZ2VyIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0cmlnZ2VyIiwNCiAgICAgICAgICAibmFtZSI6ICJUcmlnZ2VyIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRpbWVzdGFtcCIsDQogICAgICAgICAgIm5hbWUiOiAiVGltZXN0YW1wIiwNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZWxhcHNlZCIsDQogICAgICAgICAgIm5hbWUiOiAiRWxhcHNlZCIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgImNvbmZpZyI6IHsNCiAgICAgICAgImludGVydmFsIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIkludGVydmFsIChtcykiLA0KICAgICAgICAgICJ2YWx1ZSI6IDEwMDAsDQogICAgICAgICAgIm1pbiI6IDEwMCwNCiAgICAgICAgICAibWF4IjogNjAwMDAsDQogICAgICAgICAgInN0ZXAiOiAxMDANCiAgICAgICAgfSwNCiAgICAgICAgImNvdW50Ijogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIkNvdW50IiwNCiAgICAgICAgICAidmFsdWUiOiAxLA0KICAgICAgICAgICJtaW4iOiAxLA0KICAgICAgICAgICJtYXgiOiAxMDAsDQogICAgICAgICAgInN0ZXAiOiAxDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAidGltZXJfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgInZmc19sb2FkIjogew0KICAgICAgImlkIjogInZmc19sb2FkIiwNCiAgICAgICJuYW1lIjogIlZGUyBMb2FkIiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJMb2FkIGRhdGEgZnJvbSB0aGUgVmlydHVhbCBGaWxlIFN5c3RlbSIsDQogICAgICAiaWNvbiI6ICJmYXMgZmEtZm9sZGVyLW9wZW4iLA0KICAgICAgImNvbG9yIjogInByaW1hcnkiLA0KICAgICAgImNhdGVnb3J5IjogInN0b3JhZ2UiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0cmlnZ2VyIiwNCiAgICAgICAgICAibmFtZSI6ICJUcmlnZ2VyIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJmaWxlX3BhdGgiLA0KICAgICAgICAgICJuYW1lIjogIkZpbGUgUGF0aCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJmaWxlX3BhdGgiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIkZpbGUgUGF0aCIsDQogICAgICAgICAgInZhbHVlIjogIi9teV9kYXRhLmpzb24iLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICIvYWJzb2x1dGUvcGF0aC9pbi92ZnMiDQogICAgICAgIH0sDQogICAgICAgICJmb3JtYXQiOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiRm9ybWF0IiwNCiAgICAgICAgICAidmFsdWUiOiAianNvbiIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAianNvbiIsDQogICAgICAgICAgICAidGV4dCIsDQogICAgICAgICAgICAiYmluYXJ5Ig0KICAgICAgICAgIF0NCiAgICAgICAgfSwNCiAgICAgICAgImF1dG9fcmVsb2FkIjogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkF1dG8gUmVsb2FkIG9uIENoYW5nZSIsDQogICAgICAgICAgInZhbHVlIjogImZhbHNlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAidmZzX2xvYWRfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgInZmc19zYXZlIjogew0KICAgICAgImlkIjogInZmc19zYXZlIiwNCiAgICAgICJuYW1lIjogIlZGUyBTYXZlIiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJTYXZlIGRhdGEgdG8gdGhlIFZpcnR1YWwgRmlsZSBTeXN0ZW0iLA0KICAgICAgImljb24iOiAiZmFzIGZhLXNhdmUiLA0KICAgICAgImNvbG9yIjogInByaW1hcnkiLA0KICAgICAgImNhdGVnb3J5IjogInN0b3JhZ2UiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAic3VjY2VzcyIsDQogICAgICAgICAgIm5hbWUiOiAiU3VjY2VzcyIsDQogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJmaWxlX3BhdGgiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIkZpbGUgUGF0aCIsDQogICAgICAgICAgInZhbHVlIjogIi9teV9kYXRhLmpzb24iLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICIvYWJzb2x1dGUvcGF0aC9pbi92ZnMiDQogICAgICAgIH0sDQogICAgICAgICJmb3JtYXQiOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiRm9ybWF0IiwNCiAgICAgICAgICAidmFsdWUiOiAianNvbiIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAianNvbiIsDQogICAgICAgICAgICAidGV4dCIsDQogICAgICAgICAgICAiYmluYXJ5Ig0KICAgICAgICAgIF0NCiAgICAgICAgfSwNCiAgICAgICAgIm92ZXJ3cml0ZSI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJPdmVyd3JpdGUiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJ0cnVlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJhcHBlbmQiOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiQXBwZW5kIE1vZGUiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJmYWxzZSIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidHJ1ZSIsDQogICAgICAgICAgICAiZmFsc2UiDQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogInZmc19zYXZlX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9DQogIH0NCn0=",
      "size": 29699
    }
  ]
}