{
  "app_metadata": {
    "id": "media_player",
    "name": "Media Player",
    "description": "A simple media player",
    "icon": "fas fa-play-circle",
    "keywords": [
      "video_player",
      "audio_player",
      "media_player",
      "video",
      "player",
      "media",
      "movies",
      "streaming"
    ],
    "author": "Sypnex OS",
    "version": "1.0.0",
    "type": "user_app",
    "settings": []
  },
  "files": {
    "media_player.app": "ew0KICAiaWQiOiAibWVkaWFfcGxheWVyIiwNCiAgIm5hbWUiOiAiTWVkaWEgUGxheWVyIiwNCiAgImRlc2NyaXB0aW9uIjogIkEgc2ltcGxlIG1lZGlhIHBsYXllciIsDQogICJpY29uIjogImZhcyBmYS1wbGF5LWNpcmNsZSIsDQogICJrZXl3b3JkcyI6IFsNCiAgICAidmlkZW9fcGxheWVyIiwNCiAgICAiYXVkaW9fcGxheWVyIiwNCiAgICAibWVkaWFfcGxheWVyIiwNCiAgICAidmlkZW8iLA0KICAgICJwbGF5ZXIiLA0KICAgICJtZWRpYSIsDQogICAgIm1vdmllcyIsDQogICAgInN0cmVhbWluZyINCiAgXSwNCiAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAidmVyc2lvbiI6ICIxLjAuMCIsDQogICJ0eXBlIjogInVzZXJfYXBwIiwNCiAgInNldHRpbmdzIjogW10NCn0=",
    "media_player.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-11T02:00:47.079197",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\media_player"
  }
}