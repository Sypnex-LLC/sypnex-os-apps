{
  "app_metadata": {
    "id": "text_editor",
    "name": "Text Editor",
    "description": "A simple text editor for creating and editing text files in the virtual file system",
    "icon": "fas fa-edit",
    "keywords": [
      "text_editor",
      "editor",
      "file",
      "edit",
      "write"
    ],
    "author": "Sypnex OS",
    "version": "1.0.9",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/settings-manager.js",
      "js/file-manager.js",
      "js/editor-manager.js",
      "js/syntax-highlighting.js",
      "js/code-validation.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "settings": [
      {
        "key": "AUTO_SAVE_INTERVAL",
        "name": "Auto Save Interval (s)",
        "type": "number",
        "value": 30,
        "description": "Auto save content every N seconds (0 = disabled)"
      },
      {
        "key": "FONT_SIZE",
        "name": "Font Size",
        "type": "number",
        "value": 14,
        "description": "Text editor font size in pixels"
      },
      {
        "key": "TAB_SIZE",
        "name": "Tab Size",
        "type": "number",
        "value": 4,
        "description": "Number of spaces for tab indentation"
      }
    ]
  },
  "files": {
    "text_editor.app": "ew0KICAgICJpZCI6ICJ0ZXh0X2VkaXRvciIsDQogICAgIm5hbWUiOiAiVGV4dCBFZGl0b3IiLA0KICAgICJkZXNjcmlwdGlvbiI6ICJBIHNpbXBsZSB0ZXh0IGVkaXRvciBmb3IgY3JlYXRpbmcgYW5kIGVkaXRpbmcgdGV4dCBmaWxlcyBpbiB0aGUgdmlydHVhbCBmaWxlIHN5c3RlbSIsDQogICAgImljb24iOiAiZmFzIGZhLWVkaXQiLA0KICAgICJrZXl3b3JkcyI6IFsidGV4dF9lZGl0b3IiLCAiZWRpdG9yIiwgImZpbGUiLCAiZWRpdCIsICJ3cml0ZSJdLA0KICAgICJhdXRob3IiOiAiU3lwbmV4IE9TIiwNCiAgICAidmVyc2lvbiI6ICIxLjAuOSIsDQogICAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAgICJzY3JpcHRzIjogWw0KICAgICAgICAianMvdXRpbHMuanMiLA0KICAgICAgICAianMvc2V0dGluZ3MtbWFuYWdlci5qcyIsDQogICAgICAgICJqcy9maWxlLW1hbmFnZXIuanMiLA0KICAgICAgICAianMvZWRpdG9yLW1hbmFnZXIuanMiLA0KICAgICAgICAianMvc3ludGF4LWhpZ2hsaWdodGluZy5qcyIsDQogICAgICAgICJqcy9jb2RlLXZhbGlkYXRpb24uanMiLCANCiAgICAgICAgImpzL3VpLW1hbmFnZXIuanMiLA0KICAgICAgICAianMvbWFpbi5qcyINCiAgICBdLA0KICAgICJzZXR0aW5ncyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICAgImtleSI6ICJBVVRPX1NBVkVfSU5URVJWQUwiLA0KICAgICAgICAgICAgIm5hbWUiOiAiQXV0byBTYXZlIEludGVydmFsIChzKSIsDQogICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICAgInZhbHVlIjogMzAsDQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQXV0byBzYXZlIGNvbnRlbnQgZXZlcnkgTiBzZWNvbmRzICgwID0gZGlzYWJsZWQpIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICAia2V5IjogIkZPTlRfU0laRSIsDQogICAgICAgICAgICAibmFtZSI6ICJGb250IFNpemUiLA0KICAgICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAgICJ2YWx1ZSI6IDE0LA0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRleHQgZWRpdG9yIGZvbnQgc2l6ZSBpbiBwaXhlbHMiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgICJrZXkiOiAiVEFCX1NJWkUiLA0KICAgICAgICAgICAgIm5hbWUiOiAiVGFiIFNpemUiLA0KICAgICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAgICJ2YWx1ZSI6IDQsDQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHNwYWNlcyBmb3IgdGFiIGluZGVudGF0aW9uIg0KICAgICAgICB9DQogICAgXQ0KfSA=",
    "text_editor.html": "PGRpdiBjbGFzcz0iYXBwLWNvbnRhaW5lciI+DQogICAgPGRpdiBjbGFzcz0iYXBwLWNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJhcHAtdG9vbGJhciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcHAtYnRuLWdyb3VwIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJuZXctZmlsZSIgY2xhc3M9ImFwcC1idG4gcHJpbWFyeSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZmlsZSI+PC9pPiBOZXcNCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJsb2FkLWZpbGUiIGNsYXNzPSJhcHAtYnRuIHNlY29uZGFyeSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZm9sZGVyLW9wZW4iPjwvaT4gTG9hZA0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InNhdmUtZmlsZSIgY2xhc3M9ImFwcC1idG4gcHJpbWFyeSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc2F2ZSI+PC9pPiBTYXZlDQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ic2F2ZS1hcy1maWxlIiBjbGFzcz0iYXBwLWJ0biBzZWNvbmRhcnkiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNhdmUiPjwvaT4gU2F2ZSBBcw0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICANCg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcHAtYnRuLWdyb3VwIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJ3b3JkLXdyYXAtdG9nZ2xlIiBjbGFzcz0iYXBwLWJ0biBzZWNvbmRhcnkiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRleHQtd2lkdGgiPjwvaT4gV29yZCBXcmFwDQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ibGluZS1udW1iZXJzLXRvZ2dsZSIgY2xhc3M9ImFwcC1idG4gc2Vjb25kYXJ5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1saXN0LW9sIj48L2k+IExpbmUgTnVtYmVycw0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InN5bnRheC1oaWdobGlnaHRpbmctdG9nZ2xlIiBjbGFzcz0iYXBwLWJ0biBzZWNvbmRhcnkiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNvZGUiPjwvaT4gU3ludGF4IEhpZ2hsaWdodGluZw0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImVkaXRvci1jb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWRpdG9yLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImxpbmUtbnVtYmVycyIgY2xhc3M9ImxpbmUtbnVtYmVycyI+PC9kaXY+DQogICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJ0ZXh0LWVkaXRvciIgY2xhc3M9ImFwcC10ZXh0YXJlYSIgcGxhY2Vob2xkZXI9IlN0YXJ0IHR5cGluZyB5b3VyIHRleHQgaGVyZS4uLiI+PC90ZXh0YXJlYT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJlZGl0b3Itc3RhdHVzIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cy1sZWZ0Ij4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhdHVzLWl0ZW0iPkZpbGU6IDxzcGFuIGlkPSJjdXJyZW50LWZpbGVuYW1lIj51bnRpdGxlZC50eHQ8L3NwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGF0dXMtaXRlbSI+TW9kaWZpZWQ6IDxzcGFuIGlkPSJtb2RpZmllZC1zdGF0dXMiPk5vPC9zcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2PiANCjxzdHlsZT4vKiA9PT09PSBTdHlsZTogc3R5bGUuY3NzID09PT09ICovDQovKiBUZXh0IEVkaXRvciBBcHAgU3R5bGVzICovDQoNCi8qIEFwcCBDb250YWluZXIgKi8NCi5hcHAtY29udGFpbmVyIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIG1pbi1oZWlnaHQ6IDA7DQp9DQoNCi5hcHAtY29udGVudCB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICAgIGZsZXg6IDE7DQogICAgbWluLWhlaWdodDogMDsNCn0NCg0KLyogRWRpdG9yIENvbnRhaW5lciAqLw0KLmVkaXRvci1jb250YWluZXIgew0KICAgIGZsZXg6IDE7DQogICAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1iZyk7DQogICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTsNCiAgICBib3JkZXItcmFkaXVzOiA2cHg7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICBtYXJnaW46IDE1cHggMDsNCiAgICBtaW4taGVpZ2h0OiAyMDBweDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQp9DQoNCi5lZGl0b3Itd3JhcHBlciB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBmbGV4OiAxOw0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBoZWlnaHQ6IDEwMCU7DQp9DQoNCi8qIExpbmUgTnVtYmVycyAqLw0KLmxpbmUtbnVtYmVycyB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmcpOw0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcik7DQogICAgcGFkZGluZzogMTBweCA4cHg7DQogICAgZm9udC1mYW1pbHk6ICdTRiBNb25vJywgTW9uYWNvLCAnQ2FzY2FkaWEgQ29kZScsIG1vbm9zcGFjZTsNCiAgICBmb250LXNpemU6IDE0cHg7IC8qIE1hdGNoIGVkaXRvciBmb250IHNpemUgKi8NCiAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7DQogICAgdGV4dC1hbGlnbjogcmlnaHQ7DQogICAgbWluLXdpZHRoOiA1MHB4Ow0KICAgIHVzZXItc2VsZWN0OiBub25lOw0KICAgIG92ZXJmbG93LXk6IGhpZGRlbjsNCiAgICBsaW5lLWhlaWdodDogMS42OyAvKiBNYXRjaCBlZGl0b3IgbGluZSBoZWlnaHQgKi8NCiAgICBmbGV4LXNocmluazogMDsNCn0NCg0KLmxpbmUtbnVtYmVycy5oaWRkZW4gew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQoNCi5saW5lLW51bWJlciB7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgcGFkZGluZzogMCA0cHg7DQp9DQoNCi8qIFRleHQgRWRpdG9yICovDQojdGV4dC1lZGl0b3Igew0KICAgIGZsZXg6IDE7DQogICAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1iZyk7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXByaW1hcnkpOw0KICAgIGZvbnQtZmFtaWx5OiAnU0YgTW9ubycsIE1vbmFjbywgJ0Nhc2NhZGlhIENvZGUnLCBtb25vc3BhY2U7DQogICAgZm9udC1zaXplOiAxNHB4Ow0KICAgIGxpbmUtaGVpZ2h0OiAxLjY7DQogICAgcGFkZGluZzogMTBweCAxNXB4Ow0KICAgIHJlc2l6ZTogbm9uZTsNCiAgICBvdXRsaW5lOiBub25lOw0KICAgIG92ZXJmbG93LXk6IGF1dG87DQogICAgb3ZlcmZsb3cteDogYXV0bzsNCiAgICB3aGl0ZS1zcGFjZTogcHJlOw0KICAgIHRhYi1zaXplOiA0Ow0KICAgIGhlaWdodDogMTAwJTsNCiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KfQ0KDQojdGV4dC1lZGl0b3Iud29yZC13cmFwIHsNCiAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7DQogICAgd29yZC13cmFwOiBicmVhay13b3JkOw0KfQ0KDQojdGV4dC1lZGl0b3I6OnBsYWNlaG9sZGVyIHsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7DQp9DQoNCi8qIFN5bnRheCBIaWdobGlnaHRpbmcgRWRpdG9yICovDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIHsNCiAgICBmbGV4OiAxOw0KICAgIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktYmcpOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5KTsNCiAgICBmb250LWZhbWlseTogJ1NGIE1vbm8nLCBNb25hY28sICdDYXNjYWRpYSBDb2RlJywgbW9ub3NwYWNlOw0KICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICBsaW5lLWhlaWdodDogMS42Ow0KICAgIHBhZGRpbmc6IDEwcHggMTVweDsNCiAgICBvdXRsaW5lOiBub25lOw0KICAgIG92ZXJmbG93LXk6IGF1dG87DQogICAgb3ZlcmZsb3cteDogYXV0bzsNCiAgICB3aGl0ZS1zcGFjZTogcHJlOw0KICAgIHRhYi1zaXplOiA0Ow0KICAgIGhlaWdodDogMTAwJTsNCiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCn0NCg0KLmhpZ2hsaWdodGVkLWVkaXRvcjpmb2N1cyB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1iZyk7DQp9DQoNCi8qIFByaXNtLmpzIFRoZW1lIE92ZXJyaWRlcyBmb3IgYmV0dGVyIGludGVncmF0aW9uICovDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5jb21tZW50LA0KLmhpZ2hsaWdodGVkLWVkaXRvciAudG9rZW4ucHJvbG9nLA0KLmhpZ2hsaWdodGVkLWVkaXRvciAudG9rZW4uZG9jdHlwZSwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmNkYXRhIHsNCiAgICBjb2xvcjogIzZhNzM3ZDsNCn0NCg0KLmhpZ2hsaWdodGVkLWVkaXRvciAudG9rZW4ucHVuY3R1YXRpb24gew0KICAgIGNvbG9yOiAjZTFlNGU4Ow0KfQ0KDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5wcm9wZXJ0eSwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLnRhZywNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmJvb2xlYW4sDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5udW1iZXIsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5jb25zdGFudCwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLnN5bWJvbCwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmRlbGV0ZWQgew0KICAgIGNvbG9yOiAjNzliOGZmOw0KfQ0KDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5zZWxlY3RvciwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmF0dHItbmFtZSwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLnN0cmluZywNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmNoYXIsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5idWlsdGluLA0KLmhpZ2hsaWdodGVkLWVkaXRvciAudG9rZW4uaW5zZXJ0ZWQgew0KICAgIGNvbG9yOiAjODVlODlkOw0KfQ0KDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5vcGVyYXRvciwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmVudGl0eSwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLnVybCwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLmxhbmd1YWdlLWNzcyAudG9rZW4uc3RyaW5nLA0KLmhpZ2hsaWdodGVkLWVkaXRvciAuc3R5bGUgLnRva2VuLnN0cmluZyB7DQogICAgY29sb3I6ICNmOTc1ODM7DQp9DQoNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmF0cnVsZSwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmF0dHItdmFsdWUsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5rZXl3b3JkIHsNCiAgICBjb2xvcjogI2Y5NzU4MzsNCn0NCg0KLmhpZ2hsaWdodGVkLWVkaXRvciAudG9rZW4uZnVuY3Rpb24sDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5jbGFzcy1uYW1lIHsNCiAgICBjb2xvcjogI2IzOTJmMDsNCn0NCg0KLmhpZ2hsaWdodGVkLWVkaXRvciAudG9rZW4ucmVnZXgsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5pbXBvcnRhbnQsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi52YXJpYWJsZSB7DQogICAgY29sb3I6ICNmZmFiNzA7DQp9DQoNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmltcG9ydGFudCwNCi5oaWdobGlnaHRlZC1lZGl0b3IgLnRva2VuLmJvbGQgew0KICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KfQ0KDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIC50b2tlbi5pdGFsaWMgew0KICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsNCn0NCg0KLmhpZ2hsaWdodGVkLWVkaXRvciAudG9rZW4uZW50aXR5IHsNCiAgICBjdXJzb3I6IGhlbHA7DQp9DQoNCi8qIEVkaXRvciBTdGF0dXMgQmFyICovDQouZWRpdG9yLXN0YXR1cyB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOw0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgcGFkZGluZzogOHB4IDIwcHg7DQogICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmcpOw0KICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpOw0KICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1zZWNvbmRhcnkpOw0KICAgIGZsZXgtc2hyaW5rOiAwOw0KICAgIGhlaWdodDogMzJweDsNCiAgICBtaW4taGVpZ2h0OiAzMnB4Ow0KfQ0KDQouc3RhdHVzLWxlZnQgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZ2FwOiAyMHB4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQp9DQoNCi8qIE92ZXJyaWRlIHRoZSBtYWluIE9TIC5zdGF0dXMtaXRlbSBzdHlsZXMgdG8gYmUgZmxhdCAqLw0KLmVkaXRvci1zdGF0dXMgLnN0YXR1cy1pdGVtIHsNCiAgICBiYWNrZ3JvdW5kOiBub25lICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50Ow0KICAgIHBhZGRpbmc6IDAgIWltcG9ydGFudDsNCiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7DQogICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7DQogICAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5KTsNCiAgICBmb250LXNpemU6IDE0cHg7DQogICAgbGluZS1oZWlnaHQ6IDEuNDsNCiAgICBmb250LXdlaWdodDogNTAwOw0KfQ0KDQouZWRpdG9yLXN0YXR1cyAuc3RhdHVzLWl0ZW0gc3BhbiB7DQogICAgY29sb3I6IHZhcigtLWFjY2VudC1jb2xvcik7DQogICAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCg0KLyogRmlsZSBQYXRoIERpc3BsYXkgKi8NCi5maWxlLXBhdGgtZGlzcGxheSB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmcpOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdsYXNzLWJvcmRlcik7DQogICAgYm9yZGVyLXJhZGl1czogNnB4Ow0KICAgIHBhZGRpbmc6IDEwcHggMTVweDsNCiAgICBtaW4td2lkdGg6IDIwMHB4Ow0KICAgIGZvbnQtZmFtaWx5OiAnU0YgTW9ubycsIE1vbmFjbywgJ0Nhc2NhZGlhIENvZGUnLCBtb25vc3BhY2U7DQogICAgY29sb3I6IHZhcigtLXRleHQtcHJpbWFyeSk7DQogICAgZm9udC1zaXplOiAxNHB4Ow0KICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDsNCn0NCg0KLyogUmVzcG9uc2l2ZSBEZXNpZ24gKi8NCkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkgew0KICAgIC5hcHAtdG9vbGJhciB7DQogICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgICAgIGdhcDogMTBweDsNCiAgICB9DQogICAgDQogICAgLmFwcC1idG4tZ3JvdXAgew0KICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICB9DQogICAgDQogICAgLmVkaXRvci1zdGF0dXMgew0KICAgICAgICBmbGV4LXdyYXA6IHdyYXA7DQogICAgICAgIGdhcDogMTVweDsNCiAgICAgICAgcGFkZGluZzogOHB4IDE1cHg7DQogICAgICAgIGZvbnQtc2l6ZTogMTNweDsNCiAgICB9DQogICAgDQogICAgLmxpbmUtbnVtYmVycyB7DQogICAgICAgIG1pbi13aWR0aDogNDBweDsNCiAgICAgICAgZm9udC1zaXplOiAxM3B4OyAvKiBNYXRjaCBlZGl0b3IgZm9udCBzaXplICovDQogICAgfQ0KICAgIA0KICAgICN0ZXh0LWVkaXRvciwNCiAgICAuaGlnaGxpZ2h0ZWQtZWRpdG9yIHsNCiAgICAgICAgZm9udC1zaXplOiAxM3B4Ow0KICAgIH0NCn0NCg0KLyogRm9jdXMgU3RhdGVzICovDQojdGV4dC1lZGl0b3I6Zm9jdXMgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktYmcpOw0KfQ0KDQovKiBTY3JvbGxiYXIgU3R5bGluZyAtIEltcHJvdmVkIFVYICovDQojdGV4dC1lZGl0b3I6Oi13ZWJraXQtc2Nyb2xsYmFyLA0KLmxpbmUtbnVtYmVyczo6LXdlYmtpdC1zY3JvbGxiYXIsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yOjotd2Via2l0LXNjcm9sbGJhciB7DQogICAgd2lkdGg6IDE2cHg7ICAvKiBJbmNyZWFzZWQgZnJvbSA4cHggZm9yIGJldHRlciB1c2FiaWxpdHkgKi8NCiAgICBoZWlnaHQ6IDE2cHg7IC8qIEluY3JlYXNlZCBmcm9tIDhweCBmb3IgYmV0dGVyIHVzYWJpbGl0eSAqLw0KfQ0KDQojdGV4dC1lZGl0b3I6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrLA0KLmxpbmUtbnVtYmVyczo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2ssDQouaGlnaGxpZ2h0ZWQtZWRpdG9yOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmcpOw0KICAgIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7DQp9DQoNCiN0ZXh0LWVkaXRvcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIsDQoubGluZS1udW1iZXJzOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiwNCi5oaWdobGlnaHRlZC1lZGl0b3I6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1ib3JkZXItY29sb3IpOw0KICAgIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1nbGFzcy1iZyk7IC8qIEFkZHMgcGFkZGluZyBhcm91bmQgdGhlIHRodW1iIGZvciBlYXNpZXIgY2xpY2tpbmcgKi8NCiAgICBtaW4taGVpZ2h0OiAzMHB4OyAvKiBFbnN1cmVzIG1pbmltdW0gdGh1bWIgc2l6ZSBmb3IgZWFzaWVyIGdyYWJiaW5nICovDQogICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTsNCn0NCg0KI3RleHQtZWRpdG9yOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciwNCi5saW5lLW51bWJlcnM6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyLA0KLmhpZ2hsaWdodGVkLWVkaXRvcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLWFjY2VudC1jb2xvcik7DQogICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7DQogICAgdHJhbnNmb3JtOiBzY2FsZSgxLjA1KTsgLyogU2xpZ2h0IHNjYWxlIG9uIGhvdmVyIGZvciBiZXR0ZXIgZmVlZGJhY2sgKi8NCn0NCg0KI3RleHQtZWRpdG9yOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjphY3RpdmUsDQoubGluZS1udW1iZXJzOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjphY3RpdmUsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjphY3RpdmUgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLWFjY2VudC1wcmltYXJ5KTsNCiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7DQp9DQoNCi8qIENvcm5lciB3aGVyZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBzY3JvbGxiYXJzIG1lZXQgKi8NCiN0ZXh0LWVkaXRvcjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyLA0KLmxpbmUtbnVtYmVyczo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyLA0KLmhpZ2hsaWdodGVkLWVkaXRvcjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1nbGFzcy1iZyk7DQp9DQoNCi8qIEZpcmVmb3ggc2Nyb2xsYmFyIHN0eWxpbmcgKi8NCiN0ZXh0LWVkaXRvciwNCi5saW5lLW51bWJlcnMsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIHsNCiAgICBzY3JvbGxiYXItd2lkdGg6IGF1dG87IC8qIFVzZSBzdGFuZGFyZCB3aWR0aCwgbm90IHRoaW4gKi8NCiAgICBzY3JvbGxiYXItY29sb3I6IHZhcigtLWJvcmRlci1jb2xvcikgdmFyKC0tZ2xhc3MtYmcpOw0KfQ0KDQovKiBGb3IgYmV0dGVyIHNjcm9sbGJhciBpbnRlcmFjdGlvbiBvbiBhbGwgYnJvd3NlcnMgKi8NCiN0ZXh0LWVkaXRvciwNCi5saW5lLW51bWJlcnMsDQouaGlnaGxpZ2h0ZWQtZWRpdG9yIHsNCiAgICAvKiBFbnN1cmUgc2Nyb2xsYmFycyBhcmUgYWx3YXlzIHZpc2libGUgd2hlbiBjb250ZW50IG92ZXJmbG93cyAqLw0KICAgIG92ZXJmbG93OiBhdXRvOw0KfQ0KDQovKiBBcHAgVG9vbGJhciAqLw0KLmFwcC10b29sYmFyIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIHBhZGRpbmc6IDE1cHg7DQogICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmcpOw0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpOw0KICAgIGZsZXgtc2hyaW5rOiAwOw0KfQ0KDQouYXBwLWJ0bi1ncm91cCB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBnYXA6IDEwcHg7DQp9DQoNCi8qIEFuaW1hdGlvbiBmb3Igc3RhdHVzIGNoYW5nZXMgKi8NCi5zdGF0dXMtdmFsdWUgew0KICAgIHRyYW5zaXRpb246IGNvbG9yIDAuMnMgZWFzZTsNCn0NCg0KLyogTW9kaWZpZWQgc3RhdHVzIGluZGljYXRvciAqLw0KLnN0YXR1cy12YWx1ZS5tb2RpZmllZCB7DQogICAgY29sb3I6ICNmZjk4MDA7DQogICAgYW5pbWF0aW9uOiBwdWxzZSAycyBpbmZpbml0ZTsNCn0NCg0KQGtleWZyYW1lcyBwdWxzZSB7DQogICAgMCUgeyBvcGFjaXR5OiAxOyB9DQogICAgNTAlIHsgb3BhY2l0eTogMC43OyB9DQogICAgMTAwJSB7IG9wYWNpdHk6IDE7IH0NCn0NCg0KLyogQWN0aXZlIHRvZ2dsZSBidXR0b24gKi8NCi5hcHAtYnRuLmFjdGl2ZSB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tYWNjZW50LXByaW1hcnkpOw0KICAgIGNvbG9yOiB3aGl0ZTsNCn0gPC9zdHlsZT4NCjxzY3JpcHQ+Ly8gPT09PT0gU2NyaXB0OiBqcy91dGlscy5qcyA9PT09PQ0KDQoNCi8vID09PT09IFNjcmlwdDoganMvc2V0dGluZ3MtbWFuYWdlci5qcyA9PT09PQ0KDQoNCi8vID09PT09IFNjcmlwdDoganMvZmlsZS1tYW5hZ2VyLmpzID09PT09DQoNCg0KLy8gPT09PT0gU2NyaXB0OiBqcy9lZGl0b3ItbWFuYWdlci5qcyA9PT09PQ0KDQoNCi8vID09PT09IFNjcmlwdDoganMvc3ludGF4LWhpZ2hsaWdodGluZy5qcyA9PT09PQ0KDQoNCi8vID09PT09IFNjcmlwdDoganMvY29kZS12YWxpZGF0aW9uLmpzID09PT09DQoNCg0KLy8gPT09PT0gU2NyaXB0OiBqcy91aS1tYW5hZ2VyLmpzID09PT09DQoNCg0KLy8gPT09PT0gU2NyaXB0OiBqcy9tYWluLmpzID09PT09DQoNCg0KLy8gQ2hlY2sgaWYgZmlsZSBpcyBzdXBwb3J0ZWQgZm9yIHN5bnRheCBoaWdobGlnaHRpbmcNCmZ1bmN0aW9uIGdldEZpbGVMYW5ndWFnZShmaWxlUGF0aCkgew0KICAgIGlmICghZmlsZVBhdGgpIHJldHVybiBudWxsOw0KICAgIA0KICAgIGNvbnN0IGV4dGVuc2lvbiA9IGZpbGVQYXRoLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKGZpbGVQYXRoLmxhc3RJbmRleE9mKCcuJykpOw0KICAgIA0KICAgIGNvbnN0IGxhbmd1YWdlTWFwID0gew0KICAgICAgICAnLnB5JzogJ3B5dGhvbicsDQogICAgICAgICcucHl3JzogJ3B5dGhvbicsIA0KICAgICAgICAnLnB5eCc6ICdweXRob24nLA0KICAgICAgICAnLnB5aSc6ICdweXRob24nLA0KICAgICAgICAnLnB5ZCc6ICdweXRob24nLA0KICAgICAgICAnLmpzJzogJ2phdmFzY3JpcHQnLA0KICAgICAgICAnLmpzb24nOiAnanNvbicsDQogICAgICAgICcuaHRtbCc6ICdodG1sJywNCiAgICAgICAgJy5odG0nOiAnaHRtbCcsDQogICAgICAgICcuY3NzJzogJ2NzcycNCiAgICB9Ow0KICAgIA0KICAgIHJldHVybiBsYW5ndWFnZU1hcFtleHRlbnNpb25dIHx8IG51bGw7DQp9DQoNCi8vIENoZWNrIGlmIGZpbGUgaXMgUHl0aG9uIChmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSkNCmZ1bmN0aW9uIGlzUHl0aG9uRmlsZShmaWxlUGF0aCkgew0KICAgIHJldHVybiBnZXRGaWxlTGFuZ3VhZ2UoZmlsZVBhdGgpID09PSAncHl0aG9uJzsNCn0NCg0KLy8gU2ltcGxlIGhlbHBlciBmdW5jdGlvbnMgKGtlZXBpbmcgdGhlc2UgZm9yIHBvdGVudGlhbCBmdXR1cmUgdXNlKQ0KZnVuY3Rpb24gZ2V0U2ltcGxlVGV4dENvbnRlbnQoKSB7DQogICAgcmV0dXJuIHRleHRFZGl0b3IudGV4dGFyZWEudmFsdWU7DQp9DQoNCi8vIExvYWQgYXBwIHNldHRpbmdzDQphc3luYyBmdW5jdGlvbiBsb2FkU2V0dGluZ3MoKSB7DQogICAgdHJ5IHsNCiAgICAgICAgdGV4dEVkaXRvci5zZXR0aW5ncyA9IHsNCiAgICAgICAgICAgIGF1dG9TYXZlSW50ZXJ2YWw6IGF3YWl0IHN5cG5leEFQSS5nZXRTZXR0aW5nKCdBVVRPX1NBVkVfSU5URVJWQUwnLCAzMCksDQogICAgICAgICAgICBmb250U2l6ZTogYXdhaXQgc3lwbmV4QVBJLmdldFNldHRpbmcoJ0ZPTlRfU0laRScsIDE0KSwNCiAgICAgICAgICAgIHRhYlNpemU6IGF3YWl0IHN5cG5leEFQSS5nZXRTZXR0aW5nKCdUQUJfU0laRScsIDQpLA0KICAgICAgICAgICAgc3ludGF4SGlnaGxpZ2h0aW5nOiBhd2FpdCBzeXBuZXhBUEkuZ2V0U2V0dGluZygnU1lOVEFYX0hJR0hMSUdIVElORycsIHRydWUpDQogICAgICAgIH07DQogICAgICAgIA0KICAgICAgICAvLyBBcHBseSBzZXR0aW5ncw0KICAgICAgICB0ZXh0RWRpdG9yLnRleHRhcmVhLnN0eWxlLmZvbnRTaXplID0gdGV4dEVkaXRvci5zZXR0aW5ncy5mb250U2l6ZSArICdweCc7DQogICAgICAgIHRleHRFZGl0b3IudGV4dGFyZWEuc3R5bGUudGFiU2l6ZSA9IHRleHRFZGl0b3Iuc2V0dGluZ3MudGFiU2l6ZTsNCiAgICAgICAgDQogICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgc2V0dGluZ3M6JywgZXJyb3IpOw0KICAgICAgICAvLyBVc2UgZGVmYXVsdHMNCiAgICAgICAgdGV4dEVkaXRvci5zZXR0aW5ncyA9IHsNCiAgICAgICAgICAgIGF1dG9TYXZlSW50ZXJ2YWw6IDMwLA0KICAgICAgICAgICAgZm9udFNpemU6IDE0LA0KICAgICAgICAgICAgdGFiU2l6ZTogNCwNCiAgICAgICAgICAgIHN5bnRheEhpZ2hsaWdodGluZzogdHJ1ZQ0KICAgICAgICB9Ow0KICAgIH0NCn0NCg0KDQoNCg0KLy8gQ3JlYXRlIG5ldyBmaWxlDQpmdW5jdGlvbiBjcmVhdGVOZXdGaWxlKCkgew0KICAgIGlmICh0ZXh0RWRpdG9yLmlzTW9kaWZpZWQpIHsNCiAgICAgICAgaWYgKGNvbmZpcm0oJ1lvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcy4gQ3JlYXRlIG5ldyBmaWxlIGFueXdheT8nKSkgew0KICAgICAgICAgICAgY2xlYXJFZGl0b3IoKTsNCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgIGNsZWFyRWRpdG9yKCk7DQogICAgfQ0KfQ0KDQovLyBMb2FkIGZpbGUgZnJvbSBWRlMNCmFzeW5jIGZ1bmN0aW9uIGxvYWRGaWxlKCkgew0KICAgIHRyeSB7DQogICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYXdhaXQgc3lwbmV4QVBJLnNob3dGaWxlRXhwbG9yZXIoew0KICAgICAgICAgICAgbW9kZTogJ29wZW4nLA0KICAgICAgICAgICAgdGl0bGU6ICdPcGVuIFRleHQgRmlsZScsDQogICAgICAgICAgICBpbml0aWFsUGF0aDogJy8nLA0KICAgICAgICAgICAgb25TZWxlY3Q6IChzZWxlY3RlZFBhdGgpID0+IHsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gew0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICBpZiAoIWZpbGVQYXRoKSB7DQogICAgICAgICAgICByZXR1cm47IC8vIFVzZXIgY2FuY2VsbGVkDQogICAgICAgIH0NCg0KICAgICAgICAvLyBVc2UgdGhlIGhlbHBlciBmdW5jdGlvbiB0byBsb2FkIHRoZSBmaWxlDQogICAgICAgIGF3YWl0IGxvYWRGaWxlQnlQYXRoKGZpbGVQYXRoKTsNCg0KICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGZpbGU6JywgZXJyb3IpOw0KICAgICAgICBzeXBuZXhBUEkuc2hvd05vdGlmaWNhdGlvbihgRmFpbGVkIHRvIGxvYWQgZmlsZTogJHtlcnJvci5tZXNzYWdlfWAsICdlcnJvcicpOw0KICAgIH0NCn0NCg0KLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGxvYWQgYSBmaWxlIGJ5IHBhdGggKHVzZWQgYnkgYm90aCBpbnRlcmFjdGl2ZSBsb2FkIGFuZCBpbnRlbnQgc3lzdGVtKQ0KYXN5bmMgZnVuY3Rpb24gbG9hZEZpbGVCeVBhdGgoZmlsZVBhdGgpIHsNCiAgICB0cnkgew0KICAgICAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0cyBhbmQgbG9hZCBpdA0KICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgc3lwbmV4QVBJLnJlYWRWaXJ0dWFsRmlsZVRleHQoZmlsZVBhdGgpOw0KDQogICAgICAgIC8vIExvYWQgY29udGVudCBpbnRvIGVkaXRvcg0KICAgICAgICB0ZXh0RWRpdG9yLnRleHRhcmVhLnZhbHVlID0gY29udGVudDsNCiAgICAgICAgdGV4dEVkaXRvci5maWxlUGF0aCA9IGZpbGVQYXRoOw0KICAgICAgICB0ZXh0RWRpdG9yLm9yaWdpbmFsQ29udGVudCA9IGNvbnRlbnQ7DQoNCiAgICAgICAgLy8gVXBkYXRlIFVJDQogICAgICAgIHVwZGF0ZUZpbGVuYW1lRGlzcGxheSgpOw0KICAgICAgICB1cGRhdGVMaW5lTnVtYmVycygpOw0KICAgICAgICB1cGRhdGVTdGF0dXMoKTsNCiAgICAgICAgbWFya0FzU2F2ZWQoKTsNCg0KICAgICAgICAvLyBFbmFibGUgc3ludGF4IGhpZ2hsaWdodGluZyBmb3IgbG9hZGVkIGZpbGUNCiAgICAgICAgYXdhaXQgZW5hYmxlU3ludGF4SGlnaGxpZ2h0aW5nKCk7DQoNCiAgICAgICAgLy8gRm9yY2UgdXBkYXRlIGhpZ2hsaWdodGVkIGNvbnRlbnQgaWYgaGlnaGxpZ2h0aW5nIGlzIGVuYWJsZWQNCiAgICAgICAgaWYgKHRleHRFZGl0b3Iuc3ludGF4SGlnaGxpZ2h0aW5nRW5hYmxlZCAmJiB0ZXh0RWRpdG9yLmhpZ2hsaWdodGVkRWRpdG9yKSB7DQogICAgICAgICAgICB1cGRhdGVIaWdobGlnaHRlZENvbnRlbnQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHN5cG5leEFQSS5zaG93Tm90aWZpY2F0aW9uKGBGaWxlIGxvYWRlZDogJHtmaWxlUGF0aH1gLCAnc3VjY2VzcycpOw0KDQogICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgZmlsZSBieSBwYXRoOicsIGVycm9yKTsNCiAgICAgICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oYEZhaWxlZCB0byBsb2FkIGZpbGU6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTsNCiAgICAgICAgdGhyb3cgZXJyb3I7DQogICAgfQ0KfQ0KDQoNCi8vIFNhdmUgZmlsZSB0byBWRlMNCmFzeW5jIGZ1bmN0aW9uIHNhdmVGaWxlKCkgew0KICAgIGNvbnN0IGNvbnRlbnQgPSB0ZXh0RWRpdG9yLnRleHRhcmVhLnZhbHVlOw0KDQogICAgdHJ5IHsNCiAgICAgICAgbGV0IGZpbGVQYXRoID0gdGV4dEVkaXRvci5maWxlUGF0aDsNCg0KICAgICAgICAvLyBJZiBpdCdzIGEgbmV3IGZpbGUgKHVudGl0bGVkKSBvciB3ZSB3YW50IHRvIHNhdmUgYXMsIHNob3cgZmlsZSBleHBsb3Jlcg0KICAgICAgICBpZiAodGV4dEVkaXRvci5maWxlUGF0aCA9PT0gJy91bnRpdGxlZC50eHQnKSB7DQogICAgICAgICAgICBmaWxlUGF0aCA9IGF3YWl0IHN5cG5leEFQSS5zaG93RmlsZUV4cGxvcmVyKHsNCiAgICAgICAgICAgICAgICBtb2RlOiAnc2F2ZScsDQogICAgICAgICAgICAgICAgdGl0bGU6ICdTYXZlIFRleHQgRmlsZScsDQogICAgICAgICAgICAgICAgaW5pdGlhbFBhdGg6ICcvJywNCiAgICAgICAgICAgICAgICBmaWxlTmFtZTogJ3VudGl0bGVkLnR4dCcsDQogICAgICAgICAgICAgICAgb25TZWxlY3Q6IChzZWxlY3RlZFBhdGgpID0+IHsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGlmICghZmlsZVBhdGgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFVzZXIgY2FuY2VsbGVkDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBhd2FpdCBzeXBuZXhBUEkud3JpdGVWaXJ0dWFsRmlsZShmaWxlUGF0aCwgY29udGVudCk7DQoNCiAgICAgICAgdGV4dEVkaXRvci5maWxlUGF0aCA9IGZpbGVQYXRoOw0KICAgICAgICB1cGRhdGVGaWxlbmFtZURpc3BsYXkoKTsNCiAgICAgICAgbWFya0FzU2F2ZWQoKTsNCg0KICAgICAgICAvLyBFbmFibGUgc3ludGF4IGhpZ2hsaWdodGluZyBmb3Igc2F2ZWQgZmlsZQ0KICAgICAgICBhd2FpdCBlbmFibGVTeW50YXhIaWdobGlnaHRpbmcoKTsNCg0KICAgICAgICAvLyBGb3JjZSB1cGRhdGUgaGlnaGxpZ2h0ZWQgY29udGVudCBpZiBoaWdobGlnaHRpbmcgaXMgZW5hYmxlZA0KICAgICAgICBpZiAodGV4dEVkaXRvci5zeW50YXhIaWdobGlnaHRpbmdFbmFibGVkICYmIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IpIHsNCiAgICAgICAgICAgIHVwZGF0ZUhpZ2hsaWdodGVkQ29udGVudCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oYEZpbGUgc2F2ZWQ6ICR7ZmlsZVBhdGh9YCwgJ3N1Y2Nlc3MnKTsNCg0KICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGZpbGU6JywgZXJyb3IpOw0KICAgICAgICBzeXBuZXhBUEkuc2hvd05vdGlmaWNhdGlvbihgRmFpbGVkIHRvIHNhdmUgZmlsZTogJHtlcnJvci5tZXNzYWdlfWAsICdlcnJvcicpOw0KICAgIH0NCn0NCg0KLy8gU2F2ZSBmaWxlIGFzIChhbHdheXMgc2hvdyBmaWxlIGV4cGxvcmVyKQ0KYXN5bmMgZnVuY3Rpb24gc2F2ZUFzRmlsZSgpIHsNCiAgICBjb25zdCBjb250ZW50ID0gdGV4dEVkaXRvci50ZXh0YXJlYS52YWx1ZTsNCg0KICAgIHRyeSB7DQogICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYXdhaXQgc3lwbmV4QVBJLnNob3dGaWxlRXhwbG9yZXIoew0KICAgICAgICAgICAgbW9kZTogJ3NhdmUnLA0KICAgICAgICAgICAgdGl0bGU6ICdTYXZlIFRleHQgRmlsZSBBcycsDQogICAgICAgICAgICBpbml0aWFsUGF0aDogJy8nLA0KICAgICAgICAgICAgZmlsZU5hbWU6IHRleHRFZGl0b3IuZmlsZVBhdGggPT09ICcvdW50aXRsZWQudHh0JyA/ICd1bnRpdGxlZC50eHQnIDogdGV4dEVkaXRvci5maWxlUGF0aC5zcGxpdCgnLycpLnBvcCgpLA0KICAgICAgICAgICAgb25TZWxlY3Q6IChzZWxlY3RlZFBhdGgpID0+IHsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gew0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICBpZiAoIWZpbGVQYXRoKSB7DQogICAgICAgICAgICByZXR1cm47IC8vIFVzZXIgY2FuY2VsbGVkDQogICAgICAgIH0NCg0KICAgICAgICBhd2FpdCBzeXBuZXhBUEkud3JpdGVWaXJ0dWFsRmlsZShmaWxlUGF0aCwgY29udGVudCk7DQoNCiAgICAgICAgdGV4dEVkaXRvci5maWxlUGF0aCA9IGZpbGVQYXRoOw0KICAgICAgICB1cGRhdGVGaWxlbmFtZURpc3BsYXkoKTsNCiAgICAgICAgbWFya0FzU2F2ZWQoKTsNCg0KICAgICAgICAvLyBFbmFibGUgc3ludGF4IGhpZ2hsaWdodGluZyBmb3Igc2F2ZWQgZmlsZQ0KICAgICAgICBhd2FpdCBlbmFibGVTeW50YXhIaWdobGlnaHRpbmcoKTsNCg0KICAgICAgICAvLyBGb3JjZSB1cGRhdGUgaGlnaGxpZ2h0ZWQgY29udGVudCBpZiBoaWdobGlnaHRpbmcgaXMgZW5hYmxlZA0KICAgICAgICBpZiAodGV4dEVkaXRvci5zeW50YXhIaWdobGlnaHRpbmdFbmFibGVkICYmIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IpIHsNCiAgICAgICAgICAgIHVwZGF0ZUhpZ2hsaWdodGVkQ29udGVudCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oYEZpbGUgc2F2ZWQgYXM6ICR7ZmlsZVBhdGh9YCwgJ3N1Y2Nlc3MnKTsNCg0KICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGZpbGUgYXM6JywgZXJyb3IpOw0KICAgICAgICBzeXBuZXhBUEkuc2hvd05vdGlmaWNhdGlvbihgRmFpbGVkIHRvIHNhdmUgZmlsZSBhczogJHtlcnJvci5tZXNzYWdlfWAsICdlcnJvcicpOw0KICAgIH0NCn0NCg0KDQovLyBVcGRhdGUgbGluZSBudW1iZXJzDQpmdW5jdGlvbiB1cGRhdGVMaW5lTnVtYmVycygpIHsNCiAgICBpZiAoIXRleHRFZGl0b3IubGluZU51bWJlcnMgfHwgIXRleHRFZGl0b3IubGluZU51bWJlcnNFbmFibGVkKSByZXR1cm47DQogICAgDQogICAgY29uc3QgbGluZXMgPSB0ZXh0RWRpdG9yLnRleHRhcmVhLnZhbHVlLnNwbGl0KCdcbicpOw0KICAgIGNvbnN0IGxpbmVDb3VudCA9IGxpbmVzLmxlbmd0aDsNCiAgICANCiAgICAvLyBHZW5lcmF0ZSBsaW5lIG51bWJlcnMgSFRNTA0KICAgIGxldCBsaW5lTnVtYmVyc0hUTUwgPSAnJzsNCiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBsaW5lQ291bnQ7IGkrKykgew0KICAgICAgICBsaW5lTnVtYmVyc0hUTUwgKz0gYDxzcGFuIGNsYXNzPSJsaW5lLW51bWJlciI+JHtpfTwvc3Bhbj5cbmA7DQogICAgfQ0KICAgIA0KICAgIHRleHRFZGl0b3IubGluZU51bWJlcnMuaW5uZXJIVE1MID0gbGluZU51bWJlcnNIVE1MOw0KfQ0KDQovLyBTeW5jIHNjcm9sbCBiZXR3ZWVuIHRleHRhcmVhIGFuZCBsaW5lIG51bWJlcnMNCmZ1bmN0aW9uIHN5bmNTY3JvbGwoKSB7DQogICAgaWYgKHRleHRFZGl0b3IubGluZU51bWJlcnMgJiYgdGV4dEVkaXRvci5saW5lTnVtYmVyc0VuYWJsZWQpIHsNCiAgICAgICAgdGV4dEVkaXRvci5saW5lTnVtYmVycy5zY3JvbGxUb3AgPSB0ZXh0RWRpdG9yLnRleHRhcmVhLnNjcm9sbFRvcDsNCiAgICB9DQogICAgDQogICAgLy8gQWxzbyBzeW5jIHRoZSBiYWNrZHJvcCBpZiBpdCBleGlzdHMNCiAgICBzeW5jQmFja2Ryb3BTY3JvbGwoKTsNCn0NCg0KDQovLyBIYW5kbGUgdGV4dCBjaGFuZ2VzDQpmdW5jdGlvbiBoYW5kbGVUZXh0Q2hhbmdlKCkgew0KICAgIHVwZGF0ZUxpbmVOdW1iZXJzKCk7DQogICAgdXBkYXRlU3RhdHVzKCk7DQogICAgbWFya0FzTW9kaWZpZWQoKTsNCn0NCg0KLy8gRm9jdXMgYXBwcm9wcmlhdGUgZWRpdG9yDQpmdW5jdGlvbiBmb2N1c0VkaXRvcigpIHsNCiAgICBpZiAodGV4dEVkaXRvci50ZXh0YXJlYSkgew0KICAgICAgICB0ZXh0RWRpdG9yLnRleHRhcmVhLmZvY3VzKCk7DQogICAgfQ0KfQ0KDQoNCi8vIFVwZGF0ZSBmaWxlbmFtZSBkaXNwbGF5DQpmdW5jdGlvbiB1cGRhdGVGaWxlbmFtZURpc3BsYXkoKSB7DQogICAgaWYgKGN1cnJlbnRGaWxlbmFtZUVsKSB7DQogICAgICAgIGNvbnN0IGZpbGVuYW1lID0gdGV4dEVkaXRvci5maWxlUGF0aCA/IHRleHRFZGl0b3IuZmlsZVBhdGguc3BsaXQoJy8nKS5wb3AoKSA6ICd1bnRpdGxlZC50eHQnOw0KICAgICAgICBjdXJyZW50RmlsZW5hbWVFbC50ZXh0Q29udGVudCA9IGZpbGVuYW1lOw0KICAgIH0NCn0NCg0KLy8gSW5pdGlhbGl6ZSBlZGl0b3Igc3RhdGUNCmZ1bmN0aW9uIGluaXRpYWxpemVFZGl0b3IoKSB7DQogICAgLy8gU2V0IGluaXRpYWwgZmlsZSBwYXRoDQogICAgdGV4dEVkaXRvci5maWxlUGF0aCA9ICcvdW50aXRsZWQudHh0JzsNCiAgICB1cGRhdGVGaWxlbmFtZURpc3BsYXkoKTsNCiAgICANCiAgICAvLyBVcGRhdGUgbGluZSBudW1iZXJzDQogICAgdXBkYXRlTGluZU51bWJlcnMoKTsNCiAgICANCiAgICAvLyBVcGRhdGUgc3RhdHVzDQogICAgdXBkYXRlU3RhdHVzKCk7DQogICAgDQogICAgLy8gRW5hYmxlIHN5bnRheCBoaWdobGlnaHRpbmcgaWYgbmVlZGVkDQogICAgZW5hYmxlU3ludGF4SGlnaGxpZ2h0aW5nKCk7DQogICAgDQogICAgLy8gU3RhcnQgYXV0by1zYXZlIGlmIGVuYWJsZWQNCiAgICBpZiAodGV4dEVkaXRvci5zZXR0aW5ncy5hdXRvU2F2ZUludGVydmFsID4gMCkgew0KICAgICAgICBzdGFydEF1dG9TYXZlKCk7DQogICAgfQ0KfQ0KDQoNCg0KLy8gVXBkYXRlIHN0YXR1cyBiYXINCmZ1bmN0aW9uIHVwZGF0ZVN0YXR1cygpIHsNCiAgICAvLyBTdGF0dXMgYmFyIG5vdyBvbmx5IHNob3dzIG1vZGlmaWVkIHN0YXR1cywgd2hpY2ggaXMgaGFuZGxlZCBieSBtYXJrQXNNb2RpZmllZC9tYXJrQXNTYXZlZA0KICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMga2VwdCBmb3IgcG90ZW50aWFsIGZ1dHVyZSB1c2UNCn0NCg0KLy8gTWFyayBmaWxlIGFzIG1vZGlmaWVkDQpmdW5jdGlvbiBtYXJrQXNNb2RpZmllZCgpIHsNCiAgICBpZiAoIXRleHRFZGl0b3IuaXNNb2RpZmllZCkgew0KICAgICAgICB0ZXh0RWRpdG9yLmlzTW9kaWZpZWQgPSB0cnVlOw0KICAgICAgICBpZiAobW9kaWZpZWRTdGF0dXNFbCkgew0KICAgICAgICAgICAgbW9kaWZpZWRTdGF0dXNFbC50ZXh0Q29udGVudCA9ICdZZXMnOw0KICAgICAgICAgICAgbW9kaWZpZWRTdGF0dXNFbC5jbGFzc0xpc3QuYWRkKCdtb2RpZmllZCcpOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQovLyBNYXJrIGZpbGUgYXMgc2F2ZWQNCmZ1bmN0aW9uIG1hcmtBc1NhdmVkKCkgew0KICAgIHRleHRFZGl0b3IuaXNNb2RpZmllZCA9IGZhbHNlOw0KICAgIHRleHRFZGl0b3Iub3JpZ2luYWxDb250ZW50ID0gdGV4dEVkaXRvci50ZXh0YXJlYS52YWx1ZTsNCiAgICBpZiAobW9kaWZpZWRTdGF0dXNFbCkgew0KICAgICAgICBtb2RpZmllZFN0YXR1c0VsLnRleHRDb250ZW50ID0gJ05vJzsNCiAgICAgICAgbW9kaWZpZWRTdGF0dXNFbC5jbGFzc0xpc3QucmVtb3ZlKCdtb2RpZmllZCcpOw0KICAgIH0NCn0NCg0KDQovLyBDbGVhciBlZGl0b3INCmZ1bmN0aW9uIGNsZWFyRWRpdG9yKCkgew0KICAgIHRleHRFZGl0b3IudGV4dGFyZWEudmFsdWUgPSAnJzsNCiAgICB0ZXh0RWRpdG9yLmZpbGVQYXRoID0gJy91bnRpdGxlZC50eHQnOw0KICAgIHVwZGF0ZUZpbGVuYW1lRGlzcGxheSgpOw0KICAgIHRleHRFZGl0b3Iub3JpZ2luYWxDb250ZW50ID0gJyc7DQogICAgbWFya0FzU2F2ZWQoKTsNCiAgICB1cGRhdGVMaW5lTnVtYmVycygpOw0KICAgIHVwZGF0ZVN0YXR1cygpOw0KICAgIA0KICAgIC8vIEVuYWJsZSBzeW50YXggaGlnaGxpZ2h0aW5nIGZvciBuZXcgZmlsZQ0KICAgIGVuYWJsZVN5bnRheEhpZ2hsaWdodGluZygpOw0KICAgIA0KICAgIC8vIEZvcmNlIHVwZGF0ZSBoaWdobGlnaHRlZCBjb250ZW50IGlmIGhpZ2hsaWdodGluZyBpcyBlbmFibGVkDQogICAgaWYgKHRleHRFZGl0b3Iuc3ludGF4SGlnaGxpZ2h0aW5nRW5hYmxlZCAmJiB0ZXh0RWRpdG9yLmhpZ2hsaWdodGVkRWRpdG9yKSB7DQogICAgICAgIHVwZGF0ZUhpZ2hsaWdodGVkQ29udGVudCgpOw0KICAgIH0NCiAgICANCiAgICAvLyBGb2N1cyB0aGUgdGV4dGFyZWEgKG5vdCB0aGUgYmFja2Ryb3ApDQogICAgZm9jdXNFZGl0b3IoKTsNCn0NCg0KLy8gU3RhcnQgYXV0by1zYXZlDQpmdW5jdGlvbiBzdGFydEF1dG9TYXZlKCkgew0KICAgIGlmICh0ZXh0RWRpdG9yLmF1dG9TYXZlSW50ZXJ2YWwpIHsNCiAgICAgICAgY2xlYXJJbnRlcnZhbCh0ZXh0RWRpdG9yLmF1dG9TYXZlSW50ZXJ2YWwpOw0KICAgIH0NCiAgICANCiAgICB0ZXh0RWRpdG9yLmF1dG9TYXZlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7DQogICAgICAgIGlmICh0ZXh0RWRpdG9yLmlzTW9kaWZpZWQgJiYgdGV4dEVkaXRvci5maWxlUGF0aCAmJiB0ZXh0RWRpdG9yLmZpbGVQYXRoICE9PSAnL3VudGl0bGVkLnR4dCcpIHsNCiAgICAgICAgICAgIHNhdmVGaWxlKCk7DQogICAgICAgIH0NCiAgICB9LCB0ZXh0RWRpdG9yLnNldHRpbmdzLmF1dG9TYXZlSW50ZXJ2YWwgKiAxMDAwKTsNCiAgICANCn0NCg0KLy8gU3RvcCBhdXRvLXNhdmUNCmZ1bmN0aW9uIHN0b3BBdXRvU2F2ZSgpIHsNCiAgICBpZiAodGV4dEVkaXRvci5hdXRvU2F2ZUludGVydmFsKSB7DQogICAgICAgIGNsZWFySW50ZXJ2YWwodGV4dEVkaXRvci5hdXRvU2F2ZUludGVydmFsKTsNCiAgICAgICAgdGV4dEVkaXRvci5hdXRvU2F2ZUludGVydmFsID0gbnVsbDsNCiAgICB9DQp9DQoNCg0KLy8gTG9hZCBQcmlzbS5qcyBmb3Igc3ludGF4IGhpZ2hsaWdodGluZw0KYXN5bmMgZnVuY3Rpb24gbG9hZFByaXNtSlMoKSB7DQogICAgaWYgKHRleHRFZGl0b3IucHJpc21Mb2FkZWQpIHJldHVybjsNCiAgICANCiAgICB0cnkgew0KICAgICAgICANCiAgICAgICAgLy8gTG9hZCBQcmlzbS5qcyBsaWJyYXJ5DQogICAgICAgIGF3YWl0IHN5cG5leEFQSS5sb2FkTGlicmFyeSgnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcHJpc20vMS4yOS4wL3ByaXNtLm1pbi5qcycsIHsNCiAgICAgICAgICAgIGxvY2FsTmFtZTogJ1ByaXNtJw0KICAgICAgICB9KTsNCiAgICAgICAgDQogICAgICAgIC8vIExvYWQgbGFuZ3VhZ2UgY29tcG9uZW50cw0KICAgICAgICBhd2FpdCBzeXBuZXhBUEkubG9hZExpYnJhcnkoJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3ByaXNtLzEuMjkuMC9jb21wb25lbnRzL3ByaXNtLXB5dGhvbi5taW4uanMnKTsNCiAgICAgICAgYXdhaXQgc3lwbmV4QVBJLmxvYWRMaWJyYXJ5KCdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9wcmlzbS8xLjI5LjAvY29tcG9uZW50cy9wcmlzbS1qYXZhc2NyaXB0Lm1pbi5qcycpOw0KICAgICAgICBhd2FpdCBzeXBuZXhBUEkubG9hZExpYnJhcnkoJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3ByaXNtLzEuMjkuMC9jb21wb25lbnRzL3ByaXNtLWpzb24ubWluLmpzJyk7DQogICAgICAgIGF3YWl0IHN5cG5leEFQSS5sb2FkTGlicmFyeSgnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcHJpc20vMS4yOS4wL2NvbXBvbmVudHMvcHJpc20tbWFya3VwLm1pbi5qcycpOw0KICAgICAgICBhd2FpdCBzeXBuZXhBUEkubG9hZExpYnJhcnkoJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3ByaXNtLzEuMjkuMC9jb21wb25lbnRzL3ByaXNtLWNzcy5taW4uanMnKTsNCiAgICAgICAgDQogICAgICAgIC8vIExvYWQgUHJpc20gQ1NTDQogICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7DQogICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnOw0KICAgICAgICBsaW5rLmhyZWYgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcHJpc20vMS4yOS4wL3RoZW1lcy9wcmlzbS10b21vcnJvdy5taW4uY3NzJzsNCiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTsNCiAgICAgICAgDQogICAgICAgIC8vIEFkZCBjdXN0b20gQ1NTIHRvIGZpeCBzdHlsaW5nIGlzc3Vlcw0KICAgICAgICBjb25zdCBjdXN0b21TdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7DQogICAgICAgIGN1c3RvbVN0eWxlLnRleHRDb250ZW50ID0gYA0KICAgICAgICAgICAgLmhpZ2hsaWdodGVkLWJhY2tkcm9wICogew0KICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbi1saW5lOiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uLXN0eWxlOiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IG5vbmUgIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICB0ZXh0LXVuZGVybGluZS1vZmZzZXQ6IDAgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIC5oaWdobGlnaHRlZC1iYWNrZHJvcCAudG9rZW4uc3RyaW5nIHsNCiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgYDsNCiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChjdXN0b21TdHlsZSk7DQogICAgICAgIA0KICAgICAgICB0ZXh0RWRpdG9yLnByaXNtTG9hZGVkID0gdHJ1ZTsNCiAgICAgICAgDQogICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgUHJpc20uanM6JywgZXJyb3IpOw0KICAgICAgICBzeXBuZXhBUEkuc2hvd05vdGlmaWNhdGlvbignRmFpbGVkIHRvIGxvYWQgc3ludGF4IGhpZ2hsaWdodGluZycsICdlcnJvcicpOw0KICAgIH0NCn0NCg0KLy8gQ3JlYXRlIGhpZ2hsaWdodGVkIGVkaXRvcg0KZnVuY3Rpb24gY3JlYXRlSGlnaGxpZ2h0ZWRFZGl0b3IoKSB7DQogICAgaWYgKCF0ZXh0RWRpdG9yLnByaXNtTG9hZGVkKSByZXR1cm47DQogICAgDQogICAgLy8gQ2xlYW4gdXAgYW55IGV4aXN0aW5nIGhpZ2hsaWdodGVkIHNldHVwDQogICAgY2xlYW51cEhpZ2hsaWdodGVkRWRpdG9yKCk7DQogICAgDQogICAgY29uc3QgZWRpdG9yV3JhcHBlciA9IHRleHRFZGl0b3IudGV4dGFyZWEucGFyZW50RWxlbWVudDsNCiAgICBjb25zdCB0ZXh0YXJlYSA9IHRleHRFZGl0b3IudGV4dGFyZWE7DQogICAgDQogICAgLy8gU3RvcmUgb3JpZ2luYWwgdGV4dGFyZWEgc3R5bGVzDQogICAgY29uc3Qgb3JpZ2luYWxTdHlsZXMgPSB7DQogICAgICAgIHBvc2l0aW9uOiB0ZXh0YXJlYS5zdHlsZS5wb3NpdGlvbiwNCiAgICAgICAgYmFja2dyb3VuZDogdGV4dGFyZWEuc3R5bGUuYmFja2dyb3VuZCwNCiAgICAgICAgY29sb3I6IHRleHRhcmVhLnN0eWxlLmNvbG9yLA0KICAgICAgICB6SW5kZXg6IHRleHRhcmVhLnN0eWxlLnpJbmRleCwNCiAgICAgICAgY2FyZXRDb2xvcjogdGV4dGFyZWEuc3R5bGUuY2FyZXRDb2xvciwNCiAgICAgICAgc3BlbGxjaGVjazogdGV4dGFyZWEuZ2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJyksDQogICAgICAgIGF1dG9jb21wbGV0ZTogdGV4dGFyZWEuZ2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnKSwNCiAgICAgICAgYXV0b2NvcnJlY3Q6IHRleHRhcmVhLmdldEF0dHJpYnV0ZSgnYXV0b2NvcnJlY3QnKSwNCiAgICAgICAgYXV0b2NhcGl0YWxpemU6IHRleHRhcmVhLmdldEF0dHJpYnV0ZSgnYXV0b2NhcGl0YWxpemUnKQ0KICAgIH07DQogICAgDQogICAgLy8gQ3JlYXRlIGEgY29udGFpbmVyIGZvciB0aGUgb3ZlcmxheSBhcHByb2FjaA0KICAgIGNvbnN0IGhpZ2hsaWdodENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOw0KICAgIGhpZ2hsaWdodENvbnRhaW5lci5jbGFzc05hbWUgPSAnaGlnaGxpZ2h0LWNvbnRhaW5lcic7DQogICAgaGlnaGxpZ2h0Q29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJzsNCiAgICBoaWdobGlnaHRDb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7DQogICAgaGlnaGxpZ2h0Q29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxMDAlJzsNCiAgICANCiAgICAvLyBDcmVhdGUgaGlnaGxpZ2h0ZWQgYmFja2Ryb3ANCiAgICBjb25zdCBoaWdobGlnaHRlZEJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7DQogICAgaGlnaGxpZ2h0ZWRCYWNrZHJvcC5pZCA9ICdoaWdobGlnaHRlZC1iYWNrZHJvcCc7DQogICAgaGlnaGxpZ2h0ZWRCYWNrZHJvcC5jbGFzc05hbWUgPSAnaGlnaGxpZ2h0ZWQtYmFja2Ryb3AnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUudG9wID0gJzAnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUubGVmdCA9ICcwJzsNCiAgICBoaWdobGlnaHRlZEJhY2tkcm9wLnN0eWxlLndpZHRoID0gJzEwMCUnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUuaGVpZ2h0ID0gJzEwMCUnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJzsNCiAgICBoaWdobGlnaHRlZEJhY2tkcm9wLnN0eWxlLmZvbnRGYW1pbHkgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0ZXh0YXJlYSkuZm9udEZhbWlseTsNCiAgICBoaWdobGlnaHRlZEJhY2tkcm9wLnN0eWxlLmZvbnRTaXplID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGV4dGFyZWEpLmZvbnRTaXplOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUubGluZUhlaWdodCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRleHRhcmVhKS5saW5lSGVpZ2h0Ow0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUucGFkZGluZyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRleHRhcmVhKS5wYWRkaW5nOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUubWFyZ2luID0gJzAnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUuYm9yZGVyID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGV4dGFyZWEpLmJvcmRlcjsNCiAgICBoaWdobGlnaHRlZEJhY2tkcm9wLnN0eWxlLndoaXRlU3BhY2UgPSAncHJlLXdyYXAnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUud29yZFdyYXAgPSAnYnJlYWstd29yZCc7DQogICAgaGlnaGxpZ2h0ZWRCYWNrZHJvcC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUuekluZGV4ID0gJzEnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUucmVzaXplID0gJ25vbmUnOw0KICAgIGhpZ2hsaWdodGVkQmFja2Ryb3Auc3R5bGUuY29sb3IgPSAnI2ZmZmZmZic7IC8vIERlZmF1bHQgdGV4dCBjb2xvciBmb3IgaGlnaGxpZ2h0aW5nDQogICAgDQogICAgLy8gTWFrZSBzdXJlIHRleHRhcmVhIGlzIG9uIHRvcCBhbmQgaGFzIHRyYW5zcGFyZW50IGJhY2tncm91bmQgYW5kIHRleHQNCiAgICB0ZXh0YXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7DQogICAgdGV4dGFyZWEuc3R5bGUuekluZGV4ID0gJzInOw0KICAgIHRleHRhcmVhLnN0eWxlLmJhY2tncm91bmQgPSAndHJhbnNwYXJlbnQnOw0KICAgIHRleHRhcmVhLnN0eWxlLmNvbG9yID0gJ3RyYW5zcGFyZW50JzsNCiAgICB0ZXh0YXJlYS5zdHlsZS5jYXJldENvbG9yID0gJyNmZmZmZmYnOw0KICAgIA0KICAgIC8vIERpc2FibGUgYnJvd3NlciBzcGVsbCBjaGVja2luZyBmb3IgY29kZQ0KICAgIHRleHRhcmVhLnNldEF0dHJpYnV0ZSgnc3BlbGxjaGVjaycsICdmYWxzZScpOw0KICAgIHRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpOw0KICAgIHRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXV0b2NvcnJlY3QnLCAnb2ZmJyk7DQogICAgdGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhdXRvY2FwaXRhbGl6ZScsICdvZmYnKTsNCiAgICANCiAgICAvLyBXcmFwIHRleHRhcmVhIGluIGNvbnRhaW5lcg0KICAgIGVkaXRvcldyYXBwZXIuaW5zZXJ0QmVmb3JlKGhpZ2hsaWdodENvbnRhaW5lciwgdGV4dGFyZWEpOw0KICAgIGhpZ2hsaWdodENvbnRhaW5lci5hcHBlbmRDaGlsZChoaWdobGlnaHRlZEJhY2tkcm9wKTsNCiAgICBoaWdobGlnaHRDb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dGFyZWEpOw0KICAgIA0KICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IgPSBoaWdobGlnaHRlZEJhY2tkcm9wOw0KICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0Q29udGFpbmVyID0gaGlnaGxpZ2h0Q29udGFpbmVyOw0KICAgIHRleHRFZGl0b3Iub3JpZ2luYWxUZXh0YXJlYVN0eWxlcyA9IG9yaWdpbmFsU3R5bGVzOw0KICAgIHRleHRFZGl0b3Iuc3ludGF4SGlnaGxpZ2h0aW5nRW5hYmxlZCA9IHRydWU7DQogICAgDQogICAgLy8gU2V0IGluaXRpYWwgY29udGVudA0KICAgIHVwZGF0ZUhpZ2hsaWdodGVkQ29udGVudCgpOw0KICAgIA0KICAgIC8vIFNldCB1cCBzaW1wbGUgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSB0ZXh0YXJlYSAobm90IHRoZSBiYWNrZHJvcCkNCiAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGhhbmRsZVNpbXBsZUlucHV0KTsNCiAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzeW5jQmFja2Ryb3BTY3JvbGwpOw0KICAgIHRleHRhcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVIaWdobGlnaHRLZXlEb3duKTsNCiAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUhpZ2hsaWdodENsaWNrKTsNCiAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUhpZ2hsaWdodEZvY3VzKTsNCiAgICANCn0NCg0KDQovLyBVcGRhdGUgaGlnaGxpZ2h0ZWQgY29udGVudA0KZnVuY3Rpb24gdXBkYXRlSGlnaGxpZ2h0ZWRDb250ZW50KCkgew0KICAgIGlmICghdGV4dEVkaXRvci5oaWdobGlnaHRlZEVkaXRvciB8fCAhdGV4dEVkaXRvci5wcmlzbUxvYWRlZCkgcmV0dXJuOw0KICAgIA0KICAgIGNvbnN0IGNvbnRlbnQgPSB0ZXh0RWRpdG9yLnRleHRhcmVhLnZhbHVlOw0KICAgIGNvbnN0IGxhbmd1YWdlID0gZ2V0RmlsZUxhbmd1YWdlKHRleHRFZGl0b3IuZmlsZVBhdGgpOw0KICAgIA0KICAgIGlmICghbGFuZ3VhZ2UpIHsNCiAgICAgICAgLy8gTm8gbGFuZ3VhZ2UgZGV0ZWN0ZWQsIHVzZSBwbGFpbiB0ZXh0DQogICAgICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IudGV4dENvbnRlbnQgPSBjb250ZW50Ow0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIA0KICAgIC8vIEFwcGx5IHN5bnRheCBoaWdobGlnaHRpbmcgdG8gYmFja2Ryb3ANCiAgICBjb25zdCBoaWdobGlnaHRlZENvbnRlbnQgPSBQcmlzbS5oaWdobGlnaHQoY29udGVudCwgUHJpc20ubGFuZ3VhZ2VzW2xhbmd1YWdlXSwgbGFuZ3VhZ2UpOw0KICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IuaW5uZXJIVE1MID0gaGlnaGxpZ2h0ZWRDb250ZW50Ow0KICAgIA0KICAgIC8vIFN5bmMgc2Nyb2xsIHBvc2l0aW9uDQogICAgc3luY0JhY2tkcm9wU2Nyb2xsKCk7DQogICAgDQp9DQoNCi8vIEVuYWJsZSBzeW50YXggaGlnaGxpZ2h0aW5nIGZvciBzdXBwb3J0ZWQgZmlsZXMNCmFzeW5jIGZ1bmN0aW9uIGVuYWJsZVN5bnRheEhpZ2hsaWdodGluZygpIHsNCiAgICBpZiAoIXRleHRFZGl0b3Iuc2V0dGluZ3Muc3ludGF4SGlnaGxpZ2h0aW5nKSB7DQogICAgICAgIGNsZWFudXBIaWdobGlnaHRlZEVkaXRvcigpOw0KICAgICAgICB0ZXh0RWRpdG9yLnN5bnRheEhpZ2hsaWdodGluZ0VuYWJsZWQgPSBmYWxzZTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCiAgICANCiAgICBjb25zdCBsYW5ndWFnZSA9IGdldEZpbGVMYW5ndWFnZSh0ZXh0RWRpdG9yLmZpbGVQYXRoKTsNCiAgICANCiAgICBpZiAobGFuZ3VhZ2UpIHsNCiAgICAgICAgaWYgKCF0ZXh0RWRpdG9yLnByaXNtTG9hZGVkKSB7DQogICAgICAgICAgICBhd2FpdCBsb2FkUHJpc21KUygpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBpZiAoIXRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IpIHsNCiAgICAgICAgICAgIGNyZWF0ZUhpZ2hsaWdodGVkRWRpdG9yKCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHRleHRFZGl0b3Iuc3ludGF4SGlnaGxpZ2h0aW5nRW5hYmxlZCA9IHRydWU7DQogICAgfSBlbHNlIHsNCiAgICAgICAgLy8gRGlzYWJsZSBoaWdobGlnaHRpbmcgZm9yIHVuc3VwcG9ydGVkIGZpbGVzDQogICAgICAgIGNsZWFudXBIaWdobGlnaHRlZEVkaXRvcigpOw0KICAgICAgICB0ZXh0RWRpdG9yLnN5bnRheEhpZ2hsaWdodGluZ0VuYWJsZWQgPSBmYWxzZTsNCiAgICB9DQp9DQoNCi8vIEhhbmRsZSBzaW1wbGUgaW5wdXQgZm9yIGJhY2tkcm9wIGFwcHJvYWNoDQpmdW5jdGlvbiBoYW5kbGVTaW1wbGVJbnB1dCgpIHsNCiAgICAvLyBVcGRhdGUgbGluZSBudW1iZXJzIGFuZCBzdGF0dXMgaW1tZWRpYXRlbHkNCiAgICB1cGRhdGVMaW5lTnVtYmVycygpOw0KICAgIHVwZGF0ZVN0YXR1cygpOw0KICAgIG1hcmtBc01vZGlmaWVkKCk7DQogICAgDQogICAgLy8gSW1tZWRpYXRlIGhpZ2hsaWdodGluZyB1cGRhdGUgZm9yIHJlc3BvbnNpdmUgZmVlbA0KICAgIHVwZGF0ZUhpZ2hsaWdodGVkQ29udGVudCgpOw0KfQ0KDQovLyBIYW5kbGUga2V5IGV2ZW50cyB0aGF0IG1pZ2h0IGNoYW5nZSBjb250ZW50DQpmdW5jdGlvbiBoYW5kbGVIaWdobGlnaHRLZXlEb3duKGUpIHsNCiAgICAvLyBGb3Iga2V5cyB0aGF0IG1vZGlmeSBjb250ZW50LCB1cGRhdGUgaGlnaGxpZ2h0aW5nIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBldmVudA0KICAgIGlmIChlLmtleSA9PT0gJ1RhYicgfHwgZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXkgPT09ICdCYWNrc3BhY2UnIHx8IGUua2V5ID09PSAnRGVsZXRlJykgew0KICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsNCiAgICAgICAgICAgIHVwZGF0ZUhpZ2hsaWdodGVkQ29udGVudCgpOw0KICAgICAgICB9LCAwKTsgLy8gVXBkYXRlIG9uIG5leHQgdGljayBhZnRlciB0aGUga2V5IGV2ZW50IGlzIHByb2Nlc3NlZA0KICAgIH0NCn0NCg0KLy8gSGFuZGxlIGNsaWNrIGV2ZW50cyAoY3Vyc29yIHBvc2l0aW9uIGNoYW5nZXMpDQpmdW5jdGlvbiBoYW5kbGVIaWdobGlnaHRDbGljaygpIHsNCiAgICAvLyBTeW5jIHNjcm9sbCBwb3NpdGlvbiB3aGVuIHVzZXIgY2xpY2tzDQogICAgc3luY0JhY2tkcm9wU2Nyb2xsKCk7DQp9DQoNCi8vIEhhbmRsZSBmb2N1cyBldmVudHMNCmZ1bmN0aW9uIGhhbmRsZUhpZ2hsaWdodEZvY3VzKCkgew0KICAgIC8vIEVuc3VyZSBoaWdobGlnaHRpbmcgaXMgaW4gc3luYyB3aGVuIHRleHRhcmVhIGdldHMgZm9jdXMNCiAgICB1cGRhdGVIaWdobGlnaHRlZENvbnRlbnQoKTsNCiAgICBzeW5jQmFja2Ryb3BTY3JvbGwoKTsNCn0NCg0KLy8gU3luYyBiYWNrZHJvcCBzY3JvbGwgd2l0aCB0ZXh0YXJlYQ0KZnVuY3Rpb24gc3luY0JhY2tkcm9wU2Nyb2xsKCkgew0KICAgIGlmICh0ZXh0RWRpdG9yLmhpZ2hsaWdodGVkRWRpdG9yKSB7DQogICAgICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3Iuc2Nyb2xsVG9wID0gdGV4dEVkaXRvci50ZXh0YXJlYS5zY3JvbGxUb3A7DQogICAgICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3Iuc2Nyb2xsTGVmdCA9IHRleHRFZGl0b3IudGV4dGFyZWEuc2Nyb2xsTGVmdDsNCiAgICB9DQp9DQoNCi8vIENsZWFuIHVwIGhpZ2hsaWdodGVkIGVkaXRvcg0KZnVuY3Rpb24gY2xlYW51cEhpZ2hsaWdodGVkRWRpdG9yKCkgew0KICAgIGlmICh0ZXh0RWRpdG9yLmhpZ2hsaWdodENvbnRhaW5lcikgew0KICAgICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIHRleHRhcmVhIHN0eWxlcw0KICAgICAgICBpZiAodGV4dEVkaXRvci5vcmlnaW5hbFRleHRhcmVhU3R5bGVzKSB7DQogICAgICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IHRleHRFZGl0b3IudGV4dGFyZWE7DQogICAgICAgICAgICB0ZXh0YXJlYS5zdHlsZS5wb3NpdGlvbiA9IHRleHRFZGl0b3Iub3JpZ2luYWxUZXh0YXJlYVN0eWxlcy5wb3NpdGlvbjsNCiAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLmJhY2tncm91bmQgPSB0ZXh0RWRpdG9yLm9yaWdpbmFsVGV4dGFyZWFTdHlsZXMuYmFja2dyb3VuZDsNCiAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLmNvbG9yID0gdGV4dEVkaXRvci5vcmlnaW5hbFRleHRhcmVhU3R5bGVzLmNvbG9yOw0KICAgICAgICAgICAgdGV4dGFyZWEuc3R5bGUuekluZGV4ID0gdGV4dEVkaXRvci5vcmlnaW5hbFRleHRhcmVhU3R5bGVzLnpJbmRleDsNCiAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLmNhcmV0Q29sb3IgPSB0ZXh0RWRpdG9yLm9yaWdpbmFsVGV4dGFyZWFTdHlsZXMuY2FyZXRDb2xvcjsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb250YWluZXIgYW5kIHJlc3RvcmUgdGV4dGFyZWEgdG8gaXRzIG9yaWdpbmFsIHBhcmVudA0KICAgICAgICBjb25zdCBlZGl0b3JXcmFwcGVyID0gdGV4dEVkaXRvci5oaWdobGlnaHRDb250YWluZXIucGFyZW50RWxlbWVudDsNCiAgICAgICAgY29uc3QgdGV4dGFyZWEgPSB0ZXh0RWRpdG9yLnRleHRhcmVhOw0KICAgICAgICANCiAgICAgICAgLy8gTW92ZSB0ZXh0YXJlYSBiYWNrIHRvIGl0cyBvcmlnaW5hbCBsb2NhdGlvbg0KICAgICAgICBlZGl0b3JXcmFwcGVyLmluc2VydEJlZm9yZSh0ZXh0YXJlYSwgdGV4dEVkaXRvci5oaWdobGlnaHRDb250YWluZXIpOw0KICAgICAgICANCiAgICAgICAgLy8gUmVtb3ZlIHRoZSBoaWdobGlnaHQgY29udGFpbmVyDQogICAgICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0Q29udGFpbmVyLnJlbW92ZSgpOw0KICAgICAgICANCiAgICAgICAgLy8gQ2xlYXIgcmVmZXJlbmNlcw0KICAgICAgICB0ZXh0RWRpdG9yLmhpZ2hsaWdodENvbnRhaW5lciA9IG51bGw7DQogICAgICAgIHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IgPSBudWxsOw0KICAgICAgICB0ZXh0RWRpdG9yLm9yaWdpbmFsVGV4dGFyZWFTdHlsZXMgPSBudWxsOw0KICAgIH0NCn0NCg0KLy8gVG9nZ2xlIHN5bnRheCBoaWdobGlnaHRpbmcNCmFzeW5jIGZ1bmN0aW9uIHRvZ2dsZVN5bnRheEhpZ2hsaWdodGluZygpIHsNCiAgICB0ZXh0RWRpdG9yLnNldHRpbmdzLnN5bnRheEhpZ2hsaWdodGluZyA9ICF0ZXh0RWRpdG9yLnNldHRpbmdzLnN5bnRheEhpZ2hsaWdodGluZzsNCiAgICANCiAgICAvLyBTYXZlIHNldHRpbmcNCiAgICB0cnkgew0KICAgICAgICBhd2FpdCBzeXBuZXhBUEkuc2V0U2V0dGluZygnU1lOVEFYX0hJR0hMSUdIVElORycsIHRleHRFZGl0b3Iuc2V0dGluZ3Muc3ludGF4SGlnaGxpZ2h0aW5nKTsNCiAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSBzeW50YXggaGlnaGxpZ2h0aW5nIHNldHRpbmc6JywgZXJyb3IpOw0KICAgIH0NCiAgICANCiAgICAvLyBVcGRhdGUgVUkNCiAgICBpZiAoc3ludGF4SGlnaGxpZ2h0aW5nVG9nZ2xlKSB7DQogICAgICAgIHN5bnRheEhpZ2hsaWdodGluZ1RvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCB0ZXh0RWRpdG9yLnNldHRpbmdzLnN5bnRheEhpZ2hsaWdodGluZyk7DQogICAgfQ0KICAgIA0KICAgIC8vIEFwcGx5IG9yIGRpc2FibGUgaGlnaGxpZ2h0aW5nDQogICAgaWYgKHRleHRFZGl0b3Iuc2V0dGluZ3Muc3ludGF4SGlnaGxpZ2h0aW5nKSB7DQogICAgICAgIGF3YWl0IGVuYWJsZVN5bnRheEhpZ2hsaWdodGluZygpOw0KICAgIH0gZWxzZSB7DQogICAgICAgIC8vIERpc2FibGUgaGlnaGxpZ2h0aW5nDQogICAgICAgIGNsZWFudXBIaWdobGlnaHRlZEVkaXRvcigpOw0KICAgICAgICB0ZXh0RWRpdG9yLnN5bnRheEhpZ2hsaWdodGluZ0VuYWJsZWQgPSBmYWxzZTsNCiAgICB9DQogICAgDQogICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oDQogICAgICAgIGBTeW50YXggaGlnaGxpZ2h0aW5nICR7dGV4dEVkaXRvci5zZXR0aW5ncy5zeW50YXhIaWdobGlnaHRpbmcgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfWAsDQogICAgICAgICdpbmZvJw0KICAgICk7DQp9DQoNCg0KLy8gU2V0IHVwIGV2ZW50IGhhbmRsZXJzDQpmdW5jdGlvbiBzZXR1cEV2ZW50SGFuZGxlcnMoKSB7DQogICAgLy8gQnV0dG9uIGV2ZW50cw0KICAgIG5ld0ZpbGVCdG4/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY3JlYXRlTmV3RmlsZSk7DQogICAgbG9hZEZpbGVCdG4/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbG9hZEZpbGUpOw0KICAgIHNhdmVGaWxlQnRuPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNhdmVGaWxlKTsNCiAgICBzYXZlQXNGaWxlQnRuPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNhdmVBc0ZpbGUpOw0KICAgIHdvcmRXcmFwVG9nZ2xlPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVdvcmRXcmFwKTsNCiAgICBsaW5lTnVtYmVyc1RvZ2dsZT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVMaW5lTnVtYmVycyk7DQogICAgc3ludGF4SGlnaGxpZ2h0aW5nVG9nZ2xlPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVN5bnRheEhpZ2hsaWdodGluZyk7DQogICAgDQogICAgLy8gVGV4dGFyZWEgZXZlbnRzDQogICAgdGV4dEVkaXRvci50ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGhhbmRsZVRleHRDaGFuZ2UpOw0KICAgIHRleHRFZGl0b3IudGV4dGFyZWEuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3luY1Njcm9sbCk7DQogICAgdGV4dEVkaXRvci50ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7DQogICAgDQoNCiAgICANCiAgICAvLyBXaW5kb3cgZXZlbnRzDQogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGhhbmRsZUJlZm9yZVVubG9hZCk7DQp9DQoNCg0KDQovLyBIYW5kbGUga2V5Ym9hcmQgc2hvcnRjdXRzDQpmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHsNCiAgICAvLyBDdHJsL0NtZCArIFM6IFNhdmUNCiAgICBpZiAoKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpICYmIGUua2V5ID09PSAncycgJiYgIWUuc2hpZnRLZXkpIHsNCiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICBzYXZlRmlsZSgpOw0KICAgIH0NCiAgICANCiAgICAvLyBDdHJsL0NtZCArIFNoaWZ0ICsgUzogU2F2ZSBBcw0KICAgIGlmICgoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgJiYgZS5zaGlmdEtleSAmJiBlLmtleSA9PT0gJ1MnKSB7DQogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgc2F2ZUFzRmlsZSgpOw0KICAgIH0NCiAgICANCiAgICAvLyBDdHJsL0NtZCArIE46IE5ldyBmaWxlDQogICAgaWYgKChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiBlLmtleSA9PT0gJ24nKSB7DQogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgY3JlYXRlTmV3RmlsZSgpOw0KICAgIH0NCiAgICANCiAgICAvLyBDdHJsL0NtZCArIE86IExvYWQgZmlsZQ0KICAgIGlmICgoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgJiYgZS5rZXkgPT09ICdvJykgew0KICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgIGxvYWRGaWxlKCk7DQogICAgfQ0KICAgIA0KICAgIC8vIFRhYiBoYW5kbGluZw0KICAgIGlmIChlLmtleSA9PT0gJ1RhYicpIHsNCiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICBjb25zdCBzdGFydCA9IHRleHRFZGl0b3IudGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQ7DQogICAgICAgIGNvbnN0IGVuZCA9IHRleHRFZGl0b3IudGV4dGFyZWEuc2VsZWN0aW9uRW5kOw0KICAgICAgICBjb25zdCBzcGFjZXMgPSAnICcucmVwZWF0KHRleHRFZGl0b3Iuc2V0dGluZ3MudGFiU2l6ZSk7DQogICAgICAgIA0KICAgICAgICB0ZXh0RWRpdG9yLnRleHRhcmVhLnZhbHVlID0gDQogICAgICAgICAgICB0ZXh0RWRpdG9yLnRleHRhcmVhLnZhbHVlLnN1YnN0cmluZygwLCBzdGFydCkgKyANCiAgICAgICAgICAgIHNwYWNlcyArIA0KICAgICAgICAgICAgdGV4dEVkaXRvci50ZXh0YXJlYS52YWx1ZS5zdWJzdHJpbmcoZW5kKTsNCiAgICAgICAgDQogICAgICAgIHRleHRFZGl0b3IudGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQgPSB0ZXh0RWRpdG9yLnRleHRhcmVhLnNlbGVjdGlvbkVuZCA9IHN0YXJ0ICsgc3BhY2VzLmxlbmd0aDsNCiAgICAgICAgDQogICAgICAgIC8vIE1hbnVhbGx5IHRyaWdnZXIgY29udGVudCB1cGRhdGUgc2luY2Ugd2UgcHJldmVudGVkIHRoZSBkZWZhdWx0DQogICAgICAgIHVwZGF0ZUxpbmVOdW1iZXJzKCk7DQogICAgICAgIG1hcmtBc01vZGlmaWVkKCk7DQogICAgICAgIGlmICh0ZXh0RWRpdG9yLnN5bnRheEhpZ2hsaWdodGluZ0VuYWJsZWQpIHsNCiAgICAgICAgICAgIHVwZGF0ZUhpZ2hsaWdodGVkQ29udGVudCgpOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQoNCi8vIFRvZ2dsZSB3b3JkIHdyYXANCmZ1bmN0aW9uIHRvZ2dsZVdvcmRXcmFwKCkgew0KICAgIHRleHRFZGl0b3Iud29yZFdyYXBFbmFibGVkID0gIXRleHRFZGl0b3Iud29yZFdyYXBFbmFibGVkOw0KICAgIHRleHRFZGl0b3IudGV4dGFyZWEuY2xhc3NMaXN0LnRvZ2dsZSgnd29yZC13cmFwJywgdGV4dEVkaXRvci53b3JkV3JhcEVuYWJsZWQpOw0KICAgIA0KICAgIC8vIFVwZGF0ZSBoaWdobGlnaHRlZCBlZGl0b3IgaWYgaXQgZXhpc3RzDQogICAgaWYgKHRleHRFZGl0b3IuaGlnaGxpZ2h0ZWRFZGl0b3IpIHsNCiAgICAgICAgdGV4dEVkaXRvci5oaWdobGlnaHRlZEVkaXRvci5zdHlsZS53b3JkV3JhcCA9IHRleHRFZGl0b3Iud29yZFdyYXBFbmFibGVkID8gJ2JyZWFrLXdvcmQnIDogJ25vcm1hbCc7DQogICAgfQ0KICAgIA0KICAgIGlmICh3b3JkV3JhcFRvZ2dsZSkgew0KICAgICAgICB3b3JkV3JhcFRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCB0ZXh0RWRpdG9yLndvcmRXcmFwRW5hYmxlZCk7DQogICAgfQ0KICAgIA0KICAgIHN5cG5leEFQSS5zaG93Tm90aWZpY2F0aW9uKA0KICAgICAgICBgV29yZCB3cmFwICR7dGV4dEVkaXRvci53b3JkV3JhcEVuYWJsZWQgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfWAsDQogICAgICAgICdpbmZvJw0KICAgICk7DQp9DQoNCi8vIFRvZ2dsZSBsaW5lIG51bWJlcnMNCmZ1bmN0aW9uIHRvZ2dsZUxpbmVOdW1iZXJzKCkgew0KICAgIHRleHRFZGl0b3IubGluZU51bWJlcnNFbmFibGVkID0gIXRleHRFZGl0b3IubGluZU51bWJlcnNFbmFibGVkOw0KICAgIHRleHRFZGl0b3IubGluZU51bWJlcnMuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJywgIXRleHRFZGl0b3IubGluZU51bWJlcnNFbmFibGVkKTsNCiAgICANCiAgICBpZiAobGluZU51bWJlcnNUb2dnbGUpIHsNCiAgICAgICAgbGluZU51bWJlcnNUb2dnbGUuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJywgdGV4dEVkaXRvci5saW5lTnVtYmVyc0VuYWJsZWQpOw0KICAgIH0NCiAgICANCiAgICBpZiAodGV4dEVkaXRvci5saW5lTnVtYmVyc0VuYWJsZWQpIHsNCiAgICAgICAgdXBkYXRlTGluZU51bWJlcnMoKTsNCiAgICB9DQogICAgDQogICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oDQogICAgICAgIGBMaW5lIG51bWJlcnMgJHt0ZXh0RWRpdG9yLmxpbmVOdW1iZXJzRW5hYmxlZCA/ICdlbmFibGVkJyA6ICdkaXNhYmxlZCd9YCwNCiAgICAgICAgJ2luZm8nDQogICAgKTsNCn0NCg0KDQovLyBIYW5kbGUgYmVmb3JlIHVubG9hZA0KZnVuY3Rpb24gaGFuZGxlQmVmb3JlVW5sb2FkKGUpIHsNCiAgICBpZiAodGV4dEVkaXRvci5pc01vZGlmaWVkKSB7DQogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgZS5yZXR1cm5WYWx1ZSA9ICdZb3UgaGF2ZSB1bnNhdmVkIGNoYW5nZXMuIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZT8nOw0KICAgICAgICByZXR1cm4gZS5yZXR1cm5WYWx1ZTsNCiAgICB9DQp9DQoNCg0KLy8gVGV4dCBFZGl0b3IgQXBwDQoNCi8vIEdsb2JhbCB2YXJpYWJsZXMNCmxldCB0ZXh0RWRpdG9yID0gew0KICAgIHRleHRhcmVhOiBudWxsLA0KICAgIGxpbmVOdW1iZXJzOiBudWxsLA0KICAgIGZpbGVQYXRoOiBudWxsLA0KICAgIG9yaWdpbmFsQ29udGVudDogJycsDQogICAgaXNNb2RpZmllZDogZmFsc2UsDQogICAgYXV0b1NhdmVJbnRlcnZhbDogbnVsbCwNCiAgICB3b3JkV3JhcEVuYWJsZWQ6IGZhbHNlLA0KICAgIGxpbmVOdW1iZXJzRW5hYmxlZDogdHJ1ZSwNCiAgICBzZXR0aW5nczoge30sDQogICAgLy8gU3ludGF4IGhpZ2hsaWdodGluZw0KICAgIHByaXNtTG9hZGVkOiBmYWxzZSwNCiAgICBzeW50YXhIaWdobGlnaHRpbmdFbmFibGVkOiBmYWxzZSwNCiAgICBoaWdobGlnaHRlZEVkaXRvcjogbnVsbCwNCiAgICBoaWdobGlnaHRDb250YWluZXI6IG51bGwsDQogICAgb3JpZ2luYWxUZXh0YXJlYVN0eWxlczogbnVsbCwNCiAgICBkZWJvdW5jZVRpbWVyOiBudWxsLA0KICAgIC8vIEN1cnNvciBwb3NpdGlvbiB0cmFja2luZw0KICAgIGN1cnNvclBvc2l0aW9uOiAwDQp9Ow0KDQovLyBET00gZWxlbWVudHMNCmxldCBuZXdGaWxlQnRuLCBsb2FkRmlsZUJ0biwgc2F2ZUZpbGVCdG4sIHNhdmVBc0ZpbGVCdG47DQpsZXQgY3VycmVudEZpbGVuYW1lRWwsIHdvcmRXcmFwVG9nZ2xlLCBsaW5lTnVtYmVyc1RvZ2dsZSwgc3ludGF4SGlnaGxpZ2h0aW5nVG9nZ2xlOw0KbGV0IG1vZGlmaWVkU3RhdHVzRWw7DQoNCi8vIEluaXRpYWxpemUgd2hlbiBET00gaXMgcmVhZHkNCmFzeW5jIGZ1bmN0aW9uIGluaXRUZXh0RWRpdG9yKCkgew0KICAgIA0KICAgIC8vIENoZWNrIGlmIFN5cG5leEFQSSBpcyBhdmFpbGFibGUNCiAgICBpZiAodHlwZW9mIHN5cG5leEFQSSA9PT0gJ3VuZGVmaW5lZCcgfHwgIXN5cG5leEFQSSkgew0KICAgICAgICBjb25zb2xlLndhcm4oJ1N5cG5leEFQSSBub3QgYXZhaWxhYmxlIC0gcnVubmluZyBpbiBzdGFuZGFsb25lIG1vZGUnKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgIA0KICAgIC8vIFRlc3QgaWYgYXBwIGNvbnRhaW5lciBleGlzdHMNCiAgICBjb25zdCBhcHBDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwLWNvbnRhaW5lcicpOw0KICAgIGlmIChhcHBDb250YWluZXIpIHsNCiAgICB9DQogICAgDQogICAgLy8gR2V0IERPTSBlbGVtZW50cw0KICAgIHRleHRFZGl0b3IudGV4dGFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dC1lZGl0b3InKTsNCiAgICB0ZXh0RWRpdG9yLmxpbmVOdW1iZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmUtbnVtYmVycycpOw0KICAgIA0KICAgIG5ld0ZpbGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3LWZpbGUnKTsNCiAgICBsb2FkRmlsZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkLWZpbGUnKTsNCiAgICBzYXZlRmlsZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlLWZpbGUnKTsNCiAgICBzYXZlQXNGaWxlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NhdmUtYXMtZmlsZScpOw0KICAgIGN1cnJlbnRGaWxlbmFtZUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1cnJlbnQtZmlsZW5hbWUnKTsNCiAgICB3b3JkV3JhcFRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3b3JkLXdyYXAtdG9nZ2xlJyk7DQogICAgbGluZU51bWJlcnNUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZS1udW1iZXJzLXRvZ2dsZScpOw0KICAgIHN5bnRheEhpZ2hsaWdodGluZ1RvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzeW50YXgtaGlnaGxpZ2h0aW5nLXRvZ2dsZScpOw0KICAgIA0KICAgIG1vZGlmaWVkU3RhdHVzRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kaWZpZWQtc3RhdHVzJyk7DQogICAgDQogICAgLy8gQ3JpdGljYWwgZWxlbWVudCBjaGVja3MNCiAgICBpZiAoIXRleHRFZGl0b3IudGV4dGFyZWEpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcignVGV4dCBlZGl0b3IgdGV4dGFyZWEgbm90IGZvdW5kJyk7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgDQogICAgaWYgKCF0ZXh0RWRpdG9yLmxpbmVOdW1iZXJzKSB7DQogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0xpbmUgbnVtYmVycyBlbGVtZW50IG5vdCBmb3VuZCcpOw0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIA0KICAgIA0KICAgIC8vIExvYWQgc2V0dGluZ3MgKFdBSVQgZm9yIHRoZW0gdG8gY29tcGxldGUpDQogICAgYXdhaXQgbG9hZFNldHRpbmdzKCk7DQogICAgDQogICAgLy8gU2V0IHVwIGV2ZW50IGhhbmRsZXJzDQogICAgc2V0dXBFdmVudEhhbmRsZXJzKCk7DQogICAgDQogICAgLy8gSW5pdGlhbGl6ZSBlZGl0b3Igc3RhdGUNCiAgICBpbml0aWFsaXplRWRpdG9yKCk7DQogICAgDQogICAgLy8gU2V0IGluaXRpYWwgYnV0dG9uIHN0YXRlcw0KICAgIGlmIChzeW50YXhIaWdobGlnaHRpbmdUb2dnbGUpIHsNCiAgICAgICAgc3ludGF4SGlnaGxpZ2h0aW5nVG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScsIHRleHRFZGl0b3Iuc2V0dGluZ3Muc3ludGF4SGlnaGxpZ2h0aW5nKTsNCiAgICB9DQogICAgDQogICAgLy8gVGV4dCBFZGl0b3IgbG9hZGVkIHN1Y2Nlc3NmdWxseSAobm8gbm90aWZpY2F0aW9uIG5lZWRlZCkNCiAgICANCiAgICAvLyBDaGVjayBmb3IgcGVuZGluZyBpbnRlbnRzIEFGVEVSIGV2ZXJ5dGhpbmcgaXMgZnVsbHkgaW5pdGlhbGl6ZWQNCiAgICBjaGVja0ZvckFwcEludGVudCgpOw0KICAgIA0KfQ0KDQovLyBDaGVjayBmb3IgYXBwIGludGVudHMgKGUuZy4sIGZpbGUgdG8gb3BlbiBmcm9tIFZGUykNCmFzeW5jIGZ1bmN0aW9uIGNoZWNrRm9yQXBwSW50ZW50KCkgew0KICAgIHRyeSB7DQogICAgICAgIA0KICAgICAgICAvLyBSZWFkIGludGVudCBmcm9tIHVzZXIgcHJlZmVyZW5jZXMgKHdoZXJlIGl0J3Mgc3RvcmVkKQ0KICAgICAgICBjb25zdCBpbnRlbnREYXRhID0gYXdhaXQgc3lwbmV4QVBJLmdldFByZWZlcmVuY2UoJ3RleHRfZWRpdG9yJywgJ19wZW5kaW5nX2ludGVudCcsIG51bGwpOw0KICAgICAgICANCiAgICAgICAgaWYgKGludGVudERhdGEgJiYgaW50ZW50RGF0YS5hY3Rpb24gPT09ICdvcGVuX2ZpbGUnKSB7DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIENsZWFyIHRoZSBpbnRlbnQgaW1tZWRpYXRlbHkgYWZ0ZXIgcmVhZGluZyBpdCwgcmVnYXJkbGVzcyBvZiBzdWNjZXNzL2ZhaWx1cmUNCiAgICAgICAgICAgIGF3YWl0IHN5cG5leEFQSS5zZXRQcmVmZXJlbmNlKCd0ZXh0X2VkaXRvcicsICdfcGVuZGluZ19pbnRlbnQnLCBudWxsKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgY29uc3QgZmlsZURhdGEgPSBpbnRlbnREYXRhLmRhdGE7DQogICAgICAgICAgICBpZiAoZmlsZURhdGEgJiYgZmlsZURhdGEuZmlsZVBhdGgpIHsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAvLyBVc2UgZXhpc3RpbmcgZmlsZSBsb2FkaW5nIGxvZ2ljIGluc3RlYWQgb2YgZHVwbGljYXRpbmcgaXQNCiAgICAgICAgICAgICAgICBhd2FpdCBsb2FkRmlsZUJ5UGF0aChmaWxlRGF0YS5maWxlUGF0aCk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVGV4dCBFZGl0b3I6IEludmFsaWQgZmlsZSBkYXRhIGluIGludGVudDonLCBmaWxlRGF0YSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgIH0NCiAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCdUZXh0IEVkaXRvcjogRXJyb3IgY2hlY2tpbmcgZm9yIGFwcCBpbnRlbnQ6JywgZXJyb3IpOw0KICAgIH0NCn0NCg0KDQoNCg0KDQoNCi8vIFJlcGxhY2UgdGhlIG9yaWdpbmFsIGluaXRUZXh0RWRpdG9yIGNhbGwNCmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHsNCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdFRleHRFZGl0b3IpOw0KfSBlbHNlIHsNCiAgICAvLyBET00gaXMgYWxyZWFkeSBsb2FkZWQNCiAgICBpbml0VGV4dEVkaXRvcigpOw0KfSA8L3NjcmlwdD4="
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-05T19:57:27.505425",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\text_editor"
  }
}