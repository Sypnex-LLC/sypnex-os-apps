{
  "app_metadata": {
    "id": "text_editor",
    "name": "Text Editor",
    "description": "A simple text editor for creating and editing text files in the virtual file system",
    "icon": "fas fa-edit",
    "keywords": [
      "text_editor",
      "editor",
      "file",
      "edit",
      "write"
    ],
    "author": "Sypnex OS",
    "version": "1.0.9",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/settings-manager.js",
      "js/file-manager.js",
      "js/editor-manager.js",
      "js/syntax-highlighting.js",
      "js/code-validation.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "settings": [
      {
        "key": "FONT_SIZE",
        "name": "Font Size",
        "type": "number",
        "value": 14,
        "description": "Text editor font size in pixels"
      },
      {
        "key": "TAB_SIZE",
        "name": "Tab Size",
        "type": "number",
        "value": 4,
        "description": "Number of spaces for tab indentation"
      }
    ]
  },
  "files": {
    "text_editor.app": "ew0KICAgICJpZCI6ICJ0ZXh0X2VkaXRvciIsDQogICAgIm5hbWUiOiAiVGV4dCBFZGl0b3IiLA0KICAgICJkZXNjcmlwdGlvbiI6ICJBIHNpbXBsZSB0ZXh0IGVkaXRvciBmb3IgY3JlYXRpbmcgYW5kIGVkaXRpbmcgdGV4dCBmaWxlcyBpbiB0aGUgdmlydHVhbCBmaWxlIHN5c3RlbSIsDQogICAgImljb24iOiAiZmFzIGZhLWVkaXQiLA0KICAgICJrZXl3b3JkcyI6IFsidGV4dF9lZGl0b3IiLCAiZWRpdG9yIiwgImZpbGUiLCAiZWRpdCIsICJ3cml0ZSJdLA0KICAgICJhdXRob3IiOiAiU3lwbmV4IE9TIiwNCiAgICAidmVyc2lvbiI6ICIxLjAuOSIsDQogICAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAgICJzY3JpcHRzIjogWw0KICAgICAgICAianMvdXRpbHMuanMiLA0KICAgICAgICAianMvc2V0dGluZ3MtbWFuYWdlci5qcyIsDQogICAgICAgICJqcy9maWxlLW1hbmFnZXIuanMiLA0KICAgICAgICAianMvZWRpdG9yLW1hbmFnZXIuanMiLA0KICAgICAgICAianMvc3ludGF4LWhpZ2hsaWdodGluZy5qcyIsDQogICAgICAgICJqcy9jb2RlLXZhbGlkYXRpb24uanMiLCANCiAgICAgICAgImpzL3VpLW1hbmFnZXIuanMiLA0KICAgICAgICAianMvbWFpbi5qcyINCiAgICBdLA0KICAgICJzZXR0aW5ncyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICAgImtleSI6ICJGT05UX1NJWkUiLA0KICAgICAgICAgICAgIm5hbWUiOiAiRm9udCBTaXplIiwNCiAgICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgICAidmFsdWUiOiAxNCwNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUZXh0IGVkaXRvciBmb250IHNpemUgaW4gcGl4ZWxzIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICAia2V5IjogIlRBQl9TSVpFIiwNCiAgICAgICAgICAgICJuYW1lIjogIlRhYiBTaXplIiwNCiAgICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgICAidmFsdWUiOiA0LA0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBzcGFjZXMgZm9yIHRhYiBpbmRlbnRhdGlvbiINCiAgICAgICAgfQ0KICAgIF0NCn0g",
    "text_editor.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-15T09:26:26.354907",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\text_editor"
  }
}