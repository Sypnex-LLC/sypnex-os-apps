{
  "app_metadata": {
    "id": "410e8a66-925c-4698-8768-ead77107060e",
    "name": "Text Editor",
    "description": "A simple text editor for creating and editing text files in the virtual file system",
    "icon": "fas fa-edit",
    "keywords": [
      "text_editor",
      "editor",
      "file",
      "edit",
      "write"
    ],
    "author": "Sypnex OS",
    "version": "1.0.9",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/settings-manager.js",
      "js/file-manager.js",
      "js/editor-manager.js",
      "js/syntax-highlighting.js",
      "js/code-validation.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "settings": [
      {
        "key": "FONT_SIZE",
        "name": "Font Size",
        "type": "number",
        "value": 14,
        "description": "Text editor font size in pixels"
      },
      {
        "key": "TAB_SIZE",
        "name": "Tab Size",
        "type": "number",
        "value": 4,
        "description": "Number of spaces for tab indentation"
      }
    ]
  },
  "files": {
    "410e8a66-925c-4698-8768-ead77107060e.app": "ew0KICAgICJpZCI6ICI0MTBlOGE2Ni05MjVjLTQ2OTgtODc2OC1lYWQ3NzEwNzA2MGUiLA0KICAgICJuYW1lIjogIlRleHQgRWRpdG9yIiwNCiAgICAiZGVzY3JpcHRpb24iOiAiQSBzaW1wbGUgdGV4dCBlZGl0b3IgZm9yIGNyZWF0aW5nIGFuZCBlZGl0aW5nIHRleHQgZmlsZXMgaW4gdGhlIHZpcnR1YWwgZmlsZSBzeXN0ZW0iLA0KICAgICJpY29uIjogImZhcyBmYS1lZGl0IiwNCiAgICAia2V5d29yZHMiOiBbInRleHRfZWRpdG9yIiwgImVkaXRvciIsICJmaWxlIiwgImVkaXQiLCAid3JpdGUiXSwNCiAgICAiYXV0aG9yIjogIlN5cG5leCBPUyIsDQogICAgInZlcnNpb24iOiAiMS4wLjkiLA0KICAgICJ0eXBlIjogInVzZXJfYXBwIiwNCiAgICAic2NyaXB0cyI6IFsNCiAgICAgICAgImpzL3V0aWxzLmpzIiwNCiAgICAgICAgImpzL3NldHRpbmdzLW1hbmFnZXIuanMiLA0KICAgICAgICAianMvZmlsZS1tYW5hZ2VyLmpzIiwNCiAgICAgICAgImpzL2VkaXRvci1tYW5hZ2VyLmpzIiwNCiAgICAgICAgImpzL3N5bnRheC1oaWdobGlnaHRpbmcuanMiLA0KICAgICAgICAianMvY29kZS12YWxpZGF0aW9uLmpzIiwgDQogICAgICAgICJqcy91aS1tYW5hZ2VyLmpzIiwNCiAgICAgICAgImpzL21haW4uanMiDQogICAgXSwNCiAgICAic2V0dGluZ3MiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAgICJrZXkiOiAiRk9OVF9TSVpFIiwNCiAgICAgICAgICAgICJuYW1lIjogIkZvbnQgU2l6ZSIsDQogICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICAgInZhbHVlIjogMTQsDQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGV4dCBlZGl0b3IgZm9udCBzaXplIGluIHBpeGVscyINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgImtleSI6ICJUQUJfU0laRSIsDQogICAgICAgICAgICAibmFtZSI6ICJUYWIgU2l6ZSIsDQogICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICAgInZhbHVlIjogNCwNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2Ygc3BhY2VzIGZvciB0YWIgaW5kZW50YXRpb24iDQogICAgICAgIH0NCiAgICBdDQp9IA==",
    "410e8a66-925c-4698-8768-ead77107060e.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-16T03:39:53.035909",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": "C:\\Users\\bruce\\OneDrive\\Desktop\\AI Research\\sypnex-os-apps\\official\\text_editor"
  }
}