{
  "app_metadata": {
    "id": "app_store",
    "name": "App Store",
    "description": "Simple app store to browse and install available user applications",
    "icon": "fas fa-store",
    "keywords": [
      "store",
      "apps",
      "install",
      "download",
      "browse"
    ],
    "author": "Sypnex OS",
    "version": "1.0.3",
    "type": "user_app",
    "scripts": [
      "main.js"
    ],
    "styles": [
      "style.css"
    ]
  },
  "files": {
    "app_store.app": "ew0KICAiaWQiOiAiYXBwX3N0b3JlIiwNCiAgIm5hbWUiOiAiQXBwIFN0b3JlIiwNCiAgImRlc2NyaXB0aW9uIjogIlNpbXBsZSBhcHAgc3RvcmUgdG8gYnJvd3NlIGFuZCBpbnN0YWxsIGF2YWlsYWJsZSB1c2VyIGFwcGxpY2F0aW9ucyIsDQogICJpY29uIjogImZhcyBmYS1zdG9yZSIsDQogICJrZXl3b3JkcyI6IFsic3RvcmUiLCAiYXBwcyIsICJpbnN0YWxsIiwgImRvd25sb2FkIiwgImJyb3dzZSJdLA0KICAiYXV0aG9yIjogIlN5cG5leCBPUyIsDQogICJ2ZXJzaW9uIjogIjEuMC4zIiwNCiAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAic2NyaXB0cyI6IFsibWFpbi5qcyJdLA0KICAic3R5bGVzIjogWyJzdHlsZS5jc3MiXQ0KfQ0K",
    "app_store.html": "PGRpdiBjbGFzcz0iYXBwLWNvbnRhaW5lciI+DQogICAgPGRpdiBjbGFzcz0iYXBwLWhlYWRlciI+DQogICAgICAgIDxoMj48aSBjbGFzcz0iZmFzIGZhLXN0b3JlIj48L2k+IEFwcCBTdG9yZTwvaDI+DQogICAgICAgIDxwPkJyb3dzZSBhbmQgaW5zdGFsbCBhdmFpbGFibGUgdXNlciBhcHBsaWNhdGlvbnM8L3A+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJhcHAtY29udGVudCI+DQogICAgICAgIDwhLS0gVG9vbGJhciAtLT4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3RvcmUtdG9vbGJhciI+DQogICAgICAgICAgICA8YnV0dG9uIGlkPSJyZWZyZXNoLWFwcHMiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPg0KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3luYy1hbHQiPjwvaT4gUmVmcmVzaA0KICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InNlYXJjaC1pbnB1dCIgcGxhY2Vob2xkZXI9IlNlYXJjaCBhcHBzLi4uIiBjbGFzcz0iZm9ybS1jb250cm9sIj4NCiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNlYXJjaCBzZWFyY2gtaWNvbiI+PC9pPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDwhLS0gTG9hZGluZyBTdGF0ZSAtLT4NCiAgICAgICAgPGRpdiBpZD0ibG9hZGluZy1zdGF0ZSIgY2xhc3M9ImxvYWRpbmctc3RhdGUiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZy1zcGlubmVyIj4NCiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNwaW5uZXIgZmEtc3BpbiI+PC9pPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8cD5Mb2FkaW5nIGF2YWlsYWJsZSBhcHBzLi4uPC9wPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8IS0tIEVycm9yIFN0YXRlIC0tPg0KICAgICAgICA8ZGl2IGlkPSJlcnJvci1zdGF0ZSIgY2xhc3M9ImVycm9yLXN0YXRlIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXJyb3ItaWNvbiI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSI+PC9pPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8cCBpZD0iZXJyb3ItbWVzc2FnZSI+RmFpbGVkIHRvIGxvYWQgYXBwczwvcD4NCiAgICAgICAgICAgIDxidXR0b24gaWQ9InJldHJ5LWJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5Ij4NCiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXJlZG8iPjwvaT4gUmV0cnkNCiAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8IS0tIEFwcHMgR3JpZCAtLT4NCiAgICAgICAgPGRpdiBpZD0iYXBwcy1ncmlkIiBjbGFzcz0iYXBwcy1ncmlkIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgPCEtLSBBcHBzIHdpbGwgYmUgcG9wdWxhdGVkIGR5bmFtaWNhbGx5IC0tPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8IS0tIEVtcHR5IFN0YXRlIC0tPg0KICAgICAgICA8ZGl2IGlkPSJlbXB0eS1zdGF0ZSIgY2xhc3M9ImVtcHR5LXN0YXRlIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZW1wdHktaWNvbiI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1pbmJveCI+PC9pPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8cD5ObyBhcHBzIGZvdW5kPC9wPg0KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQiPlRyeSByZWZyZXNoaW5nIG9yIGNoZWNrIHlvdXIgY29ubmVjdGlvbjwvcD4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHN0eWxlPi8qID09PT09IFN0eWxlOiBzdHlsZS5jc3MgPT09PT0gKi8NCi8qIEFwcCBTdG9yZSBTdHlsZXMgKi8NCi5hcHAtY29udGFpbmVyIHsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KfQ0KDQouYXBwLWhlYWRlciB7DQogICAgcGFkZGluZzogMjBweDsNCiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMSkpOw0KfQ0KDQouYXBwLWhlYWRlciBoMiB7DQogICAgbWFyZ2luOiAwIDAgOHB4IDA7DQogICAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCg0KLmFwcC1oZWFkZXIgcCB7DQogICAgbWFyZ2luOiAwOw0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjcpKTsNCiAgICBmb250LXNpemU6IDE0cHg7DQp9DQoNCi5hcHAtY29udGVudCB7DQogICAgZmxleDogMTsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCg0KLyogVG9vbGJhciAqLw0KLnN0b3JlLXRvb2xiYXIgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBnYXA6IDE1cHg7DQogICAgcGFkZGluZzogMTVweCAyMHB4Ow0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IsIHJnYmEoMjU1LDI1NSwyNTUsMC4xKSk7DQp9DQoNCi5zZWFyY2gtY29udGFpbmVyIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZmxleDogMTsNCiAgICBtYXgtd2lkdGg6IDMwMHB4Ow0KfQ0KDQouc2VhcmNoLWNvbnRhaW5lciBpbnB1dCB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgcGFkZGluZzogOHB4IDEycHggOHB4IDM1cHg7DQogICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMikpOw0KICAgIGJvcmRlci1yYWRpdXM6IDZweDsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdXJmYWNlLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMSkpOw0KICAgIGNvbG9yOiBpbmhlcml0Ow0KICAgIGZvbnQtc2l6ZTogMTRweDsNCn0NCg0KLnNlYXJjaC1jb250YWluZXIgaW5wdXQ6Zm9jdXMgew0KICAgIG91dGxpbmU6IG5vbmU7DQogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IsICM0YTkwZTIpOw0KICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCByZ2JhKDc0LCAxNDQsIDIyNiwgMC4yKTsNCn0NCg0KLnNlYXJjaC1pY29uIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgbGVmdDogMTJweDsNCiAgICB0b3A6IDUwJTsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7DQogICAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuNikpOw0KICAgIHBvaW50ZXItZXZlbnRzOiBub25lOw0KfQ0KDQovKiBTdGF0ZXMgKi8NCi5sb2FkaW5nLXN0YXRlLA0KLmVycm9yLXN0YXRlLA0KLmVtcHR5LXN0YXRlIHsNCiAgICBmbGV4OiAxOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBwYWRkaW5nOiA0MHB4Ow0KfQ0KDQoubG9hZGluZy1zcGlubmVyIGkgew0KICAgIGZvbnQtc2l6ZTogMnJlbTsNCiAgICBjb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yLCAjNGE5MGUyKTsNCiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KfQ0KDQouZXJyb3ItaWNvbiBpLA0KLmVtcHR5LWljb24gaSB7DQogICAgZm9udC1zaXplOiAzcmVtOw0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjUpKTsNCiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KfQ0KDQouZXJyb3Itc3RhdGUgcCwNCi5lbXB0eS1zdGF0ZSBwIHsNCiAgICBtYXJnaW46IDVweCAwOw0KfQ0KDQovKiBBcHBzIEdyaWQgKi8NCi5hcHBzLWdyaWQgew0KICAgIGZsZXg6IDE7DQogICAgcGFkZGluZzogMjBweDsNCiAgICBvdmVyZmxvdy15OiBhdXRvOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoMzIwcHgsIDFmcikpOw0KICAgIGdhcDogMjBweDsNCiAgICBhbGlnbi1jb250ZW50OiBzdGFydDsNCn0NCg0KLyogQXBwIENhcmQgKi8NCi5hcHAtY2FyZCB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tc3VyZmFjZS1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjA1KSk7DQogICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMSkpOw0KICAgIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgICBwYWRkaW5nOiAyMHB4Ow0KICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KDQouYXBwLWNhcmQ6aG92ZXIgew0KICAgIGJvcmRlci1jb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yLCAjNGE5MGUyKTsNCiAgICBib3gtc2hhZG93OiAwIDRweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4yKTsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7DQp9DQoNCi5hcHAtY2FyZC1oZWFkZXIgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBnYXA6IDEycHg7DQogICAgbWFyZ2luLWJvdHRvbTogMTVweDsNCn0NCg0KLmFwcC1pY29uIHsNCiAgICB3aWR0aDogNDhweDsNCiAgICBoZWlnaHQ6IDQ4cHg7DQogICAgYmFja2dyb3VuZDogdmFyKC0tYWNjZW50LWNvbG9yLCAjNGE5MGUyKTsNCiAgICBib3JkZXItcmFkaXVzOiA4cHg7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIGNvbG9yOiB3aGl0ZTsNCiAgICBmb250LXNpemU6IDIwcHg7DQogICAgZmxleC1zaHJpbms6IDA7DQp9DQoNCi5hcHAtaW5mbyBoMyB7DQogICAgbWFyZ2luOiAwIDAgNHB4IDA7DQogICAgZm9udC1zaXplOiAxNnB4Ow0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQp9DQoNCi5hcHAtdmVyc2lvbiB7DQogICAgZm9udC1zaXplOiAxMnB4Ow0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjcpKTsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdXJmYWNlLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMSkpOw0KICAgIHBhZGRpbmc6IDJweCA2cHg7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgIGZvbnQtd2VpZ2h0OiA1MDA7DQp9DQoNCi5hcHAtZGVzY3JpcHRpb24gew0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjcpKTsNCiAgICBmb250LXNpemU6IDE0cHg7DQogICAgbGluZS1oZWlnaHQ6IDEuNDsNCiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KICAgIGRpc3BsYXk6IC13ZWJraXQtYm94Ow0KICAgIC13ZWJraXQtbGluZS1jbGFtcDogMjsNCiAgICBsaW5lLWNsYW1wOiAyOw0KICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCg0KLmFwcC1hY3Rpb25zIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KfQ0KDQouYXBwLXN0YXR1cyB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGdhcDogNnB4Ow0KICAgIGZvbnQtc2l6ZTogMTJweDsNCiAgICBmb250LXdlaWdodDogNTAwOw0KfQ0KDQouYXBwLXN0YXR1cy5pbnN0YWxsZWQgew0KICAgIGNvbG9yOiB2YXIoLS1zdWNjZXNzLWNvbG9yLCAjMjhhNzQ1KTsNCn0NCg0KLmFwcC1zdGF0dXMubm90LWluc3RhbGxlZCB7DQogICAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuNikpOw0KfQ0KDQouYXBwLXN0YXR1cyBpIHsNCiAgICBmb250LXNpemU6IDEycHg7DQp9DQoNCi8qIEJ1dHRvbnMgKi8NCi5idG4gew0KICAgIHBhZGRpbmc6IDhweCAxNnB4Ow0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiA2cHg7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICBmb250LXdlaWdodDogNTAwOw0KICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7DQogICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBnYXA6IDZweDsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7DQp9DQoNCi5idG46ZGlzYWJsZWQgew0KICAgIG9wYWNpdHk6IDAuNjsNCiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOw0KfQ0KDQouYnRuLXByaW1hcnkgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLWFjY2VudC1jb2xvciwgIzRhOTBlMik7DQogICAgY29sb3I6IHdoaXRlOw0KfQ0KDQouYnRuLXByaW1hcnk6aG92ZXI6bm90KDpkaXNhYmxlZCkgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLWFjY2VudC1ob3ZlciwgIzNhN2JjOCk7DQogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xcHgpOw0KfQ0KDQouYnRuLXNlY29uZGFyeSB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tc3VyZmFjZS1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjEpKTsNCiAgICBjb2xvcjogaW5oZXJpdDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IsIHJnYmEoMjU1LDI1NSwyNTUsMC4yKSk7DQp9DQoNCi5idG4tc2Vjb25kYXJ5OmhvdmVyOm5vdCg6ZGlzYWJsZWQpIHsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdXJmYWNlLWhvdmVyLCByZ2JhKDI1NSwyNTUsMjU1LDAuMTUpKTsNCiAgICBib3JkZXItY29sb3I6IHZhcigtLWFjY2VudC1jb2xvciwgIzRhOTBlMik7DQp9DQoNCi5idG4tc3VjY2VzcyB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tc3VjY2Vzcy1jb2xvciwgIzI4YTc0NSk7DQogICAgY29sb3I6IHdoaXRlOw0KfQ0KDQouYnRuLXN1Y2Nlc3M6aG92ZXI6bm90KDpkaXNhYmxlZCkgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLXN1Y2Nlc3MtaG92ZXIsICMyMTg4MzgpOw0KfQ0KDQouYnRuLXNtIHsNCiAgICBwYWRkaW5nOiA2cHggMTJweDsNCiAgICBmb250LXNpemU6IDEycHg7DQp9DQoNCi8qIExvYWRpbmcgc3RhdGVzIGZvciBidXR0b25zICovDQouYnRuIC5mYS1zcGlubmVyIHsNCiAgICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlOw0KfQ0KDQpAa2V5ZnJhbWVzIHNwaW4gew0KICAgIGZyb20geyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfQ0KICAgIHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfQ0KfQ0KDQovKiBBcHAgU3RhdHVzIEluZGljYXRvcnMgKi8NCi5hcHAtc3RhdHVzIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgZ2FwOiA2cHg7DQogICAgZm9udC1zaXplOiAxMnB4Ow0KICAgIGZvbnQtd2VpZ2h0OiA1MDA7DQogICAgbWFyZ2luLWJvdHRvbTogMTJweDsNCn0NCg0KLmFwcC1zdGF0dXMuaW5zdGFsbGVkIHsNCiAgICBjb2xvcjogdmFyKC0tc3VjY2Vzcy1jb2xvciwgIzI4YTc0NSk7DQp9DQoNCi5hcHAtc3RhdHVzLm5vdC1pbnN0YWxsZWQgew0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjcpKTsNCn0NCg0KLmFwcC1zdGF0dXMudXBkYXRlLWF2YWlsYWJsZSB7DQogICAgY29sb3I6IHZhcigtLXdhcm5pbmctY29sb3IsICNmZmMxMDcpOw0KfQ0KDQouYnRuLXdhcm5pbmcgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLXdhcm5pbmctY29sb3IsICNmZmMxMDcpOw0KICAgIGNvbG9yOiB2YXIoLS1kYXJrLWNvbG9yLCAjMDAwKTsNCn0NCg0KLmJ0bi13YXJuaW5nOmhvdmVyOm5vdCg6ZGlzYWJsZWQpIHsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS13YXJuaW5nLWhvdmVyLCAjZTBhODAwKTsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7DQp9DQoNCi8qIFJlc3BvbnNpdmUgKi8NCkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkgew0KICAgIC5hcHBzLWdyaWQgew0KICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjsNCiAgICAgICAgcGFkZGluZzogMTVweDsNCiAgICAgICAgZ2FwOiAxNXB4Ow0KICAgIH0NCiAgICANCiAgICAuc3RvcmUtdG9vbGJhciB7DQogICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoOw0KICAgICAgICBnYXA6IDEwcHg7DQogICAgfQ0KICAgIA0KICAgIC5zZWFyY2gtY29udGFpbmVyIHsNCiAgICAgICAgbWF4LXdpZHRoOiBub25lOw0KICAgIH0NCn0NCg0KLyogUmVtb3ZlIGhhcmRjb2RlZCBvdmVycmlkZXMgLSBsZXQgT1MgaGFuZGxlIHRoZW1pbmcgKi8NCjwvc3R5bGU+DQo8c2NyaXB0Pi8vID09PT09IFNjcmlwdDogbWFpbi5qcyA9PT09PQ0KDQoNCmNvbnNvbGUubG9nKCdBcHAgU3RvcmUgc2NyaXB0IGxvYWRlZCcpOw0KDQovLyBBcHAgU3RvcmUgZnVuY3Rpb25hbGl0eQ0KY2xhc3MgQXBwU3RvcmUgew0KICAgIGNvbnN0cnVjdG9yKCkgew0KICAgICAgICB0aGlzLmFwcHMgPSBuZXcgTWFwKCk7DQogICAgICAgIHRoaXMuaW5zdGFsbGVkQXBwcyA9IG5ldyBNYXAoKTsgLy8gQ2hhbmdlZCB0byBNYXAgdG8gc3RvcmUgdmVyc2lvbiBpbmZvDQogICAgICAgIHRoaXMuZmlsdGVyZWRBcHBzID0gbmV3IE1hcCgpOw0KICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOw0KDQogICAgICAgIHRoaXMuaW5pdCgpOw0KICAgIH0NCg0KICAgIGFzeW5jIGluaXQoKSB7DQogICAgICAgIC8vIENoZWNrIGlmIFN5cG5leEFQSSBpcyBhdmFpbGFibGUNCiAgICAgICAgaWYgKHR5cGVvZiBzeXBuZXhBUEkgIT09ICd1bmRlZmluZWQnICYmIHN5cG5leEFQSSkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coJ0FwcCBTdG9yZSBpbml0aWFsaXplZCB3aXRoIFN5cG5leEFQSScpOw0KICAgICAgICAgICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKCk7DQogICAgICAgICAgICB0aGlzLmxvYWRBcHBzKCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTeXBuZXhBUEkgbm90IGF2YWlsYWJsZScpOw0KICAgICAgICAgICAgdGhpcy5zaG93RXJyb3IoJ1N5cG5leEFQSSBub3QgYXZhaWxhYmxlLiBBcHAgU3RvcmUgY2Fubm90IGZ1bmN0aW9uIHByb3Blcmx5LicpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgc2V0dXBFdmVudExpc3RlbmVycygpIHsNCiAgICAgICAgLy8gUmVmcmVzaCBidXR0b24NCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlZnJlc2gtYXBwcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgLy8gQ2FsbCB0aGUgU3lwbmV4QVBJIG1ldGhvZCB0byByZWZyZXNoIHRoZSBPUy1sZXZlbCBjYWNoZQ0KICAgICAgICAgICAgY29uc3QgcmVmcmVzaFN1Y2Nlc3MgPSBhd2FpdCBzeXBuZXhBUEkucmVmcmVzaEFwcFZlcnNpb25zQ2FjaGUoKTsNCg0KICAgICAgICAgICAgaWYgKHJlZnJlc2hTdWNjZXNzKSB7DQogICAgICAgICAgICAgICAgLy8gQ2FjaGUgd2FzIHJlZnJlc2hlZCBzdWNjZXNzZnVsbHksIG5vdyByZWxvYWQgdGhlIGFwcCdzIFVJDQogICAgICAgICAgICAgICAgdGhpcy5sb2FkQXBwcygpOw0KICAgICAgICAgICAgICAgIC8vIE9wdGlvbmFsbHkgc2hvdyBhIHN1Y2Nlc3MgbWVzc2FnZQ0KICAgICAgICAgICAgICAgIHN5cG5leEFQSS5zaG93Tm90aWZpY2F0aW9uKCdBcHAgdmVyc2lvbnMgcmVmcmVzaGVkIScsICdzdWNjZXNzJyk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIC8vIENhY2hlIHJlZnJlc2ggZmFpbGVkLCBidXQgc3RpbGwgdHJ5IHRvIHJlbG9hZCBVSSB3aXRoIGV4aXN0aW5nIGRhdGENCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRBcHBzKCk7DQogICAgICAgICAgICAgICAgLy8gT3B0aW9uYWxseSBzaG93IGEgd2FybmluZw0KICAgICAgICAgICAgICAgIHN5cG5leEFQSS5zaG93Tm90aWZpY2F0aW9uKCdGYWlsZWQgdG8gcmVmcmVzaCB2ZXJzaW9ucywgc2hvd2luZyBjYWNoZWQgZGF0YScsICdlcnJvcicpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyBTZWFyY2ggZnVuY3Rpb25hbGl0eQ0KICAgICAgICBjb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtaW5wdXQnKTsNCiAgICAgICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4gew0KICAgICAgICAgICAgdGhpcy5maWx0ZXJBcHBzKGUudGFyZ2V0LnZhbHVlKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLy8gUmV0cnkgYnV0dG9uDQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXRyeS1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsNCiAgICAgICAgICAgIHRoaXMubG9hZEFwcHMoKTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgYXN5bmMgbG9hZEFwcHMoc2hvd0xvYWRpbmcgPSB0cnVlKSB7DQogICAgICAgIGlmICh0aGlzLmlzTG9hZGluZykgcmV0dXJuOw0KDQogICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTsNCg0KICAgICAgICBpZiAoc2hvd0xvYWRpbmcpIHsNCiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAvLyBMb2FkIGF2YWlsYWJsZSBhcHBzIGFuZCBpbnN0YWxsZWQgYXBwcyBpbiBwYXJhbGxlbA0KICAgICAgICAgICAgY29uc3QgW2F2YWlsYWJsZUFwcHMsIGluc3RhbGxlZEFwcHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoWw0KICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hBdmFpbGFibGVBcHBzKCksDQogICAgICAgICAgICAgICAgdGhpcy5mZXRjaEluc3RhbGxlZEFwcHMoKQ0KICAgICAgICAgICAgXSk7DQoNCiAgICAgICAgICAgIHRoaXMuYXBwcyA9IGF2YWlsYWJsZUFwcHM7DQogICAgICAgICAgICB0aGlzLmluc3RhbGxlZEFwcHMgPSBpbnN0YWxsZWRBcHBzOw0KICAgICAgICAgICAgdGhpcy5maWx0ZXJlZEFwcHMgPSBuZXcgTWFwKHRoaXMuYXBwcyk7DQoNCiAgICAgICAgICAgIGlmICh0aGlzLmFwcHMuc2l6ZSA9PT0gMCkgew0KICAgICAgICAgICAgICAgIHRoaXMuc2hvd0VtcHR5KCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQXBwcygpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGFwcHM6JywgZXJyb3IpOw0KICAgICAgICAgICAgdGhpcy5zaG93RXJyb3IoZXJyb3IubWVzc2FnZSk7DQogICAgICAgIH0gZmluYWxseSB7DQogICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgYXN5bmMgZmV0Y2hBdmFpbGFibGVBcHBzKCkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS91cGRhdGVzL2xhdGVzdCcpOw0KICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIGFwcHM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ1JhdyBhdmFpbGFibGUgYXBwcyByZXNwb25zZTonLCBkYXRhKTsgLy8gRGVidWcgbG9nDQoNCiAgICAgICAgICAgIGlmICghZGF0YS5zdWNjZXNzIHx8ICFkYXRhLmFwcHMpIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVzcG9uc2UgZm9ybWF0Jyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnN0IGFwcHNNYXAgPSBuZXcgTWFwKCk7DQogICAgICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhLmFwcHMpLmZvckVhY2goKFthcHBJZCwgYXBwRGF0YV0pID0+IHsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBhdmFpbGFibGUgYXBwOiAke2FwcElkfSwgdmVyc2lvbjogJHthcHBEYXRhLnZlcnNpb259LCBmdWxsIGRhdGE6YCwgYXBwRGF0YSk7IC8vIERlYnVnIGxvZw0KICAgICAgICAgICAgICAgIGFwcHNNYXAuc2V0KGFwcElkLCB7DQogICAgICAgICAgICAgICAgICAgIGlkOiBhcHBJZCwNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5mb3JtYXRBcHBOYW1lKGFwcElkKSwNCiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogYXBwRGF0YS52ZXJzaW9uLA0KICAgICAgICAgICAgICAgICAgICBkb3dubG9hZF91cmw6IGFwcERhdGEuZG93bmxvYWRfdXJsLA0KICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogYXBwRGF0YS5maWxlbmFtZSwNCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuZ2VuZXJhdGVEZXNjcmlwdGlvbihhcHBJZCkNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBjb25zb2xlLmxvZygnRmluYWwgYXZhaWxhYmxlIGFwcHMgbWFwOicsIGFwcHNNYXApOyAvLyBEZWJ1ZyBsb2cNCiAgICAgICAgICAgIHJldHVybiBhcHBzTWFwOw0KICAgICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgYXZhaWxhYmxlIGFwcHM6JywgZXJyb3IpOw0KICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCBhdmFpbGFibGUgYXBwcy4gUGxlYXNlIGNoZWNrIHlvdXIgY29ubmVjdGlvbi4nKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGFzeW5jIGZldGNoSW5zdGFsbGVkQXBwcygpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvYXBwcycpOw0KICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIGluc3RhbGxlZCBhcHBzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29uc3QgYXBwcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSYXcgaW5zdGFsbGVkIGFwcHMgcmVzcG9uc2U6JywgYXBwcyk7IC8vIERlYnVnIGxvZw0KDQogICAgICAgICAgICBjb25zdCBpbnN0YWxsZWRNYXAgPSBuZXcgTWFwKCk7DQoNCiAgICAgICAgICAgIGFwcHMuZm9yRWFjaChhcHAgPT4gew0KICAgICAgICAgICAgICAgIGlmIChhcHAudHlwZSA9PT0gJ3VzZXJfYXBwJykgew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBpbnN0YWxsZWQgYXBwOiAke2FwcC5pZH0sIHZlcnNpb246ICR7YXBwLnZlcnNpb259LCBmdWxsIGFwcCBkYXRhOmAsIGFwcCk7IC8vIERlYnVnIGxvZw0KICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRNYXAuc2V0KGFwcC5pZCwgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogYXBwLnZlcnNpb24gfHwgJzEuMC4wJywgLy8gRGVmYXVsdCB2ZXJzaW9uIGlmIG5vdCBzcGVjaWZpZWQNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBhcHAuaWQNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGaW5hbCBpbnN0YWxsZWQgYXBwcyBtYXA6JywgaW5zdGFsbGVkTWFwKTsgLy8gRGVidWcgbG9nDQogICAgICAgICAgICByZXR1cm4gaW5zdGFsbGVkTWFwOw0KICAgICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgaW5zdGFsbGVkIGFwcHM6JywgZXJyb3IpOw0KICAgICAgICAgICAgLy8gRG9uJ3QgdGhyb3cgaGVyZSwganVzdCByZXR1cm4gZW1wdHkgbWFwIHNvIHdlIGNhbiBzdGlsbCBzaG93IGF2YWlsYWJsZSBhcHBzDQogICAgICAgICAgICByZXR1cm4gbmV3IE1hcCgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZm9ybWF0QXBwTmFtZShhcHBJZCkgew0KICAgICAgICByZXR1cm4gYXBwSWQuc3BsaXQoJ18nKS5tYXAod29yZCA9Pg0KICAgICAgICAgICAgd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkNCiAgICAgICAgKS5qb2luKCcgJyk7DQogICAgfQ0KDQogICAgZ2VuZXJhdGVEZXNjcmlwdGlvbihhcHBJZCkgew0KICAgICAgICBjb25zdCBkZXNjcmlwdGlvbnMgPSB7DQogICAgICAgICAgICBmbG93X2VkaXRvcjogJ1Zpc3VhbCBub2RlLWJhc2VkIHdvcmtmbG93IGVkaXRvciBmb3IgY3JlYXRpbmcgYW5kIGV4ZWN1dGluZyBkYXRhIHByb2Nlc3NpbmcgcGlwZWxpbmVzJywNCiAgICAgICAgICAgIGxsbV9jaGF0OiAnSW50ZXJhY3RpdmUgY2hhdCBpbnRlcmZhY2UgZm9yIGNvbW11bmljYXRpbmcgd2l0aCBsYXJnZSBsYW5ndWFnZSBtb2RlbHMnLA0KICAgICAgICAgICAgdGV4dF9lZGl0b3I6ICdTaW1wbGUgYW5kIGVmZmljaWVudCB0ZXh0IGVkaXRvciB3aXRoIHN5bnRheCBoaWdobGlnaHRpbmcgc3VwcG9ydCcsDQogICAgICAgICAgICB0aHJlZWpzX2V4YW1wbGU6ICdJbnRlcmFjdGl2ZSAzRCBncmFwaGljcyBkZW1vbnN0cmF0aW9uIHVzaW5nIFRocmVlLmpzIGxpYnJhcnknDQogICAgICAgIH07DQoNCiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uc1thcHBJZF0gfHwgYCR7dGhpcy5mb3JtYXRBcHBOYW1lKGFwcElkKX0gLSBBIHVzZWZ1bCBhcHBsaWNhdGlvbiBmb3IgU3lwbmV4IE9TYDsNCiAgICB9DQoNCiAgICBmaWx0ZXJBcHBzKHNlYXJjaFRlcm0pIHsNCiAgICAgICAgaWYgKCFzZWFyY2hUZXJtLnRyaW0oKSkgew0KICAgICAgICAgICAgdGhpcy5maWx0ZXJlZEFwcHMgPSBuZXcgTWFwKHRoaXMuYXBwcyk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBjb25zdCB0ZXJtID0gc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpOw0KICAgICAgICAgICAgdGhpcy5maWx0ZXJlZEFwcHMgPSBuZXcgTWFwKCk7DQoNCiAgICAgICAgICAgIHRoaXMuYXBwcy5mb3JFYWNoKChhcHAsIGFwcElkKSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKGFwcC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGVybSkgfHwNCiAgICAgICAgICAgICAgICAgICAgYXBwLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGVybSkgfHwNCiAgICAgICAgICAgICAgICAgICAgYXBwSWQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0ZXJtKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcmVkQXBwcy5zZXQoYXBwSWQsIGFwcCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGhpcy5maWx0ZXJlZEFwcHMuc2l6ZSA9PT0gMCkgew0KICAgICAgICAgICAgdGhpcy5zaG93RW1wdHkoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRoaXMucmVuZGVyQXBwcygpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmVuZGVyQXBwcygpIHsNCiAgICAgICAgY29uc3QgYXBwc0dyaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwcy1ncmlkJyk7DQogICAgICAgIGFwcHNHcmlkLmlubmVySFRNTCA9ICcnOw0KDQogICAgICAgIHRoaXMuZmlsdGVyZWRBcHBzLmZvckVhY2goKGFwcCwgYXBwSWQpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGFwcENhcmQgPSB0aGlzLmNyZWF0ZUFwcENhcmQoYXBwKTsNCiAgICAgICAgICAgIGFwcHNHcmlkLmFwcGVuZENoaWxkKGFwcENhcmQpOw0KICAgICAgICB9KTsNCg0KICAgICAgICB0aGlzLnNob3dBcHBzR3JpZCgpOw0KICAgIH0NCg0KICAgIGNyZWF0ZUFwcENhcmQoYXBwKSB7DQogICAgICAgIGNvbnN0IGluc3RhbGxlZEFwcCA9IHRoaXMuaW5zdGFsbGVkQXBwcy5nZXQoYXBwLmlkKTsNCiAgICAgICAgY29uc3QgaXNJbnN0YWxsZWQgPSBpbnN0YWxsZWRBcHAgIT09IHVuZGVmaW5lZDsNCiAgICAgICAgY29uc3QgbmVlZHNVcGRhdGUgPSBpc0luc3RhbGxlZCAmJiBpbnN0YWxsZWRBcHAudmVyc2lvbiAhPT0gYXBwLnZlcnNpb247DQoNCiAgICAgICAgLy8gRGVidWcgbG9nZ2luZyBmb3IgdmVyc2lvbiBjb21wYXJpc29uDQogICAgICAgIGlmIChpc0luc3RhbGxlZCkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coYFZlcnNpb24gY29tcGFyaXNvbiBmb3IgJHthcHAuaWR9OmAsIHsNCiAgICAgICAgICAgICAgICBhdmFpbGFibGVWZXJzaW9uOiBhcHAudmVyc2lvbiwNCiAgICAgICAgICAgICAgICBpbnN0YWxsZWRWZXJzaW9uOiBpbnN0YWxsZWRBcHAudmVyc2lvbiwNCiAgICAgICAgICAgICAgICBuZWVkc1VwZGF0ZTogbmVlZHNVcGRhdGUNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgbGV0IHN0YXR1c1RleHQsIHN0YXR1c0NsYXNzLCBidXR0b25UZXh0LCBidXR0b25DbGFzcywgYnV0dG9uSWNvbjsNCg0KICAgICAgICBpZiAoIWlzSW5zdGFsbGVkKSB7DQogICAgICAgICAgICBzdGF0dXNUZXh0ID0gJ05vdCBJbnN0YWxsZWQnOw0KICAgICAgICAgICAgc3RhdHVzQ2xhc3MgPSAnbm90LWluc3RhbGxlZCc7DQogICAgICAgICAgICBidXR0b25UZXh0ID0gJ0luc3RhbGwnOw0KICAgICAgICAgICAgYnV0dG9uQ2xhc3MgPSAnYnRuLXByaW1hcnknOw0KICAgICAgICAgICAgYnV0dG9uSWNvbiA9ICdmYS1kb3dubG9hZCc7DQogICAgICAgIH0gZWxzZSBpZiAobmVlZHNVcGRhdGUpIHsNCiAgICAgICAgICAgIHN0YXR1c1RleHQgPSBgSW5zdGFsbGVkICh2JHtpbnN0YWxsZWRBcHAudmVyc2lvbn0pIC0gVXBkYXRlIEF2YWlsYWJsZWA7DQogICAgICAgICAgICBzdGF0dXNDbGFzcyA9ICd1cGRhdGUtYXZhaWxhYmxlJzsNCiAgICAgICAgICAgIGJ1dHRvblRleHQgPSAnVXBkYXRlJzsNCiAgICAgICAgICAgIGJ1dHRvbkNsYXNzID0gJ2J0bi13YXJuaW5nJzsNCiAgICAgICAgICAgIGJ1dHRvbkljb24gPSAnZmEtYXJyb3ctdXAnOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICdJbnN0YWxsZWQnOw0KICAgICAgICAgICAgc3RhdHVzQ2xhc3MgPSAnaW5zdGFsbGVkJzsNCiAgICAgICAgICAgIGJ1dHRvblRleHQgPSAnSW5zdGFsbGVkJzsNCiAgICAgICAgICAgIGJ1dHRvbkNsYXNzID0gJ2J0bi1zZWNvbmRhcnknOw0KICAgICAgICAgICAgYnV0dG9uSWNvbiA9ICdmYS1jaGVjayc7DQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7DQogICAgICAgIGNhcmQuY2xhc3NOYW1lID0gJ2FwcC1jYXJkJzsNCiAgICAgICAgY2FyZC5pbm5lckhUTUwgPSBgDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcHAtY2FyZC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFwcC1pY29uIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9IiR7dGhpcy5nZXRBcHBJY29uKGFwcC5pZCl9Ij48L2k+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXBwLWluZm8iPg0KICAgICAgICAgICAgICAgICAgICA8aDM+JHthcHAubmFtZX08L2gzPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYXBwLXZlcnNpb24iPnYke2FwcC52ZXJzaW9ufTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXBwLWRlc2NyaXB0aW9uIj4NCiAgICAgICAgICAgICAgICAke2FwcC5kZXNjcmlwdGlvbn0NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXBwLWFjdGlvbnMiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFwcC1zdGF0dXMgJHtzdGF0dXNDbGFzc30iPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzICR7aXNJbnN0YWxsZWQgPyAnZmEtY2hlY2stY2lyY2xlJyA6ICdmYS1jaXJjbGUnfSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAke3N0YXR1c1RleHR9DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSAke2J1dHRvbkNsYXNzfSIgDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFwcC1pZD0iJHthcHAuaWR9IiANCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZG93bmxvYWQtdXJsPSIke2FwcC5kb3dubG9hZF91cmx9Ig0KICAgICAgICAgICAgICAgICAgICAgICAgJHsoIWlzSW5zdGFsbGVkIHx8IG5lZWRzVXBkYXRlKSA/ICcnIDogJ2Rpc2FibGVkJ30+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgJHtidXR0b25JY29ufSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAke2J1dHRvblRleHR9DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgYDsNCg0KICAgICAgICAvLyBBZGQgaW5zdGFsbC91cGRhdGUgYnV0dG9uIGV2ZW50IGxpc3RlbmVyDQogICAgICAgIGlmICghaXNJbnN0YWxsZWQgfHwgbmVlZHNVcGRhdGUpIHsNCiAgICAgICAgICAgIGNvbnN0IGFjdGlvbkJ0biA9IGNhcmQucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7DQogICAgICAgICAgICBhY3Rpb25CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7DQogICAgICAgICAgICAgICAgdGhpcy5pbnN0YWxsQXBwKGFwcC5pZCwgYXBwLmRvd25sb2FkX3VybCwgYWN0aW9uQnRuLCBuZWVkc1VwZGF0ZSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBjYXJkOw0KICAgIH0NCg0KICAgIGdldEFwcEljb24oYXBwSWQpIHsNCiAgICAgICAgY29uc3QgaWNvbnMgPSB7DQogICAgICAgICAgICBmbG93X2VkaXRvcjogJ2ZhLXByb2plY3QtZGlhZ3JhbScsDQogICAgICAgICAgICBsbG1fY2hhdDogJ2ZhLWNvbW1lbnRzJywNCiAgICAgICAgICAgIHRleHRfZWRpdG9yOiAnZmEtZWRpdCcsDQogICAgICAgICAgICB0aHJlZWpzX2V4YW1wbGU6ICdmYS1jdWJlJw0KICAgICAgICB9Ow0KDQogICAgICAgIHJldHVybiBgZmFzICR7aWNvbnNbYXBwSWRdIHx8ICdmYS1wdXp6bGUtcGllY2UnfWA7DQogICAgfQ0KDQogICAgYXN5bmMgaW5zdGFsbEFwcChhcHBJZCwgZG93bmxvYWRVcmwsIGJ1dHRvbiwgaXNVcGRhdGUgPSBmYWxzZSkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIHN0YXRlDQogICAgICAgICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBidXR0b24uaW5uZXJIVE1MOw0KICAgICAgICAgICAgY29uc3QgYWN0aW9uVGV4dCA9IGlzVXBkYXRlID8gJ1VwZGF0aW5nJyA6ICdJbnN0YWxsaW5nJzsNCiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGkgY2xhc3M9ImZhcyBmYS1zcGlubmVyIGZhLXNwaW4iPjwvaT4gJHthY3Rpb25UZXh0fS4uLmA7DQogICAgICAgICAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlOw0KDQogICAgICAgICAgICAvLyBVc2UgdGhlIHVwZGF0ZSBlbmRwb2ludCB0byBpbnN0YWxsIHRoZSBhcHAgKGl0IGhhbmRsZXMgZG93bmxvYWRzIGZyb20gVVJMcykNCiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvdXNlci1hcHBzL3VwZGF0ZS8ke2FwcElkfWAsIHsNCiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywNCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7DQogICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRfdXJsOiBkb3dubG9hZFVybA0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOw0KDQogICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHsNCiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzVGV4dCA9IGlzVXBkYXRlID8gJ3VwZGF0ZWQnIDogJ2luc3RhbGxlZCc7DQogICAgICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbihgJHtyZXN1bHQuYXBwX25hbWUgfHwgYXBwSWR9ICR7c3VjY2Vzc1RleHR9IHN1Y2Nlc3NmdWxseSFgLCAnc3VjY2VzcycpOw0KDQogICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBsb2NhbCBzdGF0ZSB0byByZWZsZWN0IHRoZSBpbnN0YWxsYXRpb24vdXBkYXRlDQogICAgICAgICAgICAgICAgdGhpcy5pbnN0YWxsZWRBcHBzLnNldChhcHBJZCwgew0KICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLmFwcHMuZ2V0KGFwcElkKS52ZXJzaW9uLA0KICAgICAgICAgICAgICAgICAgICBpZDogYXBwSWQNCiAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBidXR0b24gc3RhdGUNCiAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPSJmYXMgZmEtY2hlY2siPjwvaT4gSW5zdGFsbGVkJzsNCiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NOYW1lID0gJ2J0biBidG4tc20gYnRuLXNlY29uZGFyeSc7DQogICAgICAgICAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTsNCg0KICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGF0dXMgaW5kaWNhdG9yDQogICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzRWxlbWVudCA9IGJ1dHRvbi5jbG9zZXN0KCcuYXBwLWNhcmQnKS5xdWVyeVNlbGVjdG9yKCcuYXBwLXN0YXR1cycpOw0KICAgICAgICAgICAgICAgIHN0YXR1c0VsZW1lbnQuY2xhc3NOYW1lID0gJ2FwcC1zdGF0dXMgaW5zdGFsbGVkJzsNCiAgICAgICAgICAgICAgICBzdGF0dXNFbGVtZW50LmlubmVySFRNTCA9ICc8aSBjbGFzcz0iZmFzIGZhLWNoZWNrLWNpcmNsZSI+PC9pPiBJbnN0YWxsZWQnOw0KDQogICAgICAgICAgICAgICAgLy8gUmVmcmVzaCB0aGUgYXBwIHJlZ2lzdHJ5DQogICAgICAgICAgICAgICAgYXdhaXQgZmV0Y2goJy9hcGkvdXNlci1hcHBzL3JlZnJlc2gnLCB7IG1ldGhvZDogJ1BPU1QnIH0pOw0KDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuZXJyb3IgfHwgYCR7aXNVcGRhdGUgPyAnVXBkYXRlJyA6ICdJbnN0YWxsYXRpb24nfSBmYWlsZWRgKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtpc1VwZGF0ZSA/ICdVcGRhdGUnIDogJ0luc3RhbGxhdGlvbid9IGVycm9yOmAsIGVycm9yKTsNCiAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oYCR7aXNVcGRhdGUgPyAnVXBkYXRlJyA6ICdJbnN0YWxsYXRpb24nfSBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTsNCg0KICAgICAgICAgICAgLy8gUmVzdG9yZSBidXR0b24gc3RhdGUNCiAgICAgICAgICAgIGNvbnN0IGFjdGlvblRleHQgPSBpc1VwZGF0ZSA/ICdVcGRhdGUnIDogJ0luc3RhbGwnOw0KICAgICAgICAgICAgY29uc3QgaWNvbkNsYXNzID0gaXNVcGRhdGUgPyAnZmEtYXJyb3ctdXAnIDogJ2ZhLWRvd25sb2FkJzsNCiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGkgY2xhc3M9ImZhcyAke2ljb25DbGFzc30iPjwvaT4gJHthY3Rpb25UZXh0fWA7DQogICAgICAgICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHNob3dMb2FkaW5nKCkgew0KICAgICAgICB0aGlzLmhpZGVBbGxTdGF0ZXMoKTsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmctc3RhdGUnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOw0KICAgIH0NCg0KICAgIHNob3dFcnJvcihtZXNzYWdlKSB7DQogICAgICAgIHRoaXMuaGlkZUFsbFN0YXRlcygpOw0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXJyb3ItbWVzc2FnZScpLnRleHRDb250ZW50ID0gbWVzc2FnZTsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9yLXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JzsNCiAgICB9DQoNCiAgICBzaG93RW1wdHkoKSB7DQogICAgICAgIHRoaXMuaGlkZUFsbFN0YXRlcygpOw0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1wdHktc3RhdGUnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOw0KICAgIH0NCg0KICAgIHNob3dBcHBzR3JpZCgpIHsNCiAgICAgICAgdGhpcy5oaWRlQWxsU3RhdGVzKCk7DQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHBzLWdyaWQnKS5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnOw0KICAgIH0NCg0KICAgIGhpZGVBbGxTdGF0ZXMoKSB7DQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nLXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9yLXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtcHR5LXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcHMtZ3JpZCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7DQogICAgfQ0KfQ0KDQovLyBJbml0aWFsaXplIHRoZSBhcHAgc3RvcmUgd2hlbiB0aGUgc2NyaXB0IGxvYWRzDQpjb25zdCBhcHBTdG9yZSA9IG5ldyBBcHBTdG9yZSgpOw0KPC9zY3JpcHQ+"
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-23T01:06:16.548141",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\app_store"
  }
}