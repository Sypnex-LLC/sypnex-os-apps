{
  "app_metadata": {
    "id": "audio_player",
    "name": "Audio Player",
    "description": "A simple audio player for playing music and audio files from the VFS with playback controls and metadata display",
    "icon": "fas fa-music",
    "keywords": [
      "audio_player",
      "audio",
      "music",
      "player",
      "mp3",
      "wav",
      "media",
      "sound"
    ],
    "author": "Sypnex OS",
    "version": "1.0.0",
    "type": "user_app",
    "scripts": [
      "script.js"
    ],
    "styles": [
      "style.css"
    ],
    "settings": []
  },
  "files": {
    "audio_player.app": "ew0KICAiaWQiOiAiYXVkaW9fcGxheWVyIiwNCiAgIm5hbWUiOiAiQXVkaW8gUGxheWVyIiwNCiAgImRlc2NyaXB0aW9uIjogIkEgc2ltcGxlIGF1ZGlvIHBsYXllciBmb3IgcGxheWluZyBtdXNpYyBhbmQgYXVkaW8gZmlsZXMgZnJvbSB0aGUgVkZTIHdpdGggcGxheWJhY2sgY29udHJvbHMgYW5kIG1ldGFkYXRhIGRpc3BsYXkiLA0KICAiaWNvbiI6ICJmYXMgZmEtbXVzaWMiLA0KICAia2V5d29yZHMiOiBbDQogICAgImF1ZGlvX3BsYXllciIsDQogICAgImF1ZGlvIiwNCiAgICAibXVzaWMiLCANCiAgICAicGxheWVyIiwNCiAgICAibXAzIiwNCiAgICAid2F2IiwNCiAgICAibWVkaWEiLA0KICAgICJzb3VuZCINCiAgXSwNCiAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAidmVyc2lvbiI6ICIxLjAuMCIsDQogICJ0eXBlIjogInVzZXJfYXBwIiwNCiAgInNjcmlwdHMiOiBbDQogICAgInNjcmlwdC5qcyINCiAgXSwNCiAgInN0eWxlcyI6IFsNCiAgICAic3R5bGUuY3NzIg0KICBdLA0KICAic2V0dGluZ3MiOiBbXQ0KfQ==",
    "audio_player.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-09T18:24:24.015307",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\audio_player"
  }
}