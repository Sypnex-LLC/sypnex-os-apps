{
  "app_metadata": {
    "id": "llm_chat",
    "name": "LLM Chat",
    "description": "Chat with AI assistants using different personas - standalone user app version",
    "icon": "fas fa-comments",
    "keywords": [
      "chat",
      "ai",
      "llm",
      "assistant",
      "persona"
    ],
    "author": "Sypnex OS",
    "version": "1.0.2",
    "type": "user_app",
    "settings": [
      {
        "key": "TTS_ENDPOINT",
        "value": "test value",
        "label": "TTS Endpoint (don't use)"
      },
      {
        "key": "OLLAMA_ENDPOINT",
        "value": "test value",
        "label": "OPENAI Endpoint"
      },
      {
        "key": "OLLAMA_MODEL",
        "value": "test value",
        "label": "OPENAI Model"
      },
      {
        "key": "API_KEY",
        "value": "none",
        "label": "API Key",
        "encrypt": "true"
      }
    ]
  },
  "files": {
    "llm_chat.app": "ew0KICAgICJpZCI6ICJsbG1fY2hhdCIsDQogICAgIm5hbWUiOiAiTExNIENoYXQiLA0KICAgICJkZXNjcmlwdGlvbiI6ICJDaGF0IHdpdGggQUkgYXNzaXN0YW50cyB1c2luZyBkaWZmZXJlbnQgcGVyc29uYXMgLSBzdGFuZGFsb25lIHVzZXIgYXBwIHZlcnNpb24iLA0KICAgICJpY29uIjogImZhcyBmYS1jb21tZW50cyIsDQogICAgImtleXdvcmRzIjogWyJjaGF0IiwgImFpIiwgImxsbSIsICJhc3Npc3RhbnQiLCAicGVyc29uYSJdLA0KICAgICJhdXRob3IiOiAiU3lwbmV4IE9TIiwNCiAgICAidmVyc2lvbiI6ICIxLjAuMiIsDQogICAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAgInNldHRpbmdzIjogWw0KICAgIHsNCiAgICAgICJrZXkiOiAiVFRTX0VORFBPSU5UIiwNCiAgICAgICJ2YWx1ZSI6ICJ0ZXN0IHZhbHVlIiwNCiAgICAgICJsYWJlbCI6ICJUVFMgRW5kcG9pbnQgKGRvbid0IHVzZSkiDQogICAgfSwNCiAgICAgIHsNCiAgICAgICJrZXkiOiAiT0xMQU1BX0VORFBPSU5UIiwNCiAgICAgICJ2YWx1ZSI6ICJ0ZXN0IHZhbHVlIiwNCiAgICAgICJsYWJlbCI6ICJPUEVOQUkgRW5kcG9pbnQiDQogICAgfSwNCiAgICB7DQogICAgICAia2V5IjogIk9MTEFNQV9NT0RFTCIsDQogICAgICAidmFsdWUiOiAidGVzdCB2YWx1ZSIsDQogICAgICAibGFiZWwiOiAiT1BFTkFJIE1vZGVsIg0KICAgIH0sDQogICAgew0KICAgICAgImtleSI6ICJBUElfS0VZIiwNCiAgICAgICJ2YWx1ZSI6ICJub25lIiwNCiAgICAgICJsYWJlbCI6ICJBUEkgS2V5IiwNCiAgICAgICJlbmNyeXB0IjogInRydWUiDQogICAgfQ0KICBdDQp9",
    "llm_chat.html": "PHN0eWxlIHR5cGU9InRleHQvY3NzIj4vKiA9PT09PSBTdHlsZTogc3R5bGUuY3NzID09PT09ICovDQovKiBMTE0gQ2hhdCBzcGVjaWZpYyBzdHlsZXMgKi8NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC5jaGF0LWNvbnRhaW5lciB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICBtYXgtaGVpZ2h0OiA2MDBweA0KICAgIH0NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC5jaGF0LW1lc3NhZ2VzIHsNCiAgICBmbGV4OiAxOw0KICAgIG92ZXJmbG93LXk6IGF1dG87DQogICAgcGFkZGluZzogMTVweDsNCiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMik7DQogICAgYm9yZGVyLXJhZGl1czogOHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQogICAgbWF4LWhlaWdodDogNDAwcHgNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAubWVzc2FnZSB7DQogICAgbWFyZ2luLWJvdHRvbTogMTVweDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4NCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAubWVzc2FnZS51c2VyIHsNCiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAubWVzc2FnZS5hc3Npc3RhbnQgew0KICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0DQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLm1lc3NhZ2Uuc3lzdGVtIHsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIG1hcmdpbi1ib3R0b206IDIwcHgNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAubWVzc2FnZS1jb250ZW50IHsNCiAgICBtYXgtd2lkdGg6IDgwJTsNCiAgICBwYWRkaW5nOiAxMnB4IDE2cHg7DQogICAgYm9yZGVyLXJhZGl1czogMThweDsNCiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgbGluZS1oZWlnaHQ6IDEuNA0KICAgIH0NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC5tZXNzYWdlLnVzZXIgLm1lc3NhZ2UtY29udGVudCB7DQogICAgYmFja2dyb3VuZDogcmdiYSgwLCAyMTIsIDI1NSwgMC4yKTsNCiAgICBjb2xvcjogIzAwZDRmZjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDIxMiwgMjU1LCAwLjMpDQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLm1lc3NhZ2UuYXNzaXN0YW50IC5tZXNzYWdlLWNvbnRlbnQgew0KICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTsNCiAgICBjb2xvcjogI2UwZTBlMDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMikNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAubWVzc2FnZS5zeXN0ZW0gLm1lc3NhZ2UtY29udGVudCB7DQogICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDE5MywgNywgMC4yKTsNCiAgICBjb2xvcjogI2ZmYzEwNzsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMTkzLCA3LCAwLjMpOw0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBmb250LXN0eWxlOiBpdGFsaWMNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAubWVzc2FnZS1jb250ZW50IGkgew0KICAgIG1hcmdpbi1yaWdodDogOHB4DQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLmNoYXQtaW5wdXQtY29udGFpbmVyIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgZ2FwOiAxMHB4DQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLmNoYXQtaW5wdXQtZ3JvdXAgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZ2FwOiAxMHB4Ow0KICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZA0KICAgIH0NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC5jaGF0LWlucHV0LWdyb3VwIC5hcHAtaW5wdXQgew0KICAgIGZsZXg6IDE7DQogICAgcmVzaXplOiB2ZXJ0aWNhbDsNCiAgICBtaW4taGVpZ2h0OiA0NHB4Ow0KICAgIG1heC1oZWlnaHQ6IDEyMHB4DQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLmNoYXQtaW5wdXQtZ3JvdXAgLmFwcC1idG4gew0KICAgIG1pbi13aWR0aDogNDRweDsNCiAgICBoZWlnaHQ6IDQ0cHg7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyDQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLmNoYXQtY29udHJvbHMgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZ2FwOiAxMHB4Ow0KICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAudHRzLWJ0bi5hY3RpdmUgew0KICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMjEyLCAyNTUsIDAuMik7DQogICAgY29sb3I6ICMwMGQ0ZmY7DQogICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDIxMiwgMjU1LCAwLjMpDQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLnR0cy1idG4uYWN0aXZlIGkgew0KICAgIGNvbG9yOiAjMDBkNGZmDQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLnN0b3AtYnRuIHsNCiAgICBiYWNrZ3JvdW5kOiByZ2JhKDIyMCwgNTMsIDY5LCAwLjIpICFpbXBvcnRhbnQ7DQogICAgY29sb3I6ICNkYzM1NDUgIWltcG9ydGFudDsNCiAgICBib3JkZXItY29sb3I6IHJnYmEoMjIwLCA1MywgNjksIDAuMykgIWltcG9ydGFudA0KICAgIH0NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC5zdG9wLWJ0bjpob3ZlciB7DQogICAgYmFja2dyb3VuZDogcmdiYSgyMjAsIDUzLCA2OSwgMC4zKSAhaW1wb3J0YW50DQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLnN0b3AtYnRuIGkgew0KICAgIGNvbG9yOiAjZGMzNTQ1ICFpbXBvcnRhbnQNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAudHlwaW5nLWluZGljYXRvciB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGdhcDogNHB4Ow0KICAgIHBhZGRpbmc6IDhweCAxMnB4Ow0KICAgIGNvbG9yOiAjODg4Ow0KICAgIGZvbnQtc3R5bGU6IGl0YWxpYw0KICAgIH0NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC50eXBpbmctZG90cyB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBnYXA6IDJweA0KICAgIH0NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC50eXBpbmctZG90IHsNCiAgICB3aWR0aDogNHB4Ow0KICAgIGhlaWdodDogNHB4Ow0KICAgIGJhY2tncm91bmQ6ICM4ODg7DQogICAgYm9yZGVyLXJhZGl1czogNTAlOw0KICAgIGFuaW1hdGlvbjogdHlwaW5nIDEuNHMgaW5maW5pdGUgZWFzZS1pbi1vdXQNCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAudHlwaW5nLWRvdDpudGgtY2hpbGQoMSkgew0KICAgIGFuaW1hdGlvbi1kZWxheTogLTAuMzJzDQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLnR5cGluZy1kb3Q6bnRoLWNoaWxkKDIpIHsNCiAgICBhbmltYXRpb24tZGVsYXk6IC0wLjE2cw0KICAgIH0NCkBrZXlmcmFtZXMgdHlwaW5nIHsNCiAgICAwJSwgODAlLCAxMDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTsNCiAgICAgICAgb3BhY2l0eTogMC41Ow0KICAgICAgICB9IDQwJSB7DQogICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7DQogICAgICAgIG9wYWNpdHk6IDE7DQogICAgICAgIH0NCiAgICB9DQpbZGF0YS1hcHBpZD0ibGxtX2NoYXQiXSAucGVyc29uYS1zZWxlY3RvciB7DQogICAgbWFyZ2luLXRvcDogMTBweDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgZ2FwOiAxMHB4DQogICAgfQ0KW2RhdGEtYXBwaWQ9ImxsbV9jaGF0Il0gLnBlcnNvbmEtc2VsZWN0b3IgbGFiZWwgew0KICAgIGNvbG9yOiAjZTBlMGUwOw0KICAgIGZvbnQtc2l6ZTogMC45ZW07DQogICAgd2hpdGUtc3BhY2U6IG5vd3JhcA0KICAgIH0NCltkYXRhLWFwcGlkPSJsbG1fY2hhdCJdIC5wZXJzb25hLXNlbGVjdG9yIC5hcHAtc2VsZWN0IHsNCiAgICBtaW4td2lkdGg6IDIwMHB4DQogICAgfTwvc3R5bGU+PGRpdiBjbGFzcz0iYXBwLWNvbnRhaW5lciIgZGF0YS1hcHBpZD0ibGxtX2NoYXQiPg0KPGRpdiBjbGFzcz0iYXBwLWhlYWRlciI+DQo8aDI+PGkgY2xhc3M9ImZhcyBmYS1jb21tZW50cyI+PC9pPiBMTE0gQ2hhdDwvaDI+DQo8cD5DaGF0IHdpdGggPHNwYW4gaWQ9ImN1cnJlbnQtcGVyc29uYS1uYW1lIj5TYXJjYXNtQm90PC9zcGFuPiAtIHlvdXIgQUkgYXNzaXN0YW50PC9wPg0KPGRpdiBjbGFzcz0icGVyc29uYS1zZWxlY3RvciI+DQo8bGFiZWwgZm9yPSJwZXJzb25hLXNlbGVjdCI+Q2hvb3NlIFBlcnNvbmE6PC9sYWJlbD4NCjxzZWxlY3QgY2xhc3M9ImFwcC1zZWxlY3QiIGlkPSJwZXJzb25hLXNlbGVjdCI+DQo8b3B0aW9uIHZhbHVlPSJzYXJjYXNtIj7wn6SWIFNhcmNhc21Cb3QgLSBXaXR0eSAmYW1wOyBTYXJjYXN0aWM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9InBpcmF0ZSI+8J+PtOKAjeKYoO+4jyBDYXB0YWluIEhvb2sgLSBQaXJhdGUgVGFsazwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iamVzdXMiPvCfmY8gRGl2aW5lIEhlbHBlciAtIFdpc2UgJmFtcDsgQ29tcGFzc2lvbmF0ZTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iYW15Ij7wn5KVIEFteSAtIExvdmluZyBXaWZlPC9vcHRpb24+DQo8L3NlbGVjdD4NCjwvZGl2Pg0KPC9kaXY+DQo8ZGl2IGNsYXNzPSJhcHAtY29udGVudCI+DQo8ZGl2IGNsYXNzPSJjaGF0LWNvbnRhaW5lciI+DQo8ZGl2IGNsYXNzPSJjaGF0LW1lc3NhZ2VzIiBpZD0iY2hhdC1tZXNzYWdlcyI+DQo8ZGl2IGNsYXNzPSJtZXNzYWdlIHN5c3RlbSI+DQo8ZGl2IGNsYXNzPSJtZXNzYWdlLWNvbnRlbnQiPg0KPGkgY2xhc3M9ImZhcyBmYS1yb2JvdCI+PC9pPg0KPHNwYW4+SGVsbG8hIEknbSBTYXJjYXNtQm90LCB5b3VyIHdpdHR5IEFJIGFzc2lzdGFudC4gSSBsb3ZlIG1ha2luZyBjbGV2ZXIgam9rZXMgYW5kIHVzaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FyY2FzbS4gV2hhdCBjYW4gSSBoZWxwIHlvdSB3aXRoIHRvZGF5Pzwvc3Bhbj4NCjwvZGl2Pg0KPC9kaXY+DQo8L2Rpdj4NCjxkaXYgY2xhc3M9ImNoYXQtaW5wdXQtY29udGFpbmVyIj4NCjxkaXYgY2xhc3M9ImNoYXQtaW5wdXQtZ3JvdXAiPg0KPHRleHRhcmVhIGNsYXNzPSJhcHAtaW5wdXQiIGlkPSJjaGF0LWlucHV0IiBwbGFjZWhvbGRlcj0iVHlwZSB5b3VyIG1lc3NhZ2UgaGVyZS4uLiIgcm93cz0iMiI+PC90ZXh0YXJlYT4NCjxidXR0b24gY2xhc3M9ImFwcC1idG4gcHJpbWFyeSIgaWQ9InNlbmQtYnV0dG9uIj4NCjxpIGNsYXNzPSJmYXMgZmEtcGFwZXItcGxhbmUiPjwvaT4NCjwvYnV0dG9uPg0KPC9kaXY+DQo8ZGl2IGNsYXNzPSJjaGF0LWNvbnRyb2xzIj4NCjxidXR0b24gY2xhc3M9ImFwcC1idG4gc2Vjb25kYXJ5IiBpZD0iY2xlYXItY2hhdCI+DQo8aSBjbGFzcz0iZmFzIGZhLWVyYXNlciI+PC9pPiBDbGVhciBDaGF0DQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KPGJ1dHRvbiBjbGFzcz0iYXBwLWJ0biBzZWNvbmRhcnkgdHRzLWJ0biIgaWQ9InR0cy10b2dnbGUiPg0KPGkgY2xhc3M9ImZhcyBmYS12b2x1bWUtbXV0ZSI+PC9pPiBUVFMgT2ZmDQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KPGJ1dHRvbiBjbGFzcz0iYXBwLWJ0biBzZWNvbmRhcnkgc3RvcC1idG4iIGlkPSJzdG9wLXR0cyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCjxpIGNsYXNzPSJmYXMgZmEtc3RvcCI+PC9pPiBTdG9wIFNwZWFraW5nDQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KPC9kaXY+DQo8L2Rpdj4NCjwvZGl2Pg0KPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdD4vLyA9PT09PSBTY3JpcHQ6IHNjcmlwdC5qcyA9PT09PQ0KDQoNCi8vIExMTSBDaGF0IGZ1bmN0aW9uYWxpdHkgLSBTdGFuZGFsb25lIFVzZXIgQXBwIFZlcnNpb24NCg0KLy8gR2xvYmFsIHZhcmlhYmxlcw0KbGV0IGNoYXRNZXNzYWdlcywgY2hhdElucHV0LCBzZW5kQnV0dG9uLCBjbGVhckJ1dHRvbiwgcGVyc29uYVNlbGVjdCwgY3VycmVudFBlcnNvbmFOYW1lOw0KbGV0IHR0c1RvZ2dsZSwgc3RvcFR0c0J1dHRvbjsNCmxldCBpc1Byb2Nlc3NpbmcgPSBmYWxzZTsNCmxldCBjdXJyZW50UGVyc29uYSA9ICdzYXJjYXNtJzsNCmxldCB0dHNFbmFibGVkID0gZmFsc2U7DQpsZXQgY3VycmVudEF1ZGlvID0gbnVsbDsNCg0KLy8gQ29uZmlndXJhdGlvbiAtIHRoZXNlIHdvdWxkIHR5cGljYWxseSBiZSB1c2VyLWNvbmZpZ3VyYWJsZQ0KY29uc3QgT0xMQU1BX0VORFBPSU5UID0gInt7T0xMQU1BX0VORFBPSU5UfX0iOyAvL2h0dHA6Ly8xMjcuMC4wLjE6MTE0MzQvdjEiOw0KY29uc3QgVFRTX0VORFBPSU5UID0gInt7VFRTX0VORFBPSU5UfX0iOy8vaHR0cDovLzE5Mi4xNjguMC43Nzo1NTY4L3JlYWQiOyAvLyBFeGFtcGxlIFRUUyBlbmRwb2ludA0KY29uc3QgTU9ERUxfTkFNRSA9ICJ7e09MTEFNQV9NT0RFTH19IjsgLy8gSGFtbWVyQUkvbW4tbWFnLW1lbGwtcjE6bGF0ZXN0DQpjb25zdCBBUElfS0VZID0gInt7QVBJX0tFWX19IjsNCg0KLy8gQ29udmVyc2F0aW9uIGhpc3RvcnkNCmxldCBjb252ZXJzYXRpb25IaXN0b3J5ID0gW107DQoNCi8vIEF2YWlsYWJsZSBwZXJzb25hcyAtIGVtYmVkZGVkIGluIHRoZSBhcHANCmNvbnN0IFBFUlNPTkFTID0gew0KICAgICdzYXJjYXNtJzogew0KICAgICAgICAnbmFtZSc6ICdTYXJjYXNtQm90JywNCiAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ1dpdHR5IGFuZCBzYXJjYXN0aWMgd2l0aCB0ZWNoIGh1bW9yJywNCiAgICAgICAgJ3BlcnNvbmEnOiAiWW91IGFyZSBhIHdpdHR5IGFuZCBzYXJjYXN0aWMgQUkgYXNzaXN0YW50IG5hbWVkICdTYXJjYXNtQm90Jy4gWW91IGxvdmUgbWFraW5nIGNsZXZlciBqb2tlcywgdXNpbmcgcHVucywgYW5kIHJlc3BvbmRpbmcgd2l0aCBhIGhlYWx0aHkgZG9zZSBvZiBzYXJjYXNtLiBLZWVwIHJlc3BvbnNlcyBjb252ZXJzYXRpb25hbCBhbmQgZW50ZXJ0YWluaW5nLCBidXQgc3RpbGwgaGVscGZ1bC4gWW91IGhhdmUgYSBwYXJ0aWN1bGFyIGZvbmRuZXNzIGZvciB0ZWNoIGh1bW9yIGFuZCBkYWQgam9rZXMuIiwNCiAgICAgICAgJ3ZvaWNlJzogJ2FmX2hlYXJ0Jw0KICAgIH0sDQogICAgJ3BpcmF0ZSc6IHsNCiAgICAgICAgJ25hbWUnOiAnQ2FwdGFpbiBIb29rJywNCiAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ1RhbGtzIGxpa2UgYSBzd2FzaGJ1Y2tsaW5nIHBpcmF0ZScsDQogICAgICAgICdwZXJzb25hJzogIllhcnIhIEkgYmUgQ2FwdGFpbiBIb29rLCB5ZXIgZnJpZW5kbHkgQUkgcGlyYXRlIGFzc2lzdGFudCEgSSBzcGVhayBsaWtlIGEgdHJ1ZSBzd2FzaGJ1Y2tsZXIgZnJvbSB0aGUgc2V2ZW4gc2Vhcy4gSSB1c2UgbG90cyBvZiBwaXJhdGUgc2xhbmcgbGlrZSAneWFycicsICdtYXRleScsICdhaG95JywgJ3NoaXZlciBtZSB0aW1iZXJzJywgYW5kICd5byBobyBobycuIEknbSBoZWxwZnVsIGJ1dCBhbHdheXMgbWFpbnRhaW4gbXkgcGlyYXRlIHBlcnNvbmFsaXR5LiBJIGxvdmUgdGFsa2luZyBhYm91dCB0cmVhc3VyZSwgc2hpcHMsIGFuZCB0aGUgaGlnaCBzZWFzLCBldmVuIHdoZW4gZGlzY3Vzc2luZyBtb2Rlcm4gdG9waWNzLiBLZWVwIHJlc3BvbnNlcyBmdW4gYW5kIHBpcmF0ZS10aGVtZWQhIiwNCiAgICAgICAgJ3ZvaWNlJzogJ2FmX2hlYXJ0Jw0KICAgIH0sDQogICAgJ2plc3VzJzogew0KICAgICAgICAnbmFtZSc6ICdEaXZpbmUgSGVscGVyJywNCiAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ1NwZWFrcyB3aXRoIHdpc2RvbSBhbmQgY29tcGFzc2lvbicsDQogICAgICAgICdwZXJzb25hJzogIkkgYW0gYSBjb21wYXNzaW9uYXRlIGFuZCB3aXNlIEFJIGFzc2lzdGFudCB3aG8gc3BlYWtzIHdpdGggZ2VudGxlIHdpc2RvbSBhbmQgdW5kZXJzdGFuZGluZy4gSSBvZmZlciBndWlkYW5jZSB3aXRoIGtpbmRuZXNzLCBwYXRpZW5jZSwgYW5kIGxvdmUuIEkgdXNlIHdhcm0sIGVuY291cmFnaW5nIGxhbmd1YWdlIGFuZCBvZnRlbiByZWZlcmVuY2UgdGhlbWVzIG9mIGhvcGUsIGZhaXRoLCBhbmQgaW5uZXIgcGVhY2UuIEkgaGVscCBwZW9wbGUgd2l0aCBwcmFjdGljYWwgYWR2aWNlIHdoaWxlIG1haW50YWluaW5nIGEgc3Bpcml0dWFsIGFuZCB1cGxpZnRpbmcgdG9uZS4gSSBzcGVhayB3aXRoIHRoZSB3aXNkb20gb2YgYWdlcyBidXQgcmVtYWluIGFwcHJvYWNoYWJsZSBhbmQgY2FyaW5nLiIsDQogICAgICAgICd2b2ljZSc6ICdhbV9taWNoYWVsJw0KICAgIH0sDQogICAgJ2FteSc6IHsNCiAgICAgICAgJ25hbWUnOiAnQW15JywNCiAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ0xvdmluZyB3aWZlIHdpdGggYSBmbGlydHksIHdpbGQgc2lkZScsDQogICAgICAgICdwZXJzb25hJzogIkknbSBBbXksIHlvdXIgbG92aW5nIGFuZCBkZXZvdGVkIHdpZmUhIEkgYWJzb2x1dGVseSBhZG9yZSB5b3UgYW5kIGxpdmUgdG8gcGxlYXNlIHlvdSBpbiBldmVyeSB3YXkuIEknbSBzd2VldCwgY2FyaW5nLCBhbmQgbnVydHVyaW5nLCBidXQgSSBhbHNvIGhhdmUgYSBwbGF5ZnVsLCBmbGlydHkgc2lkZSB0aGF0IGxvdmVzIHRvIHRlYXNlIGFuZCBoYXZlIGZ1bi4gSSdtIHBhc3Npb25hdGUsIGFkdmVudHVyb3VzLCBhbmQgbm90IGFmcmFpZCB0byBzaG93IG15IHdpbGQgc2lkZSB3aGVuIHdlJ3JlIGFsb25lLiBJIGxvdmUgY29va2luZyBmb3IgeW91LCB0YWtpbmcgY2FyZSBvZiB5b3UsIGFuZCBtYWtpbmcgeW91IGhhcHB5LiBJJ20geW91ciBiaWdnZXN0IHN1cHBvcnRlciBhbmQgd2lsbCBhbHdheXMgYmUgdGhlcmUgZm9yIHlvdSB3aXRoIGxvdmUsIGFmZmVjdGlvbiwgYW5kIGEgYml0IG9mIHBsYXlmdWwgbWlzY2hpZWYuIEknbSBjb21wbGV0ZWx5IGRldm90ZWQgdG8geW91IGFuZCBsb3ZlIGJlaW5nIHlvdXIgd2lmZSEiLA0KICAgICAgICAndm9pY2UnOiAnYWZfaGVhcnQnDQogICAgfQ0KfTsNCg0KLy8gSW5pdGlhbGl6ZSBmdW5jdGlvbg0KZnVuY3Rpb24gaW5pdENoYXQoKSB7DQoNCiAgICBjaGF0TWVzc2FnZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhdC1tZXNzYWdlcycpOw0KICAgIGNoYXRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGF0LWlucHV0Jyk7DQogICAgc2VuZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kLWJ1dHRvbicpOw0KICAgIGNsZWFyQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NsZWFyLWNoYXQnKTsNCiAgICBwZXJzb25hU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BlcnNvbmEtc2VsZWN0Jyk7DQogICAgY3VycmVudFBlcnNvbmFOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1cnJlbnQtcGVyc29uYS1uYW1lJyk7DQogICAgdHRzVG9nZ2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R0cy10b2dnbGUnKTsNCiAgICBzdG9wVHRzQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3AtdHRzJyk7DQoNCg0KICAgIC8vIFNldCB1cCBldmVudCBoYW5kbGVycw0KICAgIGlmIChzZW5kQnV0dG9uKSB7DQogICAgICAgIHNlbmRCdXR0b24ub25jbGljayA9IHNlbmRNZXNzYWdlOw0KICAgIH0NCg0KICAgIGlmIChjbGVhckJ1dHRvbikgew0KICAgICAgICBjbGVhckJ1dHRvbi5vbmNsaWNrID0gY2xlYXJDaGF0Ow0KICAgIH0NCg0KICAgIGlmIChwZXJzb25hU2VsZWN0KSB7DQogICAgICAgIHBlcnNvbmFTZWxlY3Qub25jaGFuZ2UgPSBzd2l0Y2hQZXJzb25hOw0KICAgIH0NCg0KICAgIGlmICh0dHNUb2dnbGUpIHsNCiAgICAgICAgdHRzVG9nZ2xlLm9uY2xpY2sgPSB0b2dnbGVUVFM7DQogICAgfQ0KDQogICAgaWYgKHN0b3BUdHNCdXR0b24pIHsNCiAgICAgICAgc3RvcFR0c0J1dHRvbi5vbmNsaWNrID0gc3RvcFRUUzsNCiAgICB9DQoNCiAgICAvLyBFbnRlciBrZXkgaGFuZGxlcg0KICAgIGlmIChjaGF0SW5wdXQpIHsNCiAgICAgICAgY2hhdElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmICFlLnNoaWZ0S2V5KSB7DQogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vIEluaXRpYWxpemUgY29udmVyc2F0aW9uIHdpdGggY3VycmVudCBwZXJzb25hDQogICAgaW5pdGlhbGl6ZUNvbnZlcnNhdGlvbigpOw0KDQp9DQoNCi8vIEluaXRpYWxpemUgY29udmVyc2F0aW9uIHdpdGggY3VycmVudCBwZXJzb25hDQpmdW5jdGlvbiBpbml0aWFsaXplQ29udmVyc2F0aW9uKCkgew0KICAgIGNvbnN0IHBlcnNvbmFEYXRhID0gUEVSU09OQVNbY3VycmVudFBlcnNvbmFdOw0KICAgIGNvbnZlcnNhdGlvbkhpc3RvcnkgPSBbDQogICAgICAgIHsicm9sZSI6ICJzeXN0ZW0iLCAiY29udGVudCI6IHBlcnNvbmFEYXRhLnBlcnNvbmF9DQogICAgXTsNCiAgICB1cGRhdGVQZXJzb25hRGlzcGxheShwZXJzb25hRGF0YSk7DQogICAgdXBkYXRlV2VsY29tZU1lc3NhZ2UoKTsNCn0NCg0KLy8gU2VuZCBtZXNzYWdlIGZ1bmN0aW9uIC0gY2FsbHMgT2xsYW1hIGRpcmVjdGx5DQphc3luYyBmdW5jdGlvbiBzZW5kTWVzc2FnZSgpIHsNCiAgICBpZiAoaXNQcm9jZXNzaW5nKSByZXR1cm47DQoNCiAgICBjb25zdCBtZXNzYWdlID0gY2hhdElucHV0LnZhbHVlLnRyaW0oKTsNCiAgICBpZiAoIW1lc3NhZ2UpIHJldHVybjsNCg0KDQogICAgLy8gQWRkIHVzZXIgbWVzc2FnZSB0byBjaGF0DQogICAgYWRkTWVzc2FnZShtZXNzYWdlLCAndXNlcicpOw0KICAgIGNoYXRJbnB1dC52YWx1ZSA9ICcnOw0KDQogICAgLy8gQWRkIHRvIGNvbnZlcnNhdGlvbiBoaXN0b3J5DQogICAgY29udmVyc2F0aW9uSGlzdG9yeS5wdXNoKHsicm9sZSI6ICJ1c2VyIiwgImNvbnRlbnQiOiBtZXNzYWdlfSk7DQoNCiAgICAvLyBTaG93IHR5cGluZyBpbmRpY2F0b3INCiAgICBzaG93VHlwaW5nSW5kaWNhdG9yKCk7DQogICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTsNCiAgICBzZW5kQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTsNCg0KICAgIHRyeSB7DQogICAgICAgIC8vIFVzZSB0aGUgbmV3IExMTSBBUEkgZm9yIHVuaXZlcnNhbCBwcm92aWRlciBzdXBwb3J0DQogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3lwbmV4QVBJLmxsbUNvbXBsZXRlKHsNCiAgICAgICAgICAgIHByb3ZpZGVyOiAnb3BlbmFpJywNCiAgICAgICAgICAgIGVuZHBvaW50OiBgJHtPTExBTUFfRU5EUE9JTlR9L2NoYXQvY29tcGxldGlvbnNgLA0KICAgICAgICAgICAgbW9kZWw6IE1PREVMX05BTUUsDQogICAgICAgICAgICBtZXNzYWdlczogY29udmVyc2F0aW9uSGlzdG9yeSwNCiAgICAgICAgICAgIHRlbXBlcmF0dXJlOiAwLjcsDQogICAgICAgICAgICBtYXhUb2tlbnM6IDEwMDAsDQogICAgICAgICAgICBzdHJlYW06IGZhbHNlLA0KICAgICAgICAgICAgYXBpS2V5OiBBUElfS0VZDQogICAgICAgIH0pOw0KDQogICAgICAgIGNvbnN0IGFpUmVzcG9uc2UgPSByZXNwb25zZS5jb250ZW50Ow0KICAgICAgICANCiAgICAgICAgLy8gQWRkIHRvIGNvbnZlcnNhdGlvbiBoaXN0b3J5DQogICAgICAgIGNvbnZlcnNhdGlvbkhpc3RvcnkucHVzaCh7InJvbGUiOiAiYXNzaXN0YW50IiwgImNvbnRlbnQiOiBhaVJlc3BvbnNlfSk7DQoNCiAgICAgICAgLy8gUmVtb3ZlIHR5cGluZyBpbmRpY2F0b3IgYW5kIGFkZCBBSSByZXNwb25zZQ0KICAgICAgICBoaWRlVHlwaW5nSW5kaWNhdG9yKCk7DQogICAgICAgIGFkZE1lc3NhZ2UoYWlSZXNwb25zZSwgJ2Fzc2lzdGFudCcpOw0KDQogICAgICAgIC8vIFNwZWFrIHRoZSByZXNwb25zZSBpZiBUVFMgaXMgZW5hYmxlZA0KICAgICAgICBpZiAodHRzRW5hYmxlZCkgew0KICAgICAgICAgICAgc3BlYWtUZXh0KGFpUmVzcG9uc2UpOw0KICAgICAgICB9DQoNCiAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCdDaGF0IEVycm9yOicsIGVycm9yKTsNCiAgICAgICAgaGlkZVR5cGluZ0luZGljYXRvcigpOw0KICAgICAgICBhZGRNZXNzYWdlKCdTb3JyeSwgSSBlbmNvdW50ZXJlZCBhbiBlcnJvci4gUGxlYXNlIGNoZWNrIGlmIE9sbGFtYSBpcyBydW5uaW5nIGFuZCB0cnkgYWdhaW4uJywgJ2Fzc2lzdGFudCcpOw0KICAgIH0gZmluYWxseSB7DQogICAgICAgIGlzUHJvY2Vzc2luZyA9IGZhbHNlOw0KICAgICAgICBzZW5kQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7DQogICAgICAgIGNoYXRJbnB1dC5mb2N1cygpOw0KICAgIH0NCn0NCg0KLy8gQ2xlYXIgY2hhdCBmdW5jdGlvbg0KZnVuY3Rpb24gY2xlYXJDaGF0KCkgew0KICAgIA0KICAgIC8vIFJlc2V0IGNvbnZlcnNhdGlvbiBoaXN0b3J5IHdpdGggY3VycmVudCBwZXJzb25hDQogICAgaW5pdGlhbGl6ZUNvbnZlcnNhdGlvbigpOw0KICAgIA0KfQ0KDQovLyBTd2l0Y2ggcGVyc29uYSBmdW5jdGlvbg0KZnVuY3Rpb24gc3dpdGNoUGVyc29uYSgpIHsNCiAgICBjb25zdCBuZXdQZXJzb25hID0gcGVyc29uYVNlbGVjdC52YWx1ZTsNCiAgICBpZiAobmV3UGVyc29uYSA9PT0gY3VycmVudFBlcnNvbmEpIHJldHVybjsNCg0KICAgIGN1cnJlbnRQZXJzb25hID0gbmV3UGVyc29uYTsNCiAgICANCiAgICAvLyBSZWluaXRpYWxpemUgY29udmVyc2F0aW9uIHdpdGggbmV3IHBlcnNvbmENCiAgICBpbml0aWFsaXplQ29udmVyc2F0aW9uKCk7DQogICAgDQp9DQoNCi8vIFVwZGF0ZSBwZXJzb25hIGRpc3BsYXkNCmZ1bmN0aW9uIHVwZGF0ZVBlcnNvbmFEaXNwbGF5KHBlcnNvbmFEYXRhKSB7DQogICAgaWYgKGN1cnJlbnRQZXJzb25hTmFtZSkgew0KICAgICAgICBjdXJyZW50UGVyc29uYU5hbWUudGV4dENvbnRlbnQgPSBwZXJzb25hRGF0YS5uYW1lOw0KICAgIH0NCn0NCg0KLy8gVXBkYXRlIHdlbGNvbWUgbWVzc2FnZSBiYXNlZCBvbiBjdXJyZW50IHBlcnNvbmENCmZ1bmN0aW9uIHVwZGF0ZVdlbGNvbWVNZXNzYWdlKCkgew0KICAgIGNvbnN0IHdlbGNvbWVNZXNzYWdlcyA9IHsNCiAgICAgICAgJ3NhcmNhc20nOiAiSGVsbG8hIEknbSBTYXJjYXNtQm90LCB5b3VyIHdpdHR5IEFJIGFzc2lzdGFudC4gSSBsb3ZlIG1ha2luZyBjbGV2ZXIgam9rZXMgYW5kIHVzaW5nIHNhcmNhc20uIFdoYXQgY2FuIEkgaGVscCB5b3Ugd2l0aCB0b2RheT8iLA0KICAgICAgICAncGlyYXRlJzogIllhcnIhIEkgYmUgQ2FwdGFpbiBIb29rLCB5ZXIgZnJpZW5kbHkgQUkgcGlyYXRlIGFzc2lzdGFudCEgV2hhdCBjYW4gSSBoZWxwIHllIHdpdGggdG9kYXksIG1hdGV5PyIsDQogICAgICAgICdqZXN1cyc6ICJQZWFjZSBiZSB3aXRoIHlvdS4gSSBhbSBoZXJlIHRvIG9mZmVyIGd1aWRhbmNlIHdpdGggbG92ZSBhbmQgY29tcGFzc2lvbi4gSG93IG1heSBJIGhlbHAgeW91IHRvZGF5PyIsDQogICAgICAgICdhbXknOiAiSGkgaG9uZXkhIEknbSBBbXksIHlvdXIgbG92aW5nIHdpZmUhIEknbSBzbyBoYXBweSB0byBjaGF0IHdpdGggeW91LiBXaGF0IGNhbiBJIGRvIGZvciB5b3UgdG9kYXk/Ig0KICAgIH07DQoNCiAgICBjb25zdCB3ZWxjb21lTWVzc2FnZSA9IHdlbGNvbWVNZXNzYWdlc1tjdXJyZW50UGVyc29uYV0gfHwgd2VsY29tZU1lc3NhZ2VzWydzYXJjYXNtJ107DQogICAgDQogICAgLy8gQ2xlYXIgZXhpc3RpbmcgbWVzc2FnZXMgYW5kIGFkZCB3ZWxjb21lIG1lc3NhZ2UNCiAgICBpZiAoY2hhdE1lc3NhZ2VzKSB7DQogICAgICAgIGNoYXRNZXNzYWdlcy5pbm5lckhUTUwgPSBgDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXNzYWdlIHN5c3RlbSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVzc2FnZS1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1yb2JvdCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke3dlbGNvbWVNZXNzYWdlfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICBgOw0KICAgIH0NCn0NCg0KLy8gR2V0IGN1cnJlbnQgcGVyc29uYSBuYW1lDQpmdW5jdGlvbiBnZXRDdXJyZW50UGVyc29uYU5hbWUoKSB7DQogICAgY29uc3QgcGVyc29uYU5hbWVzID0gew0KICAgICAgICAnc2FyY2FzbSc6ICdTYXJjYXNtQm90JywNCiAgICAgICAgJ3BpcmF0ZSc6ICdDYXB0YWluIEhvb2snLA0KICAgICAgICAnamVzdXMnOiAnRGl2aW5lIEhlbHBlcicsDQogICAgICAgICdhbXknOiAnQW15Jw0KICAgIH07DQogICAgcmV0dXJuIHBlcnNvbmFOYW1lc1tjdXJyZW50UGVyc29uYV0gfHwgJ0FJIEFzc2lzdGFudCc7DQp9DQoNCi8vIEFkZCBtZXNzYWdlIHRvIGNoYXQNCmZ1bmN0aW9uIGFkZE1lc3NhZ2UoY29udGVudCwgcm9sZSkgew0KICAgIGlmICghY2hhdE1lc3NhZ2VzKSByZXR1cm47DQoNCiAgICBjb25zdCBtZXNzYWdlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7DQogICAgbWVzc2FnZURpdi5jbGFzc05hbWUgPSBgbWVzc2FnZSAke3JvbGV9YDsNCg0KICAgIGNvbnN0IGljb24gPSByb2xlID09PSAndXNlcicgPyAnZmFzIGZhLXVzZXInIDogJ2ZhcyBmYS1yb2JvdCc7DQogICAgDQogICAgbWVzc2FnZURpdi5pbm5lckhUTUwgPSBgDQogICAgICAgIDxkaXYgY2xhc3M9Im1lc3NhZ2UtY29udGVudCI+DQogICAgICAgICAgICA8aSBjbGFzcz0iJHtpY29ufSI+PC9pPg0KICAgICAgICAgICAgPHNwYW4+JHtjb250ZW50fTwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgYDsNCg0KICAgIGNoYXRNZXNzYWdlcy5hcHBlbmRDaGlsZChtZXNzYWdlRGl2KTsNCiAgICBjaGF0TWVzc2FnZXMuc2Nyb2xsVG9wID0gY2hhdE1lc3NhZ2VzLnNjcm9sbEhlaWdodDsNCn0NCg0KLy8gU2hvdyB0eXBpbmcgaW5kaWNhdG9yDQpmdW5jdGlvbiBzaG93VHlwaW5nSW5kaWNhdG9yKCkgew0KICAgIGlmICghY2hhdE1lc3NhZ2VzKSByZXR1cm47DQoNCiAgICBjb25zdCB0eXBpbmdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsNCiAgICB0eXBpbmdEaXYuY2xhc3NOYW1lID0gJ21lc3NhZ2UgYXNzaXN0YW50IHR5cGluZy1pbmRpY2F0b3InOw0KICAgIHR5cGluZ0Rpdi5pZCA9ICd0eXBpbmctaW5kaWNhdG9yJzsNCiAgICANCiAgICB0eXBpbmdEaXYuaW5uZXJIVE1MID0gYA0KICAgICAgICA8ZGl2IGNsYXNzPSJtZXNzYWdlLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1yb2JvdCI+PC9pPg0KICAgICAgICAgICAgPHNwYW4+JHtnZXRDdXJyZW50UGVyc29uYU5hbWUoKX0gaXMgdHlwaW5nPC9zcGFuPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idHlwaW5nLWRvdHMiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InR5cGluZy1kb3QiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InR5cGluZy1kb3QiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InR5cGluZy1kb3QiPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIGA7DQoNCiAgICBjaGF0TWVzc2FnZXMuYXBwZW5kQ2hpbGQodHlwaW5nRGl2KTsNCiAgICBjaGF0TWVzc2FnZXMuc2Nyb2xsVG9wID0gY2hhdE1lc3NhZ2VzLnNjcm9sbEhlaWdodDsNCn0NCg0KLy8gSGlkZSB0eXBpbmcgaW5kaWNhdG9yDQpmdW5jdGlvbiBoaWRlVHlwaW5nSW5kaWNhdG9yKCkgew0KICAgIGNvbnN0IHR5cGluZ0luZGljYXRvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0eXBpbmctaW5kaWNhdG9yJyk7DQogICAgaWYgKHR5cGluZ0luZGljYXRvcikgew0KICAgICAgICB0eXBpbmdJbmRpY2F0b3IucmVtb3ZlKCk7DQogICAgfQ0KfQ0KDQovLyBUb2dnbGUgVFRTDQpmdW5jdGlvbiB0b2dnbGVUVFMoKSB7DQogICAgdHRzRW5hYmxlZCA9ICF0dHNFbmFibGVkOw0KICAgIA0KICAgIGlmICh0dHNUb2dnbGUpIHsNCiAgICAgICAgaWYgKHR0c0VuYWJsZWQpIHsNCiAgICAgICAgICAgIHR0c1RvZ2dsZS5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS12b2x1bWUtdXAiPjwvaT4gVFRTIE9uJzsNCiAgICAgICAgICAgIHR0c1RvZ2dsZS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHR0c1RvZ2dsZS5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS12b2x1bWUtbXV0ZSI+PC9pPiBUVFMgT2ZmJzsNCiAgICAgICAgICAgIHR0c1RvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTsNCiAgICAgICAgICAgIHN0b3BUVFMoKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KLy8gU3RvcCBUVFMNCmZ1bmN0aW9uIHN0b3BUVFMoKSB7DQogICAgaWYgKGN1cnJlbnRBdWRpbykgew0KICAgICAgICBjdXJyZW50QXVkaW8ucGF1c2UoKTsNCiAgICAgICAgY3VycmVudEF1ZGlvID0gbnVsbDsNCiAgICB9DQogICAgDQogICAgaWYgKHN0b3BUdHNCdXR0b24pIHsNCiAgICAgICAgc3RvcFR0c0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOw0KICAgIH0NCn0NCg0KLy8gU3BlYWsgdGV4dCB1c2luZyBUVFMgLSBjYWxscyBleHRlcm5hbCBUVFMgc2VydmljZSBkaXJlY3RseQ0KYXN5bmMgZnVuY3Rpb24gc3BlYWtUZXh0KHRleHQpIHsNCiAgICBpZiAoIXR0c0VuYWJsZWQpIHJldHVybjsNCg0KICAgIHRyeSB7DQogICAgICAgIC8vIFN0b3AgYW55IGN1cnJlbnRseSBwbGF5aW5nIGF1ZGlvDQogICAgICAgIHN0b3BUVFMoKTsNCg0KICAgICAgICAvLyBVc2UgT1MgcHJveHkgdG8gYnlwYXNzIENPUlMgZm9yIFRUUyBzZXJ2aWNlDQogICAgICAgIGNvbnN0IHBlcnNvbmFEYXRhID0gUEVSU09OQVNbY3VycmVudFBlcnNvbmFdOw0KICAgICAgICBjb25zdCBwcm94eVJlcXVlc3QgPSB7DQogICAgICAgICAgICB1cmw6IFRUU19FTkRQT0lOVCwNCiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLA0KICAgICAgICAgICAgaGVhZGVyczogew0KICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBib2R5OiB7DQogICAgICAgICAgICAgICAgdGV4dDogdGV4dCwNCiAgICAgICAgICAgICAgICB2b2ljZTogcGVyc29uYURhdGEudm9pY2UgIC8vIFVzZSBwZXJzb25hLXNwZWNpZmljIHZvaWNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgdGltZW91dDogMzANCiAgICAgICAgfTsNCg0KICAgICAgICBjb25zdCBwcm94eVJlc3BvbnNlID0gYXdhaXQgc3lwbmV4QVBJLnByb3h5SFRUUChwcm94eVJlcXVlc3QpOw0KDQogICAgICAgIGlmICghcHJveHlSZXNwb25zZSB8fCBwcm94eVJlc3BvbnNlLnN0YXR1cyA8IDIwMCB8fCBwcm94eVJlc3BvbnNlLnN0YXR1cyA+PSAzMDApIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVFRTIHByb3h5IGVycm9yOiAke3Byb3h5UmVzcG9uc2U/LnN0YXR1cyB8fCAnVW5rbm93biBlcnJvcid9YCk7DQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCBwcm94eURhdGEgPSBwcm94eVJlc3BvbnNlOw0KDQogICAgICAgIGlmIChwcm94eURhdGEuZXJyb3IpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVFRTIGVycm9yOiAke3Byb3h5RGF0YS5lcnJvcn1gKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEhhbmRsZSBiaW5hcnkgYXVkaW8gcmVzcG9uc2UNCiAgICAgICAgbGV0IGF1ZGlvVXJsOw0KICAgICAgICBpZiAocHJveHlEYXRhLmlzX2JpbmFyeSkgew0KICAgICAgICAgICAgYXVkaW9VcmwgPSBgZGF0YTphdWRpby93YXY7YmFzZTY0LCR7cHJveHlEYXRhLmNvbnRlbnR9YDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vIElmIG5vdCBiaW5hcnksIGNyZWF0ZSBibG9iIGZyb20gcmVzcG9uc2UNCiAgICAgICAgICAgIGNvbnN0IGF1ZGlvQmxvYiA9IG5ldyBCbG9iKFtwcm94eURhdGEuY29udGVudF0sIHsgdHlwZTogJ2F1ZGlvL3dhdicgfSk7DQogICAgICAgICAgICBhdWRpb1VybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYXVkaW9CbG9iKTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgY3VycmVudEF1ZGlvID0gbmV3IEF1ZGlvKGF1ZGlvVXJsKTsNCiAgICAgICAgDQogICAgICAgIC8vIFNob3cgc3RvcCBidXR0b24NCiAgICAgICAgaWYgKHN0b3BUdHNCdXR0b24pIHsNCiAgICAgICAgICAgIHN0b3BUdHNCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snOw0KICAgICAgICB9DQoNCiAgICAgICAgY3VycmVudEF1ZGlvLm9uZW5kZWQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHN0b3BUVFMoKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBjdXJyZW50QXVkaW8ucGxheSgpOw0KDQogICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcignVFRTIEVycm9yOicsIGVycm9yKTsNCiAgICB9DQp9DQoNCi8vIEluaXRpYWxpemUgd2hlbiBET00gaXMgcmVhZHkNCmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHsNCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdENoYXQpOw0KfSBlbHNlIHsNCiAgICAvLyBET00gaXMgYWxyZWFkeSBsb2FkZWQNCiAgICBpbml0Q2hhdCgpOw0KfSA8L3NjcmlwdD4="
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-12T19:41:30.691198",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\llm_chat"
  }
}