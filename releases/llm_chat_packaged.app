{
  "app_metadata": {
    "id": "llm_chat",
    "name": "LLM Chat",
    "description": "Chat with AI assistants using different personas - standalone user app version",
    "icon": "fas fa-comments",
    "keywords": [
      "chat",
      "ai",
      "llm",
      "assistant",
      "persona"
    ],
    "author": "Sypnex OS",
    "version": "1.0.1",
    "type": "user_app",
    "settings": [
      {
        "key": "TTS_ENDPOINT",
        "value": "test value",
        "label": "tts endpoint"
      },
      {
        "key": "OLLAMA_ENDPOINT",
        "value": "test value",
        "label": "ollama endpoint"
      },
      {
        "key": "OLLAMA_MODEL",
        "value": "test value",
        "label": "ollama model"
      }
    ]
  },
  "files": {
    "llm_chat.app": "ew0KICAgICJpZCI6ICJsbG1fY2hhdCIsDQogICAgIm5hbWUiOiAiTExNIENoYXQiLA0KICAgICJkZXNjcmlwdGlvbiI6ICJDaGF0IHdpdGggQUkgYXNzaXN0YW50cyB1c2luZyBkaWZmZXJlbnQgcGVyc29uYXMgLSBzdGFuZGFsb25lIHVzZXIgYXBwIHZlcnNpb24iLA0KICAgICJpY29uIjogImZhcyBmYS1jb21tZW50cyIsDQogICAgImtleXdvcmRzIjogWyJjaGF0IiwgImFpIiwgImxsbSIsICJhc3Npc3RhbnQiLCAicGVyc29uYSJdLA0KICAgICJhdXRob3IiOiAiU3lwbmV4IE9TIiwNCiAgICAidmVyc2lvbiI6ICIxLjAuMSIsDQogICAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAgInNldHRpbmdzIjogWw0KICAgIHsNCiAgICAgICJrZXkiOiAiVFRTX0VORFBPSU5UIiwNCiAgICAgICJ2YWx1ZSI6ICJ0ZXN0IHZhbHVlIiwNCiAgICAgICJsYWJlbCI6ICJ0dHMgZW5kcG9pbnQiDQogICAgfSwNCiAgICAgIHsNCiAgICAgICJrZXkiOiAiT0xMQU1BX0VORFBPSU5UIiwNCiAgICAgICJ2YWx1ZSI6ICJ0ZXN0IHZhbHVlIiwNCiAgICAgICJsYWJlbCI6ICJvbGxhbWEgZW5kcG9pbnQiDQogICAgfSwNCiAgICAgICAgICB7DQogICAgICAia2V5IjogIk9MTEFNQV9NT0RFTCIsDQogICAgICAidmFsdWUiOiAidGVzdCB2YWx1ZSIsDQogICAgICAibGFiZWwiOiAib2xsYW1hIG1vZGVsIg0KICAgIH0NCiAgXQ0KfQ==",
    "llm_chat.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-22T05:34:37.980929",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\llm_chat"
  }
}