{
  "app_metadata": {
    "id": "flow_runner",
    "name": "Flow Runner",
    "description": "Background workflow execution manager with job monitoring and control",
    "icon": "fas fa-cogs",
    "keywords": [
      "workflow",
      "automation",
      "jobs",
      "background",
      "execution",
      "monitor"
    ],
    "author": "Sypnex OS",
    "version": "1.0.0",
    "type": "user_app",
    "scripts": [
      "main.js"
    ],
    "styles": [
      "style.css"
    ],
    "settings": [
      {
        "key": "FLOW_RUNNER_API",
        "name": "Flow Runner API",
        "type": "string",
        "value": "http://127.0.0.1:8080",
        "description": "Flow Runner API URL"
      },
      {
        "key": "SYPNEX_OS_API",
        "name": "Sypnex OS API",
        "type": "string",
        "value": "http://127.0.0.1:5000",
        "description": "Sypnex OS Runner API URL"
      }
    ]
  },
  "files": {
    "flow_runner.app": "ew0KICAiaWQiOiAiZmxvd19ydW5uZXIiLA0KICAibmFtZSI6ICJGbG93IFJ1bm5lciIsDQogICJkZXNjcmlwdGlvbiI6ICJCYWNrZ3JvdW5kIHdvcmtmbG93IGV4ZWN1dGlvbiBtYW5hZ2VyIHdpdGggam9iIG1vbml0b3JpbmcgYW5kIGNvbnRyb2wiLA0KICAiaWNvbiI6ICJmYXMgZmEtY29ncyIsDQogICJrZXl3b3JkcyI6IFsid29ya2Zsb3ciLCAiYXV0b21hdGlvbiIsICJqb2JzIiwgImJhY2tncm91bmQiLCAiZXhlY3V0aW9uIiwgIm1vbml0b3IiXSwNCiAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAidmVyc2lvbiI6ICIxLjAuMCIsDQogICJ0eXBlIjogInVzZXJfYXBwIiwNCiAgInNjcmlwdHMiOiBbIm1haW4uanMiXSwNCiAgInN0eWxlcyI6IFsic3R5bGUuY3NzIl0sDQogICJzZXR0aW5ncyI6IFt7DQogICAgICAia2V5IjogIkZMT1dfUlVOTkVSX0FQSSIsDQogICAgICAibmFtZSI6ICJGbG93IFJ1bm5lciBBUEkiLA0KICAgICAgInR5cGUiOiAic3RyaW5nIiwNCiAgICAgICJ2YWx1ZSI6ICJodHRwOi8vMTI3LjAuMC4xOjgwODAiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIkZsb3cgUnVubmVyIEFQSSBVUkwiDQogICAgfSx7DQogICAgICAia2V5IjogIlNZUE5FWF9PU19BUEkiLA0KICAgICAgIm5hbWUiOiAiU3lwbmV4IE9TIEFQSSIsDQogICAgICAidHlwZSI6ICJzdHJpbmciLA0KICAgICAgInZhbHVlIjogImh0dHA6Ly8xMjcuMC4wLjE6NTAwMCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiU3lwbmV4IE9TIFJ1bm5lciBBUEkgVVJMIg0KICAgIH1dDQp9DQo=",
    "flow_runner.html": "PGRpdiBjbGFzcz0iYXBwLWNvbnRhaW5lciI+DQogICAgPGRpdiBjbGFzcz0iYXBwLWhlYWRlciI+DQogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1jb250ZW50Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci10ZXh0Ij4NCiAgICAgICAgICAgICAgICA8aDI+PGkgY2xhc3M9ImZhcyBmYS1jb2dzIj48L2k+IEZsb3cgUnVubmVyPC9oMj4NCiAgICAgICAgICAgICAgICA8cD5Nb25pdG9yIGFuZCBtYW5hZ2UgYmFja2dyb3VuZCB3b3JrZmxvdyBleGVjdXRpb248L3A+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1jb250cm9scyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHMtZGlzcGxheSI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJqb2Itc3RhdHMiIGNsYXNzPSJzdGF0cy10ZXh0Ij5Mb2FkaW5nIHN0YXRzLi4uPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InJlZnJlc2gtam9icyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3luYy1hbHQiPjwvaT4gUmVmcmVzaA0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InN1Ym1pdC1qb2IiIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXBsdXMiPjwvaT4gU3VibWl0IEpvYg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBjbGFzcz0iYXBwLWNvbnRlbnQiPg0KICAgICAgICA8IS0tIExvYWRpbmcgU3RhdGUgLS0+DQogICAgICAgIDxkaXYgaWQ9ImxvYWRpbmctc3RhdGUiIGNsYXNzPSJsb2FkaW5nLXN0YXRlIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvYWRpbmctc3Bpbm5lciI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zcGlubmVyIGZhLXNwaW4iPjwvaT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPHA+TG9hZGluZyBqb2JzLi4uPC9wPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8IS0tIEVycm9yIFN0YXRlIC0tPg0KICAgICAgICA8ZGl2IGlkPSJlcnJvci1zdGF0ZSIgY2xhc3M9ImVycm9yLXN0YXRlIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXJyb3ItaWNvbiI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSI+PC9pPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8cCBpZD0iZXJyb3ItbWVzc2FnZSI+RmFpbGVkIHRvIGxvYWQgam9iczwvcD4NCiAgICAgICAgICAgIDxidXR0b24gaWQ9InJldHJ5LWJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5Ij4NCiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXJlZG8iPjwvaT4gUmV0cnkNCiAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8IS0tIEpvYnMgR3JpZCAtLT4NCiAgICAgICAgPGRpdiBpZD0iam9icy1jb250YWluZXIiIGNsYXNzPSJqb2JzLWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgIDxkaXYgaWQ9ImpvYnMtZ3JpZCIgY2xhc3M9ImpvYnMtZ3JpZCI+DQogICAgICAgICAgICAgICAgPCEtLSBKb2JzIHdpbGwgYmUgcG9wdWxhdGVkIGR5bmFtaWNhbGx5IC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDwhLS0gRW1wdHkgU3RhdGUgLS0+DQogICAgICAgIDxkaXYgaWQ9ImVtcHR5LXN0YXRlIiBjbGFzcz0iZW1wdHktc3RhdGUiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbXB0eS1pY29uIj4NCiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRhc2tzIj48L2k+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxoMz5ObyBKb2JzIEZvdW5kPC9oMz4NCiAgICAgICAgICAgIDxwPk5vIHdvcmtmbG93IGpvYnMgaGF2ZSBiZWVuIHN1Ym1pdHRlZCB5ZXQuPC9wPg0KICAgICAgICAgICAgPGJ1dHRvbiBpZD0iZW1wdHktc3VibWl0LWpvYiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1wbHVzIj48L2k+IFN1Ym1pdCBZb3VyIEZpcnN0IEpvYg0KICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPCEtLSBKb2IgU3VibWlzc2lvbiBNb2RhbCAtLT4NCiAgICA8ZGl2IGlkPSJqb2Itc3VibWl0LW1vZGFsIiBjbGFzcz0ibW9kYWwiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDM+PGkgY2xhc3M9ImZhcyBmYS1wbHVzIj48L2k+IFN1Ym1pdCBOZXcgSm9iPC9oMz4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJjbG9zZS1tb2RhbCIgY2xhc3M9Im1vZGFsLWNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS10aW1lcyI+PC9pPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4NCiAgICAgICAgICAgICAgICA8Zm9ybSBpZD0iam9iLWZvcm0iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IndvcmtmbG93LXBhdGgiPldvcmtmbG93IFBhdGg6PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0id29ya2Zsb3ctcGF0aCIgY2xhc3M9ImZvcm0tY29udHJvbCIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Ii9wYXRoL3RvL3dvcmtmbG93Lmpzb24iIHJlcXVpcmVkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJmb3JtLWhlbHAiPlBhdGggdG8gdGhlIHdvcmtmbG93IEpTT04gZmlsZSAoVkZTIHBhdGgpPC9zbWFsbD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic3lwbmV4LW9zLXVybCI+U3lwbmV4IE9TIFVSTDo8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJzeXBuZXgtb3MtdXJsIiBjbGFzcz0iZm9ybS1jb250cm9sIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0ie3tTWVBORVhfT1NfQVBJfX0iIHJlcXVpcmVkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJmb3JtLWhlbHAiPlVSTCBvZiB0aGUgU3lwbmV4IE9TIGluc3RhbmNlPC9zbWFsbD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImNhbmNlbC1zdWJtaXQiIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+Q2FuY2VsPC9idXR0b24+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iY29uZmlybS1zdWJtaXQiIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXBsYXkiPjwvaT4gU3VibWl0IEpvYg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPCEtLSBKb2IgRGV0YWlscyBNb2RhbCAtLT4NCiAgICA8ZGl2IGlkPSJqb2ItZGV0YWlscy1tb2RhbCIgY2xhc3M9Im1vZGFsIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50IG1vZGFsLWxhcmdlIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgPGgzPjxpIGNsYXNzPSJmYXMgZmEtaW5mby1jaXJjbGUiPjwvaT4gSm9iIERldGFpbHM8L2gzPg0KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImNsb3NlLWRldGFpbHMtbW9kYWwiIGNsYXNzPSJtb2RhbC1jbG9zZSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdGltZXMiPjwvaT4NCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iam9iLWRldGFpbHMtY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gSm9iIGRldGFpbHMgd2lsbCBiZSBwb3B1bGF0ZWQgZHluYW1pY2FsbHkgLS0+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iY2xvc2UtZGV0YWlscyIgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5Ij5DbG9zZTwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzdHlsZT4vKiA9PT09PSBTdHlsZTogc3R5bGUuY3NzID09PT09ICovDQovKiBGbG93IFJ1bm5lciBBcHAgU3R5bGVzICovDQouYXBwLWNvbnRhaW5lciB7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCn0NCg0KLmFwcC1oZWFkZXIgew0KICAgIHBhZGRpbmc6IDIwcHg7DQogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjEpKTsNCn0NCg0KLmhlYWRlci1jb250ZW50IHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0Ow0KICAgIGdhcDogMjBweDsNCiAgICBmbGV4LXdyYXA6IHdyYXA7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi5oZWFkZXItdGV4dCB7DQogICAgZmxleDogMCAxIGF1dG87DQp9DQoNCi5oZWFkZXItdGV4dCBoMiB7DQogICAgbWFyZ2luOiAwIDAgOHB4IDA7DQogICAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCg0KLmhlYWRlci10ZXh0IHAgew0KICAgIG1hcmdpbjogMDsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1zZWNvbmRhcnksIHJnYmEoMjU1LDI1NSwyNTUsMC43KSk7DQogICAgZm9udC1zaXplOiAxNHB4Ow0KfQ0KDQouaGVhZGVyLWNvbnRyb2xzIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgZ2FwOiAxNXB4Ow0KICAgIG1hcmdpbi1sZWZ0OiBhdXRvOw0KICAgIGZsZXg6IDAgMCBhdXRvOw0KfQ0KDQouc3RhdHMtZGlzcGxheSB7DQogICAgcGFkZGluZzogOHB4IDEycHg7DQogICAgYmFja2dyb3VuZDogdmFyKC0tc3VyZmFjZS1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjA1KSk7DQogICAgYm9yZGVyLXJhZGl1czogNnB4Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjEpKTsNCn0NCg0KLnN0YXRzLXRleHQgew0KICAgIGZvbnQtc2l6ZTogMTJweDsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1zZWNvbmRhcnksIHJnYmEoMjU1LDI1NSwyNTUsMC44KSk7DQogICAgZm9udC13ZWlnaHQ6IDUwMDsNCn0NCg0KLmFwcC1jb250ZW50IHsNCiAgICBmbGV4OiAxOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KfQ0KDQovKiBTdGF0ZXMgKi8NCi5sb2FkaW5nLXN0YXRlLA0KLmVycm9yLXN0YXRlLA0KLmVtcHR5LXN0YXRlIHsNCiAgICBmbGV4OiAxOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBwYWRkaW5nOiA0MHB4Ow0KfQ0KDQoubG9hZGluZy1zcGlubmVyIGkgew0KICAgIGZvbnQtc2l6ZTogMnJlbTsNCiAgICBjb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yLCAjNGE5MGUyKTsNCiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KfQ0KDQouZXJyb3ItaWNvbiBpIHsNCiAgICBmb250LXNpemU6IDNyZW07DQogICAgY29sb3I6IHZhcigtLWVycm9yLWNvbG9yLCAjZTc0YzNjKTsNCiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KfQ0KDQouZW1wdHktaWNvbiBpIHsNCiAgICBmb250LXNpemU6IDNyZW07DQogICAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuNSkpOw0KICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQp9DQoNCi5lbXB0eS1zdGF0ZSBoMyB7DQogICAgbWFyZ2luOiAwIDAgMTBweCAwOw0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXByaW1hcnksIHJnYmEoMjU1LDI1NSwyNTUsMC45KSk7DQp9DQoNCi5lbXB0eS1zdGF0ZSBwIHsNCiAgICBtYXJnaW46IDAgMCAyMHB4IDA7DQogICAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuNykpOw0KfQ0KDQovKiBKb2JzIENvbnRhaW5lciAqLw0KLmpvYnMtY29udGFpbmVyIHsNCiAgICBmbGV4OiAxOw0KICAgIG92ZXJmbG93LXk6IGF1dG87DQogICAgcGFkZGluZzogMjBweDsNCn0NCg0KLmpvYnMtZ3JpZCB7DQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgzNTBweCwgMWZyKSk7DQogICAgZ2FwOiAyMHB4Ow0KICAgIG1heC13aWR0aDogMTAwJTsNCn0NCg0KLyogSm9iIENhcmQgKi8NCi5qb2ItY2FyZCB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tc3VyZmFjZS1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjA1KSk7DQogICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMSkpOw0KICAgIGJvcmRlci1yYWRpdXM6IDEycHg7DQogICAgcGFkZGluZzogMjBweDsNCiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlOw0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KfQ0KDQouam9iLWNhcmQ6aG92ZXIgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLXN1cmZhY2UtaG92ZXIsIHJnYmEoMjU1LDI1NSwyNTUsMC4wOCkpOw0KICAgIGJvcmRlci1jb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yLCAjNGE5MGUyKTsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7DQogICAgYm94LXNoYWRvdzogMCA4cHggMjVweCByZ2JhKDAsMCwwLDAuMik7DQp9DQoNCi5qb2ItaGVhZGVyIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQp9DQoNCi5qb2ItdGl0bGUgew0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQogICAgZm9udC1zaXplOiAxNnB4Ow0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXByaW1hcnksIHJnYmEoMjU1LDI1NSwyNTUsMC45KSk7DQogICAgbWFyZ2luOiAwOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBnYXA6IDhweDsNCn0NCg0KLmpvYi1pZCB7DQogICAgZm9udC1zaXplOiAxMXB4Ow0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjYpKTsNCiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlOw0KICAgIG1hcmdpbi10b3A6IDRweDsNCn0NCg0KLmpvYi1zdGF0dXMgew0KICAgIHBhZGRpbmc6IDRweCA4cHg7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgIGZvbnQtc2l6ZTogMTFweDsNCiAgICBmb250LXdlaWdodDogNjAwOw0KICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7DQogICAgbGV0dGVyLXNwYWNpbmc6IDAuNXB4Ow0KfQ0KDQouam9iLXN0YXR1cy5xdWV1ZWQgew0KICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAxOTMsIDcsIDAuMik7DQogICAgY29sb3I6ICNmZmMxMDc7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNTUsIDE5MywgNywgMC4zKTsNCn0NCg0KLmpvYi1zdGF0dXMucnVubmluZyB7DQogICAgYmFja2dyb3VuZDogcmdiYSgwLCAxMjMsIDI1NSwgMC4yKTsNCiAgICBjb2xvcjogIzAwN2JmZjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDEyMywgMjU1LCAwLjMpOw0KfQ0KDQouam9iLXN0YXR1cy5jb21wbGV0ZWQgew0KICAgIGJhY2tncm91bmQ6IHJnYmEoNDAsIDE2NywgNjksIDAuMik7DQogICAgY29sb3I6ICMyOGE3NDU7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSg0MCwgMTY3LCA2OSwgMC4zKTsNCn0NCg0KLmpvYi1zdGF0dXMuZmFpbGVkIHsNCiAgICBiYWNrZ3JvdW5kOiByZ2JhKDIyMCwgNTMsIDY5LCAwLjIpOw0KICAgIGNvbG9yOiAjZGMzNTQ1Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjIwLCA1MywgNjksIDAuMyk7DQp9DQoNCi5qb2Itc3RhdHVzLmNhbmNlbGxlZCB7DQogICAgYmFja2dyb3VuZDogcmdiYSgxMDgsIDExNywgMTI1LCAwLjIpOw0KICAgIGNvbG9yOiAjNmM3NTdkOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMTA4LCAxMTcsIDEyNSwgMC4zKTsNCn0NCg0KLmpvYi1kZXRhaWxzIHsNCiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KfQ0KDQouam9iLWRldGFpbC1yb3cgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgbWFyZ2luLWJvdHRvbTogOHB4Ow0KICAgIGZvbnQtc2l6ZTogMTNweDsNCn0NCg0KLmpvYi1kZXRhaWwtbGFiZWwgew0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjcpKTsNCiAgICBmb250LXdlaWdodDogNTAwOw0KfQ0KDQouam9iLWRldGFpbC12YWx1ZSB7DQogICAgY29sb3I6IHZhcigtLXRleHQtcHJpbWFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjkpKTsNCiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlOw0KICAgIGZvbnQtc2l6ZTogMTJweDsNCn0NCg0KLmpvYi13b3JrZmxvdy1wYXRoIHsNCiAgICBmb250LXdlaWdodDogNjAwOw0KICAgIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IsICM0YTkwZTIpOw0KfQ0KDQouam9iLWFjdGlvbnMgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZ2FwOiA4cHg7DQogICAgZmxleC13cmFwOiB3cmFwOw0KfQ0KDQouam9iLWFjdGlvbnMgLmJ0biB7DQogICAgZm9udC1zaXplOiAxMnB4Ow0KICAgIHBhZGRpbmc6IDZweCAxMnB4Ow0KICAgIGZsZXg6IDE7DQogICAgbWluLXdpZHRoOiA4MHB4Ow0KfQ0KDQovKiBCdXR0b25zICovDQouYnRuIHsNCiAgICBwYWRkaW5nOiA4cHggMTZweDsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLXJhZGl1czogNnB4Ow0KICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICBmb250LXdlaWdodDogNTAwOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlOw0KICAgIGRpc3BsYXk6IGlubGluZS1mbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgZ2FwOiA2cHg7DQogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KfQ0KDQouYnRuOmhvdmVyIHsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7DQogICAgYm94LXNoYWRvdzogMCA0cHggMTJweCByZ2JhKDAsMCwwLDAuMik7DQp9DQoNCi5idG4tcHJpbWFyeSB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tYWNjZW50LWNvbG9yLCAjNGE5MGUyKTsNCiAgICBjb2xvcjogd2hpdGU7DQp9DQoNCi5idG4tc3VjY2VzcyB7DQogICAgYmFja2dyb3VuZDogIzI4YTc0NTsNCiAgICBjb2xvcjogd2hpdGU7DQp9DQoNCi5idG4tZGFuZ2VyIHsNCiAgICBiYWNrZ3JvdW5kOiAjZGMzNTQ1Ow0KICAgIGNvbG9yOiB3aGl0ZTsNCn0NCg0KLmJ0bi1zZWNvbmRhcnkgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLXN1cmZhY2UtY29sb3IsIHJnYmEoMjU1LDI1NSwyNTUsMC4xKSk7DQogICAgY29sb3I6IHZhcigtLXRleHQtcHJpbWFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjkpKTsNCiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IsIHJnYmEoMjU1LDI1NSwyNTUsMC4yKSk7DQp9DQoNCi5idG4taW5mbyB7DQogICAgYmFja2dyb3VuZDogIzE3YTJiODsNCiAgICBjb2xvcjogd2hpdGU7DQp9DQoNCi5idG46ZGlzYWJsZWQgew0KICAgIG9wYWNpdHk6IDAuNTsNCiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOw0KICAgIHRyYW5zZm9ybTogbm9uZTsNCn0NCg0KLmJ0bjpkaXNhYmxlZDpob3ZlciB7DQogICAgdHJhbnNmb3JtOiBub25lOw0KICAgIGJveC1zaGFkb3c6IG5vbmU7DQp9DQoNCi8qIE1vZGFsIFN0eWxlcyAqLw0KLm1vZGFsIHsNCiAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgdG9wOiAwOw0KICAgIGxlZnQ6IDA7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMC43KTsNCiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgei1pbmRleDogMTAwMDsNCn0NCg0KLm1vZGFsLWNvbnRlbnQgew0KICAgIGJhY2tncm91bmQ6IHZhcigtLXN1cmZhY2UtY29sb3IsIHJnYmEoMzAsMzAsMzAsMC45NSkpOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjIpKTsNCiAgICBib3JkZXItcmFkaXVzOiAxMnB4Ow0KICAgIG1heC13aWR0aDogNTAwcHg7DQogICAgd2lkdGg6IDkwJTsNCiAgICBtYXgtaGVpZ2h0OiA4MHZoOw0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpOw0KICAgIGJveC1zaGFkb3c6IDAgMjBweCA2MHB4IHJnYmEoMCwwLDAsMC41KTsNCn0NCg0KLm1vZGFsLWxhcmdlIHsNCiAgICBtYXgtd2lkdGg6IDgwMHB4Ow0KfQ0KDQoubW9kYWwtaGVhZGVyIHsNCiAgICBwYWRkaW5nOiAyMHB4Ow0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IsIHJnYmEoMjU1LDI1NSwyNTUsMC4xKSk7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsNCn0NCg0KLm1vZGFsLWhlYWRlciBoMyB7DQogICAgbWFyZ2luOiAwOw0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIGdhcDogOHB4Ow0KfQ0KDQoubW9kYWwtY2xvc2Ugew0KICAgIGJhY2tncm91bmQ6IG5vbmU7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGZvbnQtc2l6ZTogMThweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuNykpOw0KICAgIHBhZGRpbmc6IDRweDsNCiAgICBib3JkZXItcmFkaXVzOiA0cHg7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTsNCn0NCg0KLm1vZGFsLWNsb3NlOmhvdmVyIHsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuOSkpOw0KICAgIGJhY2tncm91bmQ6IHZhcigtLXN1cmZhY2UtaG92ZXIsIHJnYmEoMjU1LDI1NSwyNTUsMC4xKSk7DQp9DQoNCi5tb2RhbC1ib2R5IHsNCiAgICBwYWRkaW5nOiAyMHB4Ow0KICAgIG1heC1oZWlnaHQ6IDUwdmg7DQogICAgb3ZlcmZsb3cteTogYXV0bzsNCn0NCg0KLm1vZGFsLWZvb3RlciB7DQogICAgcGFkZGluZzogMjBweDsNCiAgICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMSkpOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZ2FwOiAxMHB4Ow0KICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7DQp9DQoNCi8qIEZvcm0gU3R5bGVzICovDQouZm9ybS1ncm91cCB7DQogICAgbWFyZ2luLWJvdHRvbTogMjBweDsNCn0NCg0KLmZvcm0tZ3JvdXAgbGFiZWwgew0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIG1hcmdpbi1ib3R0b206IDZweDsNCiAgICBmb250LXdlaWdodDogNTAwOw0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXByaW1hcnksIHJnYmEoMjU1LDI1NSwyNTUsMC45KSk7DQogICAgZm9udC1zaXplOiAxNHB4Ow0KfQ0KDQouZm9ybS1jb250cm9sIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiAxMHB4IDEycHg7DQogICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMikpOw0KICAgIGJvcmRlci1yYWRpdXM6IDZweDsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdXJmYWNlLWNvbG9yLCByZ2JhKDI1NSwyNTUsMjU1LDAuMDUpKTsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuOSkpOw0KICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQp9DQoNCi5mb3JtLWNvbnRyb2w6Zm9jdXMgew0KICAgIG91dGxpbmU6IG5vbmU7DQogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IsICM0YTkwZTIpOw0KICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCByZ2JhKDc0LCAxNDQsIDIyNiwgMC4yKTsNCiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdXJmYWNlLWhvdmVyLCByZ2JhKDI1NSwyNTUsMjU1LDAuMDgpKTsNCn0NCg0KLmZvcm0taGVscCB7DQogICAgZm9udC1zaXplOiAxMnB4Ow0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjYpKTsNCiAgICBtYXJnaW4tdG9wOiA0cHg7DQogICAgZGlzcGxheTogYmxvY2s7DQp9DQoNCi8qIEpvYiBEZXRhaWxzIFN0eWxlcyAqLw0KLmpvYi1kZXRhaWxzLWNvbnRlbnQgew0KICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgZ2FwOiAyMHB4Ow0KfQ0KDQouZGV0YWlsLXNlY3Rpb24gew0KICAgIGJhY2tncm91bmQ6IHZhcigtLXN1cmZhY2UtY29sb3IsIHJnYmEoMjU1LDI1NSwyNTUsMC4wMykpOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvciwgcmdiYSgyNTUsMjU1LDI1NSwwLjA4KSk7DQogICAgYm9yZGVyLXJhZGl1czogOHB4Ow0KICAgIHBhZGRpbmc6IDE1cHg7DQp9DQoNCi5kZXRhaWwtc2VjdGlvbiBoNCB7DQogICAgbWFyZ2luOiAwIDAgMTJweCAwOw0KICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICBmb250LXdlaWdodDogNjAwOw0KICAgIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IsICM0YTkwZTIpOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBnYXA6IDZweDsNCn0NCg0KLmRldGFpbC1ncmlkIHsNCiAgICBkaXNwbGF5OiBncmlkOw0KICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnI7DQogICAgZ2FwOiA4cHggMTZweDsNCiAgICBmb250LXNpemU6IDEzcHg7DQp9DQoNCi5kZXRhaWwtbGFiZWwgew0KICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjcpKTsNCiAgICBmb250LXdlaWdodDogNTAwOw0KfQ0KDQouZGV0YWlsLXZhbHVlIHsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5LCByZ2JhKDI1NSwyNTUsMjU1LDAuOSkpOw0KICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7DQogICAgd29yZC1icmVhazogYnJlYWstYWxsOw0KfQ0KDQoub3V0cHV0LWNvbnRhaW5lciB7DQogICAgYmFja2dyb3VuZDogdmFyKC0tY29kZS1iZywgcmdiYSgwLDAsMCwwLjMpKTsNCiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IsIHJnYmEoMjU1LDI1NSwyNTUsMC4xKSk7DQogICAgYm9yZGVyLXJhZGl1czogNnB4Ow0KICAgIHBhZGRpbmc6IDEycHg7DQogICAgZm9udC1mYW1pbHk6ICdDb3VyaWVyIE5ldycsIG1vbm9zcGFjZTsNCiAgICBmb250LXNpemU6IDEycHg7DQogICAgbWF4LWhlaWdodDogMjAwcHg7DQogICAgb3ZlcmZsb3cteTogYXV0bzsNCiAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7DQogICAgY29sb3I6IHZhcigtLXRleHQtcHJpbWFyeSwgcmdiYSgyNTUsMjU1LDI1NSwwLjkpKTsNCiAgICBsaW5lLWhlaWdodDogMS40Ow0KfQ0KDQoubm8tb3V0cHV0IHsNCiAgICBjb2xvcjogdmFyKC0tdGV4dC1zZWNvbmRhcnksIHJnYmEoMjU1LDI1NSwyNTUsMC41KSk7DQogICAgZm9udC1zdHlsZTogaXRhbGljOw0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBwYWRkaW5nOiAyMHB4Ow0KfQ0KDQovKiBSZXNwb25zaXZlIERlc2lnbiAqLw0KQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7DQogICAgLmhlYWRlci1jb250ZW50IHsNCiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICAgICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7DQogICAgICAgIGdhcDogMTVweDsNCiAgICB9DQogICAgDQogICAgLmhlYWRlci1jb250cm9scyB7DQogICAgICAgIG1hcmdpbi1sZWZ0OiAwOw0KICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47DQogICAgfQ0KICAgIA0KICAgIC5qb2JzLWdyaWQgew0KICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjsNCiAgICB9DQogICAgDQogICAgLm1vZGFsLWNvbnRlbnQgew0KICAgICAgICB3aWR0aDogOTUlOw0KICAgICAgICBtYXJnaW46IDEwcHg7DQogICAgfQ0KICAgIA0KICAgIC5qb2ItYWN0aW9ucyB7DQogICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgfQ0KICAgIA0KICAgIC5qb2ItYWN0aW9ucyAuYnRuIHsNCiAgICAgICAgZmxleDogbm9uZTsNCiAgICB9DQp9DQoNCi8qIEFuaW1hdGlvbiBmb3IgbmV3IGpvYnMgKi8NCkBrZXlmcmFtZXMgc2xpZGVJbiB7DQogICAgZnJvbSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgyMHB4KTsNCiAgICB9DQogICAgdG8gew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7DQogICAgfQ0KfQ0KDQouam9iLWNhcmQubmV3IHsNCiAgICBhbmltYXRpb246IHNsaWRlSW4gMC4zcyBlYXNlLW91dDsNCn0NCjwvc3R5bGU+DQo8c2NyaXB0Pi8vID09PT09IFNjcmlwdDogbWFpbi5qcyA9PT09PQ0KDQoNCi8vIEZsb3cgUnVubmVyIEFwcCBmdW5jdGlvbmFsaXR5DQpjbGFzcyBGbG93UnVubmVyIHsNCiAgICBjb25zdHJ1Y3RvcigpIHsNCiAgICAgICAgdGhpcy5qb2JzID0gbmV3IE1hcCgpOw0KICAgICAgICB0aGlzLnN0YXRzID0ge307DQogICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7DQogICAgICAgIHRoaXMuZmxvd1J1bm5lclVybCA9ICd7e0ZMT1dfUlVOTkVSX0FQSX19JzsgLy8gV2lsbCBiZSB0ZW1wbGF0ZWQgYnkgU3lwbmV4IE9TDQogICAgICAgIHRoaXMucmVmcmVzaEludGVydmFsID0gbnVsbDsNCiAgICAgICAgDQogICAgICAgIHRoaXMuaW5pdCgpOw0KICAgIH0NCg0KICAgIGFzeW5jIGluaXQoKSB7DQogICAgICAgIC8vIENoZWNrIGlmIFN5cG5leEFQSSBpcyBhdmFpbGFibGUNCiAgICAgICAgaWYgKHR5cGVvZiBzeXBuZXhBUEkgIT09ICd1bmRlZmluZWQnICYmIHN5cG5leEFQSSkgew0KICAgICAgICAgICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKCk7DQogICAgICAgICAgICB0aGlzLnN0YXJ0QXV0b1JlZnJlc2goKTsNCiAgICAgICAgICAgIHRoaXMubG9hZEpvYnMoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1N5cG5leEFQSSBub3QgYXZhaWxhYmxlJyk7DQogICAgICAgICAgICB0aGlzLnNob3dFcnJvcignU3lwbmV4QVBJIG5vdCBhdmFpbGFibGUuIEZsb3cgUnVubmVyIGNhbm5vdCBmdW5jdGlvbiBwcm9wZXJseS4nKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHNldHVwRXZlbnRMaXN0ZW5lcnMoKSB7DQogICAgICAgIC8vIFJlZnJlc2ggYnV0dG9uDQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWZyZXNoLWpvYnMnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsNCiAgICAgICAgICAgIHRoaXMubG9hZEpvYnMoKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLy8gU3VibWl0IGpvYiBidXR0b25zDQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJtaXQtam9iJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7DQogICAgICAgICAgICB0aGlzLnNob3dKb2JTdWJtaXRNb2RhbCgpOw0KICAgICAgICB9KTsNCiAgICAgICAgDQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbXB0eS1zdWJtaXQtam9iJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7DQogICAgICAgICAgICB0aGlzLnNob3dKb2JTdWJtaXRNb2RhbCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyBSZXRyeSBidXR0b24NCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JldHJ5LWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gew0KICAgICAgICAgICAgdGhpcy5sb2FkSm9icygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyBNb2RhbCBjb250cm9scw0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xvc2UtbW9kYWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsNCiAgICAgICAgICAgIHRoaXMuaGlkZUpvYlN1Ym1pdE1vZGFsKCk7DQogICAgICAgIH0pOw0KICAgICAgICANCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbmNlbC1zdWJtaXQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsNCiAgICAgICAgICAgIHRoaXMuaGlkZUpvYlN1Ym1pdE1vZGFsKCk7DQogICAgICAgIH0pOw0KICAgICAgICANCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbmZpcm0tc3VibWl0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7DQogICAgICAgICAgICB0aGlzLnN1Ym1pdE5ld0pvYigpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyBKb2IgZGV0YWlscyBtb2RhbA0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xvc2UtZGV0YWlscy1tb2RhbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gew0KICAgICAgICAgICAgdGhpcy5oaWRlSm9iRGV0YWlsc01vZGFsKCk7DQogICAgICAgIH0pOw0KICAgICAgICANCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nsb3NlLWRldGFpbHMnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsNCiAgICAgICAgICAgIHRoaXMuaGlkZUpvYkRldGFpbHNNb2RhbCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyBDbG9zZSBtb2RhbHMgd2hlbiBjbGlja2luZyBvdXRzaWRlDQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2Itc3VibWl0LW1vZGFsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4gew0KICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmlkID09PSAnam9iLXN1Ym1pdC1tb2RhbCcpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmhpZGVKb2JTdWJtaXRNb2RhbCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgICAgDQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2ItZGV0YWlscy1tb2RhbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHsNCiAgICAgICAgICAgIGlmIChlLnRhcmdldC5pZCA9PT0gJ2pvYi1kZXRhaWxzLW1vZGFsJykgew0KICAgICAgICAgICAgICAgIHRoaXMuaGlkZUpvYkRldGFpbHNNb2RhbCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyBGb3JtIHN1Ym1pdA0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9iLWZvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4gew0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgdGhpcy5zdWJtaXROZXdKb2IoKTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgc3RhcnRBdXRvUmVmcmVzaCgpIHsNCiAgICAgICAgLy8gUmVmcmVzaCBldmVyeSA1IHNlY29uZHMNCiAgICAgICAgdGhpcy5yZWZyZXNoSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7DQogICAgICAgICAgICB0aGlzLmxvYWRKb2JzKGZhbHNlKTsgLy8gRG9uJ3Qgc2hvdyBsb2FkaW5nIHN0YXRlIGZvciBhdXRvLXJlZnJlc2gNCiAgICAgICAgfSwgNTAwMCk7DQogICAgfQ0KDQogICAgc3RvcEF1dG9SZWZyZXNoKCkgew0KICAgICAgICBpZiAodGhpcy5yZWZyZXNoSW50ZXJ2YWwpIHsNCiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZyZXNoSW50ZXJ2YWwpOw0KICAgICAgICAgICAgdGhpcy5yZWZyZXNoSW50ZXJ2YWwgPSBudWxsOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgYXN5bmMgbG9hZEpvYnMoc2hvd0xvYWRpbmcgPSB0cnVlKSB7DQogICAgICAgIGlmICh0aGlzLmlzTG9hZGluZykgcmV0dXJuOw0KDQogICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTsNCg0KICAgICAgICBpZiAoc2hvd0xvYWRpbmcpIHsNCiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAvLyBMb2FkIGpvYnMgYW5kIHN0YXRzIGluIHBhcmFsbGVsDQogICAgICAgICAgICBjb25zdCBbam9ic1Jlc3BvbnNlLCBzdGF0c1Jlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFsNCiAgICAgICAgICAgICAgICB0aGlzLmZldGNoSm9icygpLA0KICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hTdGF0cygpDQogICAgICAgICAgICBdKTsNCg0KICAgICAgICAgICAgdGhpcy5qb2JzID0gam9ic1Jlc3BvbnNlOw0KICAgICAgICAgICAgdGhpcy5zdGF0cyA9IHN0YXRzUmVzcG9uc2U7DQoNCiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHMoKTsNCg0KICAgICAgICAgICAgaWYgKHRoaXMuam9icy5zaXplID09PSAwKSB7DQogICAgICAgICAgICAgICAgdGhpcy5zaG93RW1wdHkoKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJKb2JzKCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgam9iczonLCBlcnJvcik7DQogICAgICAgICAgICB0aGlzLnNob3dFcnJvcihgRmFpbGVkIHRvIGxvYWQgam9iczogJHtlcnJvci5tZXNzYWdlfWApOw0KICAgICAgICB9IGZpbmFsbHkgew0KICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGFzeW5jIGZldGNoSm9icygpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBqb2JzIGZyb206JywgYCR7dGhpcy5mbG93UnVubmVyVXJsfS9hcGkvam9ic2ApOw0KICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzeXBuZXhBUEkucHJveHlHRVQoYCR7dGhpcy5mbG93UnVubmVyVXJsfS9hcGkvam9ic2ApOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ0pvYnMgcmVzcG9uc2U6JywgcmVzcG9uc2UpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IHJlc3BvbnNlIGZvcm1hdHMNCiAgICAgICAgICAgIGxldCBqb2JzRGF0YTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8gSWYgcmVzcG9uc2UgaGFzIGNvbnRlbnQgZmllbGQsIHBhcnNlIGl0IGFzIEpTT04NCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5jb250ZW50KSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgam9ic0RhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmNvbnRlbnQpOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gcGFyc2Ugam9icyByZXNwb25zZSBjb250ZW50IGFzIEpTT046JywgZSk7DQogICAgICAgICAgICAgICAgICAgIGpvYnNEYXRhID0gcmVzcG9uc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAvLyBGb3JtYXQ6IHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogeyBqb2JzOiBbLi4uXSB9IH0NCiAgICAgICAgICAgICAgICBqb2JzRGF0YSA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmpvYnMpIHsNCiAgICAgICAgICAgICAgICAvLyBGb3JtYXQ6IHsgam9iczogWy4uLl0gfQ0KICAgICAgICAgICAgICAgIGpvYnNEYXRhID0gcmVzcG9uc2U7DQogICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2UpKSB7DQogICAgICAgICAgICAgICAgLy8gRm9ybWF0OiBbLi4uXQ0KICAgICAgICAgICAgICAgIGpvYnNEYXRhID0geyBqb2JzOiByZXNwb25zZSB9Ow0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAvLyBBc3N1bWUgdGhlIHJlc3BvbnNlIGl0c2VsZiBpcyB0aGUgZGF0YQ0KICAgICAgICAgICAgICAgIGpvYnNEYXRhID0gcmVzcG9uc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQYXJzZWQgam9icyBkYXRhOicsIGpvYnNEYXRhKTsNCg0KICAgICAgICAgICAgY29uc3Qgam9ic01hcCA9IG5ldyBNYXAoKTsNCiAgICAgICAgICAgIGlmIChqb2JzRGF0YSAmJiBqb2JzRGF0YS5qb2JzICYmIEFycmF5LmlzQXJyYXkoam9ic0RhdGEuam9icykpIHsNCiAgICAgICAgICAgICAgICBqb2JzRGF0YS5qb2JzLmZvckVhY2goam9iID0+IHsNCiAgICAgICAgICAgICAgICAgICAgam9ic01hcC5zZXQoam9iLmlkLCBqb2IpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGpvYnNEYXRhKSkgew0KICAgICAgICAgICAgICAgIC8vIElmIGpvYnNEYXRhIGlzIGRpcmVjdGx5IGFuIGFycmF5IG9mIGpvYnMNCiAgICAgICAgICAgICAgICBqb2JzRGF0YS5mb3JFYWNoKGpvYiA9PiB7DQogICAgICAgICAgICAgICAgICAgIGpvYnNNYXAuc2V0KGpvYi5pZCwgam9iKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29uc29sZS5sb2coJ0pvYnMgbWFwIHNpemU6Jywgam9ic01hcC5zaXplKTsNCiAgICAgICAgICAgIHJldHVybiBqb2JzTWFwOw0KICAgICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgam9iczonLCBlcnJvcik7DQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBqb2JzOiAke2Vycm9yLm1lc3NhZ2V9YCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBhc3luYyBmZXRjaFN0YXRzKCkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIHN0YXRzIGZyb206JywgYCR7dGhpcy5mbG93UnVubmVyVXJsfS9hcGkvc3RhdHNgKTsNCiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3lwbmV4QVBJLnByb3h5R0VUKGAke3RoaXMuZmxvd1J1bm5lclVybH0vYXBpL3N0YXRzYCk7DQogICAgICAgICAgICBjb25zb2xlLmxvZygnU3RhdHMgcmVzcG9uc2U6JywgcmVzcG9uc2UpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IHJlc3BvbnNlIGZvcm1hdHMNCiAgICAgICAgICAgIGxldCBzdGF0c0RhdGE7DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIElmIHJlc3BvbnNlIGhhcyBjb250ZW50IGZpZWxkLCBwYXJzZSBpdCBhcyBKU09ODQogICAgICAgICAgICBpZiAocmVzcG9uc2UuY29udGVudCkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIHN0YXRzRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UuY29udGVudCk7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBwYXJzZSBzdGF0cyByZXNwb25zZSBjb250ZW50IGFzIEpTT046JywgZSk7DQogICAgICAgICAgICAgICAgICAgIHN0YXRzRGF0YSA9IHJlc3BvbnNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3VjY2VzcyAmJiByZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgLy8gRm9ybWF0OiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IHsgdG90YWxfam9iczogMCwgLi4uIH0gfQ0KICAgICAgICAgICAgICAgIHN0YXRzRGF0YSA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnRvdGFsX2pvYnMgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIC8vIEZvcm1hdDogeyB0b3RhbF9qb2JzOiAwLCBxdWV1ZWQ6IDAsIC4uLiB9DQogICAgICAgICAgICAgICAgc3RhdHNEYXRhID0gcmVzcG9uc2U7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIC8vIEFzc3VtZSB0aGUgcmVzcG9uc2UgaXRzZWxmIGlzIHRoZSBkYXRhDQogICAgICAgICAgICAgICAgc3RhdHNEYXRhID0gcmVzcG9uc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQYXJzZWQgc3RhdHMgZGF0YTonLCBzdGF0c0RhdGEpOw0KICAgICAgICAgICAgcmV0dXJuIHN0YXRzRGF0YSB8fCB7DQogICAgICAgICAgICAgICAgdG90YWxfam9iczogMCwNCiAgICAgICAgICAgICAgICBxdWV1ZWQ6IDAsDQogICAgICAgICAgICAgICAgcnVubmluZzogMCwNCiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IDAsDQogICAgICAgICAgICAgICAgZmFpbGVkOiAwLA0KICAgICAgICAgICAgICAgIGNhbmNlbGxlZDogMA0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN0YXRzOicsIGVycm9yKTsNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdG90YWxfam9iczogMCwNCiAgICAgICAgICAgICAgICBxdWV1ZWQ6IDAsDQogICAgICAgICAgICAgICAgcnVubmluZzogMCwNCiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IDAsDQogICAgICAgICAgICAgICAgZmFpbGVkOiAwLA0KICAgICAgICAgICAgICAgIGNhbmNlbGxlZDogMA0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHVwZGF0ZVN0YXRzKCkgew0KICAgICAgICBjb25zdCBzdGF0c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9iLXN0YXRzJyk7DQogICAgICAgIGlmIChzdGF0c0VsZW1lbnQgJiYgdGhpcy5zdGF0cykgew0KICAgICAgICAgICAgY29uc3QgeyBxdWV1ZWQgPSAwLCBydW5uaW5nID0gMCwgY29tcGxldGVkID0gMCwgZmFpbGVkID0gMCwgY2FuY2VsbGVkID0gMCB9ID0gdGhpcy5zdGF0czsNCiAgICAgICAgICAgIHN0YXRzRWxlbWVudC50ZXh0Q29udGVudCA9IGBROiR7cXVldWVkfSBSOiR7cnVubmluZ30gQzoke2NvbXBsZXRlZH0gRjoke2ZhaWxlZH0gWDoke2NhbmNlbGxlZH1gOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmVuZGVySm9icygpIHsNCiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYnMtZ3JpZCcpOw0KICAgICAgICBjb25zdCBqb2JzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYnMtY29udGFpbmVyJyk7DQogICAgICAgIA0KICAgICAgICAvLyBDbGVhciBleGlzdGluZyBjb250ZW50DQogICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJzsNCiAgICAgICAgDQogICAgICAgIC8vIFNvcnQgam9icyBieSBjcmVhdGVkIGRhdGUgKG5ld2VzdCBmaXJzdCkNCiAgICAgICAgY29uc3Qgc29ydGVkSm9icyA9IEFycmF5LmZyb20odGhpcy5qb2JzLnZhbHVlcygpKS5zb3J0KChhLCBiKSA9PiB7DQogICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoYi5jcmVhdGVkX2F0KSAtIG5ldyBEYXRlKGEuY3JlYXRlZF9hdCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIHNvcnRlZEpvYnMuZm9yRWFjaChqb2IgPT4gew0KICAgICAgICAgICAgY29uc3Qgam9iQ2FyZCA9IHRoaXMuY3JlYXRlSm9iQ2FyZChqb2IpOw0KICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGpvYkNhcmQpOw0KICAgICAgICB9KTsNCg0KICAgICAgICB0aGlzLnNob3dKb2JzKCk7DQogICAgfQ0KDQogICAgY3JlYXRlSm9iQ2FyZChqb2IpIHsNCiAgICAgICAgY29uc3QgY2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOw0KICAgICAgICBjYXJkLmNsYXNzTmFtZSA9ICdqb2ItY2FyZCc7DQogICAgICAgIGNhcmQuaW5uZXJIVE1MID0gYA0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iam9iLWhlYWRlciI+DQogICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iam9iLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY29nIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMuZ2V0Sm9iRGlzcGxheU5hbWUoam9iLndvcmtmbG93X3BhdGgpfQ0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iam9iLWlkIj4ke2pvYi5pZH08L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJqb2Itc3RhdHVzICR7am9iLnN0YXR1c30iPiR7am9iLnN0YXR1c308L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJqb2ItZGV0YWlscyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iam9iLWRldGFpbC1yb3ciPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iam9iLWRldGFpbC1sYWJlbCI+V29ya2Zsb3c6PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iam9iLWRldGFpbC12YWx1ZSBqb2Itd29ya2Zsb3ctcGF0aCI+JHtqb2Iud29ya2Zsb3dfcGF0aH08L3NwYW4+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iam9iLWRldGFpbC1yb3ciPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iam9iLWRldGFpbC1sYWJlbCI+Q3JlYXRlZDo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqb2ItZGV0YWlsLXZhbHVlIj4ke3RoaXMuZm9ybWF0RGF0ZVRpbWUoam9iLmNyZWF0ZWRfYXQpfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAke2pvYi5zdGFydGVkX2F0ID8gYA0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpvYi1kZXRhaWwtcm93Ij4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImpvYi1kZXRhaWwtbGFiZWwiPlN0YXJ0ZWQ6PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iam9iLWRldGFpbC12YWx1ZSI+JHt0aGlzLmZvcm1hdERhdGVUaW1lKGpvYi5zdGFydGVkX2F0KX08L3NwYW4+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgYCA6ICcnfQ0KICAgICAgICAgICAgICAgICR7am9iLmNvbXBsZXRlZF9hdCA/IGANCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJqb2ItZGV0YWlsLXJvdyI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqb2ItZGV0YWlsLWxhYmVsIj5Db21wbGV0ZWQ6PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iam9iLWRldGFpbC12YWx1ZSI+JHt0aGlzLmZvcm1hdERhdGVUaW1lKGpvYi5jb21wbGV0ZWRfYXQpfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICBgIDogJyd9DQogICAgICAgICAgICAgICAgJHtqb2Iuc3RhcnRlZF9hdCAmJiAham9iLmNvbXBsZXRlZF9hdCA/IGANCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJqb2ItZGV0YWlsLXJvdyI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqb2ItZGV0YWlsLWxhYmVsIj5EdXJhdGlvbjo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqb2ItZGV0YWlsLXZhbHVlIj4ke3RoaXMuY2FsY3VsYXRlRHVyYXRpb24oam9iLnN0YXJ0ZWRfYXQpfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICBgIDogJyd9DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iam9iLWFjdGlvbnMiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4taW5mbyBidG4tZGV0YWlscyIgZGF0YS1qb2ItaWQ9IiR7am9iLmlkfSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtaW5mby1jaXJjbGUiPjwvaT4gRGV0YWlscw0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICR7am9iLnN0YXR1cyA9PT0gJ3J1bm5pbmcnIHx8IGpvYi5zdGF0dXMgPT09ICdxdWV1ZWQnID8gYA0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tZGFuZ2VyIGJ0bi1jYW5jZWwiIGRhdGEtam9iLWlkPSIke2pvYi5pZH0iPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXN0b3AiPjwvaT4gQ2FuY2VsDQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgYCA6ICcnfQ0KICAgICAgICAgICAgICAgICR7am9iLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgfHwgam9iLnN0YXR1cyA9PT0gJ2ZhaWxlZCcgfHwgam9iLnN0YXR1cyA9PT0gJ2NhbmNlbGxlZCcgPyBgDQogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIgYnRuLWRlbGV0ZSIgZGF0YS1qb2ItaWQ9IiR7am9iLmlkfSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdHJhc2giPjwvaT4gRGVsZXRlDQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgYCA6ICcnfQ0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIGA7DQoNCiAgICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVycyBmb3Igam9iIGFjdGlvbnMNCiAgICAgICAgY29uc3QgZGV0YWlsc0J0biA9IGNhcmQucXVlcnlTZWxlY3RvcignLmJ0bi1kZXRhaWxzJyk7DQogICAgICAgIGRldGFpbHNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7DQogICAgICAgICAgICB0aGlzLnNob3dKb2JEZXRhaWxzKGpvYi5pZCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIGNvbnN0IGNhbmNlbEJ0biA9IGNhcmQucXVlcnlTZWxlY3RvcignLmJ0bi1jYW5jZWwnKTsNCiAgICAgICAgaWYgKGNhbmNlbEJ0bikgew0KICAgICAgICAgICAgY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gew0KICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsSm9iKGpvYi5pZCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IGRlbGV0ZUJ0biA9IGNhcmQucXVlcnlTZWxlY3RvcignLmJ0bi1kZWxldGUnKTsNCiAgICAgICAgaWYgKGRlbGV0ZUJ0bikgew0KICAgICAgICAgICAgZGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gew0KICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlSm9iKGpvYi5pZCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBjYXJkOw0KICAgIH0NCg0KICAgIGdldEpvYkRpc3BsYXlOYW1lKHdvcmtmbG93UGF0aCkgew0KICAgICAgICAvLyBFeHRyYWN0IGZpbGVuYW1lIGZyb20gcGF0aA0KICAgICAgICBjb25zdCBwYXJ0cyA9IHdvcmtmbG93UGF0aC5zcGxpdCgnLycpOw0KICAgICAgICByZXR1cm4gcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gfHwgJ1Vua25vd24gV29ya2Zsb3cnOw0KICAgIH0NCg0KICAgIGZvcm1hdERhdGVUaW1lKGRhdGVTdHJpbmcpIHsNCiAgICAgICAgaWYgKCFkYXRlU3RyaW5nKSByZXR1cm4gJ04vQSc7DQogICAgICAgIA0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHJpbmcpOw0KICAgICAgICAgICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVTdHJpbmcoKTsNCiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgICAgIHJldHVybiBkYXRlU3RyaW5nOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgY2FsY3VsYXRlRHVyYXRpb24oc3RhcnRUaW1lKSB7DQogICAgICAgIGlmICghc3RhcnRUaW1lKSByZXR1cm4gJ04vQSc7DQogICAgICAgIA0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZShzdGFydFRpbWUpOw0KICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTsNCiAgICAgICAgICAgIGNvbnN0IGRpZmZNcyA9IG5vdyAtIHN0YXJ0Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcihkaWZmTXMgLyA2MDAwMCk7DQogICAgICAgICAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcigoZGlmZk1zICUgNjAwMDApIC8gMTAwMCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiBgJHttaW51dGVzfW0gJHtzZWNvbmRzfXNgOw0KICAgICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICAgICAgcmV0dXJuICdOL0EnOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgYXN5bmMgY2FuY2VsSm9iKGpvYklkKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBjb25zb2xlLmxvZygnQ2FuY2VsbGluZyBqb2I6Jywgam9iSWQpOw0KICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzeXBuZXhBUEkucHJveHlERUxFVEUoYCR7dGhpcy5mbG93UnVubmVyVXJsfS9hcGkvam9icy8ke2pvYklkfWApOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ0NhbmNlbCByZXNwb25zZTonLCByZXNwb25zZSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgcmVzcG9uc2UgZm9ybWF0cw0KICAgICAgICAgICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTsNCiAgICAgICAgICAgIGxldCByZXNwb25zZURhdGEgPSByZXNwb25zZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8gSWYgcmVzcG9uc2UgaGFzIGNvbnRlbnQgZmllbGQsIHBhcnNlIGl0IGFzIEpTT04NCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5jb250ZW50KSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VEYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZS5jb250ZW50KTsNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHBhcnNlIGNhbmNlbCByZXNwb25zZSBjb250ZW50IGFzIEpTT046JywgZSk7DQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRGF0YSA9IHJlc3BvbnNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1Y2Nlc3MgaW5kaWNhdG9ycw0KICAgICAgICAgICAgaWYgKHJlc3BvbnNlRGF0YS5zdWNjZXNzKSB7DQogICAgICAgICAgICAgICAgc3VjY2VzcyA9IHJlc3BvbnNlRGF0YS5zdWNjZXNzOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZURhdGEubWVzc2FnZSkgew0KICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBtZXNzYWdlLCBhc3N1bWUgc3VjY2Vzcw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZURhdGEuam9iX2lkKSB7DQogICAgICAgICAgICAgICAgLy8gSWYgam9iX2lkIGlzIHJldHVybmVkLCBhc3N1bWUgc3VjY2Vzcw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNfY29kZSA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPCAzMDApIHsNCiAgICAgICAgICAgICAgICAvLyBJZiBIVFRQIHN0YXR1cyBpcyAyeHgsIGFzc3VtZSBzdWNjZXNzDQogICAgICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7DQogICAgICAgICAgICAgICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oYEpvYiAke2pvYklkfSBjYW5jZWxsZWQgc3VjY2Vzc2Z1bGx5YCwgJ3N1Y2Nlc3MnKTsNCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRKb2JzKGZhbHNlKTsgLy8gUmVmcmVzaCBqb2JzIHdpdGhvdXQgbG9hZGluZyBzdGF0ZQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2VEYXRhLmVycm9yIHx8IHJlc3BvbnNlLmNvbnRlbnQgfHwgJ0ZhaWxlZCB0byBjYW5jZWwgam9iJyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjYW5jZWxsaW5nIGpvYjonLCBlcnJvcik7DQogICAgICAgICAgICBzeXBuZXhBUEkuc2hvd05vdGlmaWNhdGlvbihgRmFpbGVkIHRvIGNhbmNlbCBqb2I6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGFzeW5jIGRlbGV0ZUpvYihqb2JJZCkgew0KICAgICAgICAvLyBTaG93IGNvbmZpcm1hdGlvbiBkaWFsb2cNCiAgICAgICAgaWYgKCFjb25maXJtKGBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcGVybWFuZW50bHkgZGVsZXRlIGpvYiAke2pvYklkfT9gKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWxldGluZyBqb2I6Jywgam9iSWQpOw0KICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzeXBuZXhBUEkucHJveHlERUxFVEUoYCR7dGhpcy5mbG93UnVubmVyVXJsfS9hcGkvam9icy8ke2pvYklkfS9kZWxldGVgKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWxldGUgcmVzcG9uc2U6JywgcmVzcG9uc2UpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IHJlc3BvbnNlIGZvcm1hdHMNCiAgICAgICAgICAgIGxldCBzdWNjZXNzID0gZmFsc2U7DQogICAgICAgICAgICBsZXQgcmVzcG9uc2VEYXRhID0gcmVzcG9uc2U7DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIElmIHJlc3BvbnNlIGhhcyBjb250ZW50IGZpZWxkLCBwYXJzZSBpdCBhcyBKU09ODQogICAgICAgICAgICBpZiAocmVzcG9uc2UuY29udGVudCkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UuY29udGVudCk7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBwYXJzZSBkZWxldGUgcmVzcG9uc2UgY29udGVudCBhcyBKU09OOicsIGUpOw0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSByZXNwb25zZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBzdWNjZXNzIGluZGljYXRvcnMNCiAgICAgICAgICAgIGlmIChyZXNwb25zZURhdGEuc3VjY2Vzcykgew0KICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSByZXNwb25zZURhdGEuc3VjY2VzczsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VEYXRhLm1lc3NhZ2UpIHsNCiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgbWVzc2FnZSwgYXNzdW1lIHN1Y2Nlc3MNCiAgICAgICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VEYXRhLmpvYl9pZCkgew0KICAgICAgICAgICAgICAgIC8vIElmIGpvYl9pZCBpcyByZXR1cm5lZCwgYXNzdW1lIHN1Y2Nlc3MNCiAgICAgICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzX2NvZGUgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1c19jb2RlIDwgMzAwKSB7DQogICAgICAgICAgICAgICAgLy8gSWYgSFRUUCBzdGF0dXMgaXMgMnh4LCBhc3N1bWUgc3VjY2Vzcw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAoc3VjY2Vzcykgew0KICAgICAgICAgICAgICAgIHN5cG5leEFQSS5zaG93Tm90aWZpY2F0aW9uKGBKb2IgJHtqb2JJZH0gZGVsZXRlZCBzdWNjZXNzZnVsbHlgLCAnc3VjY2VzcycpOw0KICAgICAgICAgICAgICAgIHRoaXMubG9hZEpvYnMoZmFsc2UpOyAvLyBSZWZyZXNoIGpvYnMgd2l0aG91dCBsb2FkaW5nIHN0YXRlDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZURhdGEuZXJyb3IgfHwgcmVzcG9uc2UuY29udGVudCB8fCAnRmFpbGVkIHRvIGRlbGV0ZSBqb2InKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIGpvYjonLCBlcnJvcik7DQogICAgICAgICAgICBzeXBuZXhBUEkuc2hvd05vdGlmaWNhdGlvbihgRmFpbGVkIHRvIGRlbGV0ZSBqb2I6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHNob3dKb2JEZXRhaWxzKGpvYklkKSB7DQogICAgICAgIGNvbnN0IGpvYiA9IHRoaXMuam9icy5nZXQoam9iSWQpOw0KICAgICAgICBpZiAoIWpvYikgew0KICAgICAgICAgICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oJ0pvYiBub3QgZm91bmQnLCAnZXJyb3InKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9iLWRldGFpbHMtY29udGVudCcpOw0KICAgICAgICBjb250ZW50LmlubmVySFRNTCA9IGANCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRldGFpbC1zZWN0aW9uIj4NCiAgICAgICAgICAgICAgICA8aDQ+PGkgY2xhc3M9ImZhcyBmYS1pbmZvLWNpcmNsZSI+PC9pPiBKb2IgSW5mb3JtYXRpb248L2g0Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRldGFpbC1ncmlkIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRldGFpbC1sYWJlbCI+SUQ6PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGV0YWlsLXZhbHVlIj4ke2pvYi5pZH08L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWwtbGFiZWwiPlN0YXR1czo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWwtdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImpvYi1zdGF0dXMgJHtqb2Iuc3RhdHVzfSI+JHtqb2Iuc3RhdHVzfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGV0YWlsLWxhYmVsIj5Xb3JrZmxvdyBQYXRoOjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRldGFpbC12YWx1ZSI+JHtqb2Iud29ya2Zsb3dfcGF0aH08L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWwtbGFiZWwiPlN5cG5leCBPUyBVUkw6PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGV0YWlsLXZhbHVlIj4ke2pvYi5zeXBuZXhfb3NfdXJsfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWwtc2VjdGlvbiI+DQogICAgICAgICAgICAgICAgPGg0PjxpIGNsYXNzPSJmYXMgZmEtY2xvY2siPjwvaT4gVGltaW5nPC9oND4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWwtZ3JpZCI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWwtbGFiZWwiPkNyZWF0ZWQ6PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGV0YWlsLXZhbHVlIj4ke3RoaXMuZm9ybWF0RGF0ZVRpbWUoam9iLmNyZWF0ZWRfYXQpfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRldGFpbC1sYWJlbCI+U3RhcnRlZDo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWwtdmFsdWUiPiR7dGhpcy5mb3JtYXREYXRlVGltZShqb2Iuc3RhcnRlZF9hdCkgfHwgJ05vdCBzdGFydGVkJ308L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWwtbGFiZWwiPkNvbXBsZXRlZDo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWwtdmFsdWUiPiR7dGhpcy5mb3JtYXREYXRlVGltZShqb2IuY29tcGxldGVkX2F0KSB8fCAnTm90IGNvbXBsZXRlZCd9PC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICR7am9iLmVycm9yID8gYA0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlsLXNlY3Rpb24iPg0KICAgICAgICAgICAgICAgIDxoND48aSBjbGFzcz0iZmFzIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlIj48L2k+IEVycm9yPC9oND4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdXRwdXQtY29udGFpbmVyIj4ke2pvYi5lcnJvcn08L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgYCA6ICcnfQ0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWwtc2VjdGlvbiI+DQogICAgICAgICAgICAgICAgPGg0PjxpIGNsYXNzPSJmYXMgZmEtdGVybWluYWwiPjwvaT4gT3V0cHV0PC9oND4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdXRwdXQtY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgJHtqb2Iub3V0cHV0ID8gam9iLm91dHB1dCA6ICc8ZGl2IGNsYXNzPSJuby1vdXRwdXQiPk5vIG91dHB1dCBhdmFpbGFibGU8L2Rpdj4nfQ0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIGA7DQoNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYi1kZXRhaWxzLW1vZGFsJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JzsNCiAgICB9DQoNCiAgICBzaG93Sm9iU3VibWl0TW9kYWwoKSB7DQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2Itc3VibWl0LW1vZGFsJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JzsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dvcmtmbG93LXBhdGgnKS5mb2N1cygpOw0KICAgIH0NCg0KICAgIGhpZGVKb2JTdWJtaXRNb2RhbCgpIHsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYi1zdWJtaXQtbW9kYWwnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOw0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9iLWZvcm0nKS5yZXNldCgpOw0KICAgIH0NCg0KICAgIGhpZGVKb2JEZXRhaWxzTW9kYWwoKSB7DQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2ItZGV0YWlscy1tb2RhbCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7DQogICAgfQ0KDQogICAgYXN5bmMgc3VibWl0TmV3Sm9iKCkgew0KICAgICAgICBjb25zdCB3b3JrZmxvd1BhdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd29ya2Zsb3ctcGF0aCcpLnZhbHVlLnRyaW0oKTsNCiAgICAgICAgY29uc3Qgc3lwbmV4T3NVcmwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3lwbmV4LW9zLXVybCcpLnZhbHVlLnRyaW0oKTsNCg0KICAgICAgICBpZiAoIXdvcmtmbG93UGF0aCB8fCAhc3lwbmV4T3NVcmwpIHsNCiAgICAgICAgICAgIHN5cG5leEFQSS5zaG93Tm90aWZpY2F0aW9uKCdQbGVhc2UgZmlsbCBpbiBhbGwgcmVxdWlyZWQgZmllbGRzJywgJ2Vycm9yJyk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCBzdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29uZmlybS1zdWJtaXQnKTsNCiAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gc3VibWl0QnRuLmlubmVySFRNTDsNCiAgICAgICAgDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgc3RhdGUNCiAgICAgICAgICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9IHRydWU7DQogICAgICAgICAgICBzdWJtaXRCdG4uaW5uZXJIVE1MID0gJzxpIGNsYXNzPSJmYXMgZmEtc3Bpbm5lciBmYS1zcGluIj48L2k+IFN1Ym1pdHRpbmcuLi4nOw0KDQogICAgICAgICAgICBjb25zb2xlLmxvZygnU3VibWl0dGluZyBqb2I6JywgeyB3b3JrZmxvd1BhdGgsIHN5cG5leE9zVXJsIH0pOw0KICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzeXBuZXhBUEkucHJveHlKU09OKGAke3RoaXMuZmxvd1J1bm5lclVybH0vYXBpL2pvYnNgLCB7DQogICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsDQogICAgICAgICAgICAgICAgZGF0YTogew0KICAgICAgICAgICAgICAgICAgICB3b3JrZmxvd19wYXRoOiB3b3JrZmxvd1BhdGgsDQogICAgICAgICAgICAgICAgICAgIHN5cG5leF9vc191cmw6IHN5cG5leE9zVXJsDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBjb25zb2xlLmxvZygnU3VibWl0IHJlc3BvbnNlOicsIHJlc3BvbnNlKTsNCg0KICAgICAgICAgICAgLy8gSGFuZGxlIGRpZmZlcmVudCByZXNwb25zZSBmb3JtYXRzDQogICAgICAgICAgICBsZXQgc3VjY2VzcyA9IGZhbHNlOw0KICAgICAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9IHJlc3BvbnNlOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAvLyBJZiByZXNwb25zZSBoYXMgY29udGVudCBmaWVsZCwgcGFyc2UgaXQgYXMgSlNPTg0KICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNvbnRlbnQpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmNvbnRlbnQpOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gcGFyc2UgcmVzcG9uc2UgY29udGVudCBhcyBKU09OOicsIGUpOw0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSByZXNwb25zZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBzdWNjZXNzIGluZGljYXRvcnMNCiAgICAgICAgICAgIGlmIChyZXNwb25zZURhdGEuc3VjY2Vzcykgew0KICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSByZXNwb25zZURhdGEuc3VjY2VzczsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VEYXRhLmpvYl9pZCB8fCByZXNwb25zZURhdGEuaWQpIHsNCiAgICAgICAgICAgICAgICAvLyBJZiBqb2JfaWQgb3IgaWQgaXMgcmV0dXJuZWQsIGFzc3VtZSBzdWNjZXNzDQogICAgICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlRGF0YS5jcmVhdGVkX2F0KSB7DQogICAgICAgICAgICAgICAgLy8gSWYgY3JlYXRlZF9hdCBpcyBwcmVzZW50LCBhc3N1bWUgc3VjY2Vzcw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNfY29kZSA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPCAzMDApIHsNCiAgICAgICAgICAgICAgICAvLyBJZiBIVFRQIHN0YXR1cyBpcyAyeHgsIGFzc3VtZSBzdWNjZXNzDQogICAgICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7DQogICAgICAgICAgICAgICAgY29uc3Qgam9iSWQgPSByZXNwb25zZURhdGEuam9iX2lkIHx8IHJlc3BvbnNlRGF0YS5pZCB8fCAndW5rbm93bic7DQogICAgICAgICAgICAgICAgc3lwbmV4QVBJLnNob3dOb3RpZmljYXRpb24oYEpvYiAke2pvYklkfSBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5IWAsICdzdWNjZXNzJyk7DQogICAgICAgICAgICAgICAgdGhpcy5oaWRlSm9iU3VibWl0TW9kYWwoKTsNCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRKb2JzKGZhbHNlKTsgLy8gUmVmcmVzaCBqb2JzIHdpdGhvdXQgbG9hZGluZyBzdGF0ZQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2VEYXRhLmVycm9yIHx8IHJlc3BvbnNlLmNvbnRlbnQgfHwgJ0ZhaWxlZCB0byBzdWJtaXQgam9iJyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzdWJtaXR0aW5nIGpvYjonLCBlcnJvcik7DQogICAgICAgICAgICBzeXBuZXhBUEkuc2hvd05vdGlmaWNhdGlvbihgRmFpbGVkIHRvIHN1Ym1pdCBqb2I6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTsNCiAgICAgICAgfSBmaW5hbGx5IHsNCiAgICAgICAgICAgIC8vIFJlc3RvcmUgYnV0dG9uIHN0YXRlDQogICAgICAgICAgICBzdWJtaXRCdG4uZGlzYWJsZWQgPSBmYWxzZTsNCiAgICAgICAgICAgIHN1Ym1pdEJ0bi5pbm5lckhUTUwgPSBvcmlnaW5hbFRleHQ7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBzaG93TG9hZGluZygpIHsNCiAgICAgICAgdGhpcy5oaWRlQWxsVmlld3MoKTsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmctc3RhdGUnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOw0KICAgIH0NCg0KICAgIHNob3dFcnJvcihtZXNzYWdlKSB7DQogICAgICAgIHRoaXMuaGlkZUFsbFZpZXdzKCk7DQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlcnJvci1tZXNzYWdlJykudGV4dENvbnRlbnQgPSBtZXNzYWdlOw0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXJyb3Itc3RhdGUnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOw0KICAgIH0NCg0KICAgIHNob3dFbXB0eSgpIHsNCiAgICAgICAgdGhpcy5oaWRlQWxsVmlld3MoKTsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtcHR5LXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JzsNCiAgICB9DQoNCiAgICBzaG93Sm9icygpIHsNCiAgICAgICAgdGhpcy5oaWRlQWxsVmlld3MoKTsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYnMtY29udGFpbmVyJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JzsNCiAgICB9DQoNCiAgICBoaWRlQWxsVmlld3MoKSB7DQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nLXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9yLXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtcHR5LXN0YXRlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYnMtY29udGFpbmVyJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCiAgICB9DQp9DQoNCi8vIEluaXRpYWxpemUgdGhlIEZsb3cgUnVubmVyIGFwcA0KY29uc3QgZmxvd1J1bm5lciA9IG5ldyBGbG93UnVubmVyKCk7DQo8L3NjcmlwdD4="
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-26T06:33:45.443155",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\flow_runner"
  }
}