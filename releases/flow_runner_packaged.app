{
  "app_metadata": {
    "id": "flow_runner",
    "name": "Flow Runner",
    "description": "Background workflow execution manager with job monitoring and control",
    "icon": "fas fa-cogs",
    "keywords": [
      "workflow",
      "automation",
      "jobs",
      "background",
      "execution",
      "monitor"
    ],
    "author": "Sypnex OS",
    "version": "1.0.1",
    "type": "user_app",
    "scripts": [
      "main.js"
    ],
    "styles": [
      "style.css"
    ],
    "settings": []
  },
  "files": {
    "flow_runner.app": "ew0KICAiaWQiOiAiZmxvd19ydW5uZXIiLA0KICAibmFtZSI6ICJGbG93IFJ1bm5lciIsDQogICJkZXNjcmlwdGlvbiI6ICJCYWNrZ3JvdW5kIHdvcmtmbG93IGV4ZWN1dGlvbiBtYW5hZ2VyIHdpdGggam9iIG1vbml0b3JpbmcgYW5kIGNvbnRyb2wiLA0KICAiaWNvbiI6ICJmYXMgZmEtY29ncyIsDQogICJrZXl3b3JkcyI6IFsid29ya2Zsb3ciLCAiYXV0b21hdGlvbiIsICJqb2JzIiwgImJhY2tncm91bmQiLCAiZXhlY3V0aW9uIiwgIm1vbml0b3IiXSwNCiAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAidmVyc2lvbiI6ICIxLjAuMSIsDQogICJ0eXBlIjogInVzZXJfYXBwIiwNCiAgInNjcmlwdHMiOiBbIm1haW4uanMiXSwNCiAgInN0eWxlcyI6IFsic3R5bGUuY3NzIl0sDQogICJzZXR0aW5ncyI6IFtdDQp9DQo=",
    "flow_runner.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-04T18:48:32.796604",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\flow_runner"
  }
}