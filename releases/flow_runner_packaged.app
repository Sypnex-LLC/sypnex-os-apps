{
  "app_metadata": {
    "id": "flow_runner",
    "name": "Flow Runner",
    "description": "Background workflow execution manager with job monitoring and control",
    "icon": "fas fa-cogs",
    "keywords": [
      "workflow",
      "automation",
      "jobs",
      "background",
      "execution",
      "monitor"
    ],
    "author": "Sypnex OS",
    "version": "1.0.0",
    "type": "user_app",
    "scripts": [
      "main.js"
    ],
    "styles": [
      "style.css"
    ],
    "settings": [
      {
        "key": "FLOW_RUNNER_API",
        "name": "Flow Runner API",
        "type": "string",
        "value": "http://127.0.0.1:8080",
        "description": "Flow Runner API URL"
      },
      {
        "key": "SYPNEX_OS_API",
        "name": "Sypnex OS API",
        "type": "string",
        "value": "http://127.0.0.1:5000",
        "description": "Sypnex OS Runner API URL"
      }
    ]
  },
  "files": {
    "flow_runner.app": "ew0KICAiaWQiOiAiZmxvd19ydW5uZXIiLA0KICAibmFtZSI6ICJGbG93IFJ1bm5lciIsDQogICJkZXNjcmlwdGlvbiI6ICJCYWNrZ3JvdW5kIHdvcmtmbG93IGV4ZWN1dGlvbiBtYW5hZ2VyIHdpdGggam9iIG1vbml0b3JpbmcgYW5kIGNvbnRyb2wiLA0KICAiaWNvbiI6ICJmYXMgZmEtY29ncyIsDQogICJrZXl3b3JkcyI6IFsid29ya2Zsb3ciLCAiYXV0b21hdGlvbiIsICJqb2JzIiwgImJhY2tncm91bmQiLCAiZXhlY3V0aW9uIiwgIm1vbml0b3IiXSwNCiAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAidmVyc2lvbiI6ICIxLjAuMCIsDQogICJ0eXBlIjogInVzZXJfYXBwIiwNCiAgInNjcmlwdHMiOiBbIm1haW4uanMiXSwNCiAgInN0eWxlcyI6IFsic3R5bGUuY3NzIl0sDQogICJzZXR0aW5ncyI6IFt7DQogICAgICAia2V5IjogIkZMT1dfUlVOTkVSX0FQSSIsDQogICAgICAibmFtZSI6ICJGbG93IFJ1bm5lciBBUEkiLA0KICAgICAgInR5cGUiOiAic3RyaW5nIiwNCiAgICAgICJ2YWx1ZSI6ICJodHRwOi8vMTI3LjAuMC4xOjgwODAiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIkZsb3cgUnVubmVyIEFQSSBVUkwiDQogICAgfSx7DQogICAgICAia2V5IjogIlNZUE5FWF9PU19BUEkiLA0KICAgICAgIm5hbWUiOiAiU3lwbmV4IE9TIEFQSSIsDQogICAgICAidHlwZSI6ICJzdHJpbmciLA0KICAgICAgInZhbHVlIjogImh0dHA6Ly8xMjcuMC4wLjE6NTAwMCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiU3lwbmV4IE9TIFJ1bm5lciBBUEkgVVJMIg0KICAgIH1dDQp9DQo=",
    "flow_runner.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-28T06:41:24.820923",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\flow_runner"
  }
}