{
  "app_metadata": {
    "id": "video_player",
    "name": "Video Player",
    "description": "A simple video player for all video formats",
    "icon": "fas fa-play-circle",
    "keywords": [
      "video",
      "player",
      "media",
      "movies",
      "streaming"
    ],
    "author": "Sypnex",
    "version": "1.0.0",
    "type": "user_app",
    "settings": []
  },
  "files": {
    "video_player.app": "ew0KICAiaWQiOiAidmlkZW9fcGxheWVyIiwNCiAgIm5hbWUiOiAiVmlkZW8gUGxheWVyIiwNCiAgImRlc2NyaXB0aW9uIjogIkEgc2ltcGxlIHZpZGVvIHBsYXllciBmb3IgYWxsIHZpZGVvIGZvcm1hdHMiLA0KICAiaWNvbiI6ICJmYXMgZmEtcGxheS1jaXJjbGUiLA0KICAia2V5d29yZHMiOiBbDQogICAgInZpZGVvIiwNCiAgICAicGxheWVyIiwNCiAgICAibWVkaWEiLA0KICAgICJtb3ZpZXMiLA0KICAgICJzdHJlYW1pbmciDQogIF0sDQogICJhdXRob3IiOiAiU3lwbmV4IiwNCiAgInZlcnNpb24iOiAiMS4wLjAiLA0KICAidHlwZSI6ICJ1c2VyX2FwcCIsDQogICJzZXR0aW5ncyI6IFtdDQp9",
    "video_player.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-08-09T17:49:05.447899",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\video_player"
  }
}