{
  "app_metadata": {
    "id": "flow_editor",
    "name": "Flow Editor",
    "description": "Visual node-based workflow editor for creating and executing data processing pipelines",
    "icon": "fas fa-project-diagram",
    "keywords": [
      "flow",
      "workflow",
      "nodes",
      "pipeline",
      "visual",
      "editor"
    ],
    "author": "Sypnex OS",
    "version": "1.0.8",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/node-registry.js",
      "js/canvas.js",
      "js/node-config.js",
      "js/node-renderer.js",
      "js/data-executors.js",
      "js/http-executors.js",
      "js/media-executors.js",
      "js/flow-executors.js",
      "js/ai-executors.js",
      "js/execution-engine.js",
      "js/workflow.js",
      "js/canvas-manager.js",
      "js/tag-manager.js",
      "js/file-manager.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "styles": [
      "css/layout.css",
      "css/nodes.css",
      "css/components.css",
      "css/node-types.css",
      "css/responsive.css",
      "css/os-theme.css"
    ],
    "additional_files": [
      {
        "vfs_path": "/nodes/nodes-pack.json",
        "source_file": "node-definitions/nodes-pack.json"
      }
    ],
    "settings": [
      {
        "key": "DEFAULT_HTTP_TIMEOUT",
        "name": "HTTP Timeout (ms)",
        "type": "number",
        "value": 30000,
        "description": "Default timeout for HTTP requests in milliseconds"
      },
      {
        "key": "AUTO_SAVE_INTERVAL",
        "name": "Auto Save Interval (s)",
        "type": "number",
        "value": 30,
        "description": "Auto save workflows every N seconds (0 = disabled)"
      },
      {
        "key": "MAX_NODES",
        "name": "Maximum Nodes",
        "type": "number",
        "value": 50,
        "description": "Maximum number of nodes allowed in a workflow"
      }
    ]
  },
  "files": {
    "flow_editor.app": "ew0KICAiaWQiOiAiZmxvd19lZGl0b3IiLA0KICAibmFtZSI6ICJGbG93IEVkaXRvciIsDQogICJkZXNjcmlwdGlvbiI6ICJWaXN1YWwgbm9kZS1iYXNlZCB3b3JrZmxvdyBlZGl0b3IgZm9yIGNyZWF0aW5nIGFuZCBleGVjdXRpbmcgZGF0YSBwcm9jZXNzaW5nIHBpcGVsaW5lcyIsDQogICJpY29uIjogImZhcyBmYS1wcm9qZWN0LWRpYWdyYW0iLA0KICAia2V5d29yZHMiOiBbImZsb3ciLCAid29ya2Zsb3ciLCAibm9kZXMiLCAicGlwZWxpbmUiLCAidmlzdWFsIiwgImVkaXRvciJdLA0KICAiYXV0aG9yIjogIlN5cG5leCBPUyIsDQogICJ2ZXJzaW9uIjogIjEuMC44IiwNCiAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAic2NyaXB0cyI6IFsNCiAgICAianMvdXRpbHMuanMiLA0KICAgICJqcy9ub2RlLXJlZ2lzdHJ5LmpzIiwNCiAgICAianMvY2FudmFzLmpzIiwNCiAgICAianMvbm9kZS1jb25maWcuanMiLA0KICAgICJqcy9ub2RlLXJlbmRlcmVyLmpzIiwNCiAgICAianMvZGF0YS1leGVjdXRvcnMuanMiLA0KICAgICJqcy9odHRwLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL21lZGlhLWV4ZWN1dG9ycy5qcyIsDQogICAgImpzL2Zsb3ctZXhlY3V0b3JzLmpzIiwNCiAgICAianMvYWktZXhlY3V0b3JzLmpzIiwNCiAgICAianMvZXhlY3V0aW9uLWVuZ2luZS5qcyIsDQogICAgImpzL3dvcmtmbG93LmpzIiwNCiAgICAianMvY2FudmFzLW1hbmFnZXIuanMiLA0KICAgICJqcy90YWctbWFuYWdlci5qcyIsDQogICAgImpzL2ZpbGUtbWFuYWdlci5qcyIsDQogICAgImpzL3VpLW1hbmFnZXIuanMiLA0KICAgICJqcy9tYWluLmpzIg0KICBdLA0KICAic3R5bGVzIjogWw0KICAgICJjc3MvbGF5b3V0LmNzcyIsDQogICAgImNzcy9ub2Rlcy5jc3MiLA0KICAgICJjc3MvY29tcG9uZW50cy5jc3MiLA0KICAgICJjc3Mvbm9kZS10eXBlcy5jc3MiLA0KICAgICJjc3MvcmVzcG9uc2l2ZS5jc3MiLA0KICAgICJjc3Mvb3MtdGhlbWUuY3NzIg0KICBdLA0KICAiYWRkaXRpb25hbF9maWxlcyI6IFsNCiAgICB7DQogICAgICAidmZzX3BhdGgiOiAiL25vZGVzL25vZGVzLXBhY2suanNvbiIsDQogICAgICAic291cmNlX2ZpbGUiOiAibm9kZS1kZWZpbml0aW9ucy9ub2Rlcy1wYWNrLmpzb24iDQogICAgfQ0KICBdLA0KICAic2V0dGluZ3MiOiBbDQogICAgew0KICAgICAgImtleSI6ICJERUZBVUxUX0hUVFBfVElNRU9VVCIsDQogICAgICAibmFtZSI6ICJIVFRQIFRpbWVvdXQgKG1zKSIsDQogICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgInZhbHVlIjogMzAwMDAsDQogICAgICAiZGVzY3JpcHRpb24iOiAiRGVmYXVsdCB0aW1lb3V0IGZvciBIVFRQIHJlcXVlc3RzIGluIG1pbGxpc2Vjb25kcyINCiAgICB9LA0KICAgIHsNCiAgICAgICJrZXkiOiAiQVVUT19TQVZFX0lOVEVSVkFMIiwNCiAgICAgICJuYW1lIjogIkF1dG8gU2F2ZSBJbnRlcnZhbCAocykiLA0KICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICJ2YWx1ZSI6IDMwLA0KICAgICAgImRlc2NyaXB0aW9uIjogIkF1dG8gc2F2ZSB3b3JrZmxvd3MgZXZlcnkgTiBzZWNvbmRzICgwID0gZGlzYWJsZWQpIg0KICAgIH0sDQogICAgew0KICAgICAgImtleSI6ICJNQVhfTk9ERVMiLA0KICAgICAgIm5hbWUiOiAiTWF4aW11bSBOb2RlcyIsDQogICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgInZhbHVlIjogNTAsDQogICAgICAiZGVzY3JpcHRpb24iOiAiTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgYWxsb3dlZCBpbiBhIHdvcmtmbG93Ig0KICAgIH0NCiAgXQ0KfQ==",
    "flow_editor.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-24T10:40:12.995648",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": ".\\flow_editor"
  },
  "additional_files": [
    {
      "vfs_path": "/nodes/nodes-pack.json",
      "filename": "nodes-pack.json",
      "data": "ew0KICAidmVyc2lvbiI6ICIxLjAuMCIsDQogICJwYWNrZWRfYXQiOiAiMjAyNS0wNy0yMlQwMToyMzo0NS4yNTM2NzAiLA0KICAidG90YWxfbm9kZXMiOiAxMywNCiAgIm5vZGVzIjogew0KICAgICJhdWRpbyI6IHsNCiAgICAgICJpZCI6ICJhdWRpbyIsDQogICAgICAibmFtZSI6ICJBdWRpbyBQbGF5ZXIiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIlBsYXkgYXVkaW8gZmlsZXMgYW5kIGNvbnRyb2wgcGxheWJhY2siLA0KICAgICAgImljb24iOiAiZmFzIGZhLXZvbHVtZS11cCIsDQogICAgICAiY29sb3IiOiAid2FybmluZyIsDQogICAgICAiY2F0ZWdvcnkiOiAibWVkaWEiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImZyb250ZW5kX29ubHkiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImJpbmFyeSIsDQogICAgICAgICAgIm5hbWUiOiAiQmluYXJ5IiwNCiAgICAgICAgICAidHlwZSI6ICJiaW5hcnkiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiYXVkaW9fZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiQXVkaW8gRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInVybCIsDQogICAgICAgICAgIm5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJiaW5hcnkiLA0KICAgICAgICAgICJuYW1lIjogIkJpbmFyeSIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImF1ZGlvX2RhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkF1ZGlvIERhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJhdWRpb191cmwiLA0KICAgICAgICAgICJuYW1lIjogIkF1ZGlvIFVSTCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkdXJhdGlvbiIsDQogICAgICAgICAgIm5hbWUiOiAiRHVyYXRpb24iLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJvcmlnaW5hbCIsDQogICAgICAgICAgIm5hbWUiOiAiT3JpZ2luYWwiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJhdXRvUGxheSI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJBdXRvIFBsYXkiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJmYWxzZSIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidHJ1ZSIsDQogICAgICAgICAgICAiZmFsc2UiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAidm9sdW1lIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIlZvbHVtZSAoMC0xKSIsDQogICAgICAgICAgInZhbHVlIjogMSwNCiAgICAgICAgICAibWluIjogMCwNCiAgICAgICAgICAibWF4IjogMSwNCiAgICAgICAgICAic3RlcCI6IDAuMQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogImF1ZGlvX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJjb25kaXRpb24iOiB7DQogICAgICAiaWQiOiAiY29uZGl0aW9uIiwNCiAgICAgICJuYW1lIjogIkNvbmRpdGlvbiIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiQ29tcGFyZSBpbnB1dCB2YWx1ZSB0byBhIGNvbmRpdGlvbiBhbmQgb3V0cHV0IHRydWUvZmFsc2UiLA0KICAgICAgImljb24iOiAiZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZSIsDQogICAgICAiY29sb3IiOiAid2FybmluZyIsDQogICAgICAiY2F0ZWdvcnkiOiAibG9naWMiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ2YWx1ZSIsDQogICAgICAgICAgIm5hbWUiOiAiVmFsdWUiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJyZXN1bHQiLA0KICAgICAgICAgICJuYW1lIjogIlJlc3VsdCIsDQogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJvcGVyYXRvciI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJPcGVyYXRvciIsDQogICAgICAgICAgInZhbHVlIjogImVxdWFscyIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAiZXF1YWxzIiwNCiAgICAgICAgICAgICJub3RfZXF1YWxzIiwNCiAgICAgICAgICAgICJncmVhdGVyX3RoYW4iLA0KICAgICAgICAgICAgImxlc3NfdGhhbiIsDQogICAgICAgICAgICAiZ3JlYXRlcl90aGFuX29yX2VxdWFsIiwNCiAgICAgICAgICAgICJsZXNzX3RoYW5fb3JfZXF1YWwiLA0KICAgICAgICAgICAgImNvbnRhaW5zIiwNCiAgICAgICAgICAgICJub3RfY29udGFpbnMiLA0KICAgICAgICAgICAgInN0YXJ0c193aXRoIiwNCiAgICAgICAgICAgICJlbmRzX3dpdGgiLA0KICAgICAgICAgICAgImlzX2VtcHR5IiwNCiAgICAgICAgICAgICJpc19ub3RfZW1wdHkiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiY29tcGFyZV92YWx1ZSI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwNCiAgICAgICAgICAibGFiZWwiOiAiQ29tcGFyZSBUbyIsDQogICAgICAgICAgInZhbHVlIjogIiIsDQogICAgICAgICAgInBsYWNlaG9sZGVyIjogIlZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdCINCiAgICAgICAgfSwNCiAgICAgICAgImNhc2Vfc2Vuc2l0aXZlIjogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkNhc2UgU2Vuc2l0aXZlIiwNCiAgICAgICAgICAidmFsdWUiOiAidHJ1ZSIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidHJ1ZSIsDQogICAgICAgICAgICAiZmFsc2UiDQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogImNvbmRpdGlvbl9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfSwNCiAgICAiZGlzcGxheSI6IHsNCiAgICAgICJpZCI6ICJkaXNwbGF5IiwNCiAgICAgICJuYW1lIjogIkRpc3BsYXkgVGV4dCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiRGlzcGxheSB0ZXh0IGRhdGEgaW4gdmFyaW91cyBmb3JtYXRzIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1leWUiLA0KICAgICAgImNvbG9yIjogInN1Y2Nlc3MiLA0KICAgICAgImNhdGVnb3J5IjogIm91dHB1dCIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiZnJvbnRlbmRfb25seSIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidGV4dCIsDQogICAgICAgICAgIm5hbWUiOiAiVGV4dCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJqc29uIiwNCiAgICAgICAgICAibmFtZSI6ICJKU09OIiwNCiAgICAgICAgICAidHlwZSI6ICJqc29uIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImJpbmFyeSIsDQogICAgICAgICAgIm5hbWUiOiAiQmluYXJ5IiwNCiAgICAgICAgICAidHlwZSI6ICJiaW5hcnkiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRleHQiLA0KICAgICAgICAgICJuYW1lIjogIlRleHQiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGlzcGxheWVkIiwNCiAgICAgICAgICAibmFtZSI6ICJEaXNwbGF5ZWQiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAiaW5wdXRfcG9ydCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJJbnB1dCBQb3J0IiwNCiAgICAgICAgICAidmFsdWUiOiAiYXV0byIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAiYXV0byIsDQogICAgICAgICAgICAidGV4dCIsDQogICAgICAgICAgICAianNvbiIsDQogICAgICAgICAgICAiZGF0YSIsDQogICAgICAgICAgICAiYmluYXJ5Ig0KICAgICAgICAgIF0NCiAgICAgICAgfSwNCiAgICAgICAgImZvcm1hdCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJGb3JtYXQiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJ0ZXh0IiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0ZXh0IiwNCiAgICAgICAgICAgICJqc29uIiwNCiAgICAgICAgICAgICJodG1sIg0KICAgICAgICAgIF0NCiAgICAgICAgfSwNCiAgICAgICAgIm1heExlbmd0aCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJNYXggTGVuZ3RoIiwNCiAgICAgICAgICAidmFsdWUiOiAxMDAwLA0KICAgICAgICAgICJtaW4iOiAxLA0KICAgICAgICAgICJtYXgiOiAxMDAwMCwNCiAgICAgICAgICAic3RlcCI6IDEwMA0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogImRpc3BsYXlfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgImh0dHAiOiB7DQogICAgICAiaWQiOiAiaHR0cCIsDQogICAgICAibmFtZSI6ICJIVFRQIFJlcXVlc3QiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIk1ha2UgSFRUUCByZXF1ZXN0cyB0byBleHRlcm5hbCBBUElzIGFuZCBzZXJ2aWNlcyIsDQogICAgICAiaWNvbiI6ICJmYXMgZmEtZ2xvYmUiLA0KICAgICAgImNvbG9yIjogInByaW1hcnkiLA0KICAgICAgImNhdGVnb3J5IjogIm5ldHdvcmsiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRyaWdnZXIiLA0KICAgICAgICAgICJuYW1lIjogIlRyaWdnZXIiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRleHQiLA0KICAgICAgICAgICJuYW1lIjogIlRleHQiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAianNvbiIsDQogICAgICAgICAgIm5hbWUiOiAiSlNPTiIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJiaW5hcnkiLA0KICAgICAgICAgICJuYW1lIjogIkJpbmFyeSIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInN0YXR1c19jb2RlIiwNCiAgICAgICAgICAibmFtZSI6ICJTdGF0dXMgQ29kZSIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImhlYWRlcnMiLA0KICAgICAgICAgICJuYW1lIjogIkhlYWRlcnMiLA0KICAgICAgICAgICJ0eXBlIjogImpzb24iDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidXJsIiwNCiAgICAgICAgICAibmFtZSI6ICJVUkwiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAidXJsIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJVUkwiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vcG9zdHMvMSINCiAgICAgICAgfSwNCiAgICAgICAgIm1ldGhvZCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJNZXRob2QiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJHRVQiLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgIkdFVCIsDQogICAgICAgICAgICAiUE9TVCIsDQogICAgICAgICAgICAiUFVUIiwNCiAgICAgICAgICAgICJERUxFVEUiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiaGVhZGVycyI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0YXJlYSIsDQogICAgICAgICAgImxhYmVsIjogIkhlYWRlcnMgKEpTT04pIiwNCiAgICAgICAgICAidmFsdWUiOiAie1wiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwifSINCiAgICAgICAgfSwNCiAgICAgICAgImJvZHkiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dGFyZWEiLA0KICAgICAgICAgICJsYWJlbCI6ICJCb2R5IChKU09OKSIsDQogICAgICAgICAgInZhbHVlIjogIntcIm1lc3NhZ2VcIjogXCJ7e1ZBTFVFfX1cIiwgXCJ0aW1lc3RhbXBcIjogXCJ7e0pTT046dGltZXN0YW1wfX1cIn0iDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAiaHR0cF9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfSwNCiAgICAiaW1hZ2UiOiB7DQogICAgICAiaWQiOiAiaW1hZ2UiLA0KICAgICAgIm5hbWUiOiAiSW1hZ2UgRGlzcGxheSIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiRGlzcGxheSBpbWFnZXMgYW5kIGNvbnRyb2wgdmlzdWFsaXphdGlvbiIsDQogICAgICAiaWNvbiI6ICJmYXMgZmEtaW1hZ2UiLA0KICAgICAgImNvbG9yIjogImluZm8iLA0KICAgICAgImNhdGVnb3J5IjogIm1lZGlhIiwNCiAgICAgICJleGVjdXRpb25fbW9kZSI6ICJmcm9udGVuZF9vbmx5IiwNCiAgICAgICJpbnB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJiaW5hcnkiLA0KICAgICAgICAgICJuYW1lIjogIkJpbmFyeSIsDQogICAgICAgICAgInR5cGUiOiAiYmluYXJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImltYWdlX2RhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkltYWdlIERhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ1cmwiLA0KICAgICAgICAgICJuYW1lIjogIlVSTCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiYmluYXJ5IiwNCiAgICAgICAgICAibmFtZSI6ICJCaW5hcnkiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJpbWFnZV9kYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJJbWFnZSBEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJiaW5hcnkiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiaW1hZ2VfdXJsIiwNCiAgICAgICAgICAibmFtZSI6ICJJbWFnZSBVUkwiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGltZW5zaW9ucyIsDQogICAgICAgICAgIm5hbWUiOiAiRGltZW5zaW9ucyIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJvcmlnaW5hbCIsDQogICAgICAgICAgIm5hbWUiOiAiT3JpZ2luYWwiLA0KICAgICAgICAgICJ0eXBlIjogImJpbmFyeSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJtYXhfcHJldmlld19zaXplIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIk1heCBQcmV2aWV3IFNpemUiLA0KICAgICAgICAgICJ2YWx1ZSI6IDMwMCwNCiAgICAgICAgICAibWluIjogNTAsDQogICAgICAgICAgIm1heCI6IDgwMCwNCiAgICAgICAgICAic3RlcCI6IDUwDQogICAgICAgIH0sDQogICAgICAgICJzaG93X2luZm8iOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiU2hvdyBJbmZvIiwNCiAgICAgICAgICAidmFsdWUiOiAidHJ1ZSIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidHJ1ZSIsDQogICAgICAgICAgICAiZmFsc2UiDQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogImltYWdlX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJqc29uX2V4dHJhY3QiOiB7DQogICAgICAiaWQiOiAianNvbl9leHRyYWN0IiwNCiAgICAgICJuYW1lIjogIkpTT04gRXh0cmFjdCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiRXh0cmFjdCB2YWx1ZXMgZnJvbSBKU09OIGRhdGEgdXNpbmcgZG90IG5vdGF0aW9uIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1jb2RlLWJyYW5jaCIsDQogICAgICAiY29sb3IiOiAiaW5mbyIsDQogICAgICAiY2F0ZWdvcnkiOiAiZGF0YSIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAianNvbiIsDQogICAgICAgICAgIm5hbWUiOiAiSlNPTiIsDQogICAgICAgICAgInR5cGUiOiAianNvbiINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0ZXh0IiwNCiAgICAgICAgICAibmFtZSI6ICJUZXh0IiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgIm91dHB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0ZXh0IiwNCiAgICAgICAgICAibmFtZSI6ICJUZXh0IiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImpzb24iLA0KICAgICAgICAgICJuYW1lIjogIkpTT04iLA0KICAgICAgICAgICJ0eXBlIjogImpzb24iDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZXh0cmFjdGVkX3ZhbHVlIiwNCiAgICAgICAgICAibmFtZSI6ICJFeHRyYWN0ZWQgVmFsdWUiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZmllbGRfcGF0aCIsDQogICAgICAgICAgIm5hbWUiOiAiRmllbGQgUGF0aCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJvcmlnaW5hbCIsDQogICAgICAgICAgIm5hbWUiOiAiT3JpZ2luYWwiLA0KICAgICAgICAgICJ0eXBlIjogImpzb24iDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAiZmllbGRfcGF0aCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwNCiAgICAgICAgICAibGFiZWwiOiAiRmllbGQgUGF0aCIsDQogICAgICAgICAgInZhbHVlIjogImRhdGEuaXRlbXMiLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICJVc2UgZG90IG5vdGF0aW9uIChlLmcuLCBkYXRhLml0ZW1zLjAubmFtZSkiDQogICAgICAgIH0sDQogICAgICAgICJkaXNwbGF5X2Zvcm1hdCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJEaXNwbGF5IEZvcm1hdCIsDQogICAgICAgICAgInZhbHVlIjogInRleHQiLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgInRleHQiLA0KICAgICAgICAgICAgImpzb24iDQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogImpzb25fZXh0cmFjdF9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfSwNCiAgICAibGxtX2NoYXQiOiB7DQogICAgICAiaWQiOiAibGxtX2NoYXQiLA0KICAgICAgIm5hbWUiOiAiTExNIENoYXQiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIkNoYXQgd2l0aCBMYXJnZSBMYW5ndWFnZSBNb2RlbHMgdXNpbmcgT2xsYW1hIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1yb2JvdCIsDQogICAgICAiY29sb3IiOiAiaW5mbyIsDQogICAgICAiY2F0ZWdvcnkiOiAiYWkiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJwcm9tcHQiLA0KICAgICAgICAgICJuYW1lIjogIlByb21wdCIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJzeXN0ZW1fbWVzc2FnZSIsDQogICAgICAgICAgIm5hbWUiOiAiU3lzdGVtIE1lc3NhZ2UiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiY29udGV4dCIsDQogICAgICAgICAgIm5hbWUiOiAiQ29udGV4dCIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInJlc3BvbnNlIiwNCiAgICAgICAgICAibmFtZSI6ICJSZXNwb25zZSIsDQogICAgICAgICAgInR5cGUiOiAidGV4dCINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0b2tlbnNfdXNlZCIsDQogICAgICAgICAgIm5hbWUiOiAiVG9rZW5zIFVzZWQiLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJtb2RlbF91c2VkIiwNCiAgICAgICAgICAibmFtZSI6ICJNb2RlbCBVc2VkIiwNCiAgICAgICAgICAidHlwZSI6ICJ0ZXh0Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImZ1bGxfcmVzcG9uc2UiLA0KICAgICAgICAgICJuYW1lIjogIkZ1bGwgUmVzcG9uc2UiLA0KICAgICAgICAgICJ0eXBlIjogImpzb24iDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAiZW5kcG9pbnQiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIk9sbGFtYSBFbmRwb2ludCIsDQogICAgICAgICAgInZhbHVlIjogImh0dHA6Ly8xMjcuMC4wLjE6MTE0MzQvdjEiLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICJodHRwOi8vMTI3LjAuMC4xOjExNDM0L3YxIg0KICAgICAgICB9LA0KICAgICAgICAibW9kZWwiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIk1vZGVsIE5hbWUiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJIYW1tZXJBSS9tbi1tYWctbWVsbC1yMTpsYXRlc3QiLA0KICAgICAgICAgICJwbGFjZWhvbGRlciI6ICJsbGFtYTIsIGNvZGVsbGFtYSwgZXRjLiINCiAgICAgICAgfSwNCiAgICAgICAgInRlbXBlcmF0dXJlIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIlRlbXBlcmF0dXJlIiwNCiAgICAgICAgICAidmFsdWUiOiAwLjcsDQogICAgICAgICAgIm1pbiI6IDAsDQogICAgICAgICAgIm1heCI6IDIsDQogICAgICAgICAgInN0ZXAiOiAwLjENCiAgICAgICAgfSwNCiAgICAgICAgIm1heF90b2tlbnMiOiB7DQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAibGFiZWwiOiAiTWF4IFRva2VucyIsDQogICAgICAgICAgInZhbHVlIjogMjA0OCwNCiAgICAgICAgICAibWluIjogMSwNCiAgICAgICAgICAibWF4IjogODE5MiwNCiAgICAgICAgICAic3RlcCI6IDENCiAgICAgICAgfSwNCiAgICAgICAgInN5c3RlbV9wcm9tcHQiOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dGFyZWEiLA0KICAgICAgICAgICJsYWJlbCI6ICJTeXN0ZW0gUHJvbXB0IiwNCiAgICAgICAgICAidmFsdWUiOiAiWW91IGFyZSBhIGhlbHBmdWwgQUkgYXNzaXN0YW50LiIsDQogICAgICAgICAgInBsYWNlaG9sZGVyIjogIkRlZmluZSB0aGUgQUkncyByb2xlIGFuZCBiZWhhdmlvciINCiAgICAgICAgfSwNCiAgICAgICAgImluY2x1ZGVfY29udGV4dCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJJbmNsdWRlIENvbnRleHQiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJ0cnVlIiwNCiAgICAgICAgICAib3B0aW9ucyI6IFsNCiAgICAgICAgICAgICJ0cnVlIiwNCiAgICAgICAgICAgICJmYWxzZSINCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAiZXhlY3V0b3IiOiAibGxtX2NoYXRfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgImxvZ2ljYWxfZ2F0ZSI6IHsNCiAgICAgICJpZCI6ICJsb2dpY2FsX2dhdGUiLA0KICAgICAgIm5hbWUiOiAiTG9naWNhbCBHYXRlIiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJPbmx5IGNvbnRpbnVlIGV4ZWN1dGlvbiBpZiBpbnB1dCBpcyB0cnVlIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1maWx0ZXIiLA0KICAgICAgImNvbG9yIjogImluZm8iLA0KICAgICAgImNhdGVnb3J5IjogImxvZ2ljIiwNCiAgICAgICJleGVjdXRpb25fbW9kZSI6ICJib3RoIiwNCiAgICAgICJpbnB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiY29uZGl0aW9uIiwNCiAgICAgICAgICAibmFtZSI6ICJDb25kaXRpb24iLA0KICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0cmlnZ2VyIiwNCiAgICAgICAgICAibmFtZSI6ICJUcmlnZ2VyIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgImNvbmZpZyI6IHsNCiAgICAgICAgImludmVydCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJJbnZlcnQgTG9naWMiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJmYWxzZSIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidHJ1ZSIsDQogICAgICAgICAgICAiZmFsc2UiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiZGVzY3JpcHRpb24iOiB7DQogICAgICAgICAgInR5cGUiOiAidGV4dCIsDQogICAgICAgICAgImxhYmVsIjogIkRlc2NyaXB0aW9uIiwNCiAgICAgICAgICAidmFsdWUiOiAiIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiT3B0aW9uYWwgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGlzIGdhdGUgZG9lcyINCiAgICAgICAgfQ0KICAgICAgfSwNCiAgICAgICJleGVjdXRvciI6ICJsb2dpY2FsX2dhdGVfZXhlY3V0b3IiLA0KICAgICAgInRlbXBsYXRlIjogInN0YW5kYXJkIg0KICAgIH0sDQogICAgInJlcGVhdGVyIjogew0KICAgICAgImlkIjogInJlcGVhdGVyIiwNCiAgICAgICJuYW1lIjogIlJlcGVhdGVyIiwNCiAgICAgICJkZXNjcmlwdGlvbiI6ICJSZXBlYXQgY29ubmVjdGVkIHdvcmtmbG93IGF0IGludGVydmFscyIsDQogICAgICAiaWNvbiI6ICJmYXMgZmEtcmVkbyIsDQogICAgICAiY29sb3IiOiAid2FybmluZyIsDQogICAgICAiY2F0ZWdvcnkiOiAidHJpZ2dlciIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRyaWdnZXIiLA0KICAgICAgICAgICJuYW1lIjogIlRyaWdnZXIiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0cmlnZ2VyIiwNCiAgICAgICAgICAibmFtZSI6ICJUcmlnZ2VyIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImNvdW50IiwNCiAgICAgICAgICAibmFtZSI6ICJDb3VudCIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9DQogICAgICBdLA0KICAgICAgImNvbmZpZyI6IHsNCiAgICAgICAgImludGVydmFsIjogew0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgImxhYmVsIjogIkludGVydmFsIChtcykiLA0KICAgICAgICAgICJ2YWx1ZSI6IDEwMDAsDQogICAgICAgICAgIm1pbiI6IDEwMCwNCiAgICAgICAgICAibWF4IjogMzAwMDAwLA0KICAgICAgICAgICJzdGVwIjogMTAwDQogICAgICAgIH0sDQogICAgICAgICJjb3VudCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJDb3VudCAoMCA9IGluZmluaXRlKSIsDQogICAgICAgICAgInZhbHVlIjogMCwNCiAgICAgICAgICAibWluIjogMCwNCiAgICAgICAgICAic3RlcCI6IDENCiAgICAgICAgfQ0KICAgICAgfSwNCiAgICAgICJleGVjdXRvciI6ICJyZXBlYXRlcl9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfSwNCiAgICAidGV4dCI6IHsNCiAgICAgICJpZCI6ICJ0ZXh0IiwNCiAgICAgICJuYW1lIjogIlRleHQiLA0KICAgICAgImRlc2NyaXB0aW9uIjogIk91dHB1dCBzdGF0aWMgdGV4dCBjb250ZW50IiwNCiAgICAgICJpY29uIjogImZhcyBmYS1mb250IiwNCiAgICAgICJjb2xvciI6ICJzZWNvbmRhcnkiLA0KICAgICAgImNhdGVnb3J5IjogImRhdGEiLA0KICAgICAgImV4ZWN1dGlvbl9tb2RlIjogImJvdGgiLA0KICAgICAgImlucHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRyaWdnZXIiLA0KICAgICAgICAgICJuYW1lIjogIlRyaWdnZXIiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAib3V0cHV0cyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJkYXRhIiwNCiAgICAgICAgICAibmFtZSI6ICJEYXRhIiwNCiAgICAgICAgICAidHlwZSI6ICJkYXRhIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInRleHQiLA0KICAgICAgICAgICJuYW1lIjogIlRleHQiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidXBwZXJjYXNlIiwNCiAgICAgICAgICAibmFtZSI6ICJVcHBlcmNhc2UiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAibG93ZXJjYXNlIiwNCiAgICAgICAgICAibmFtZSI6ICJMb3dlcmNhc2UiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAid29yZF9jb3VudCIsDQogICAgICAgICAgIm5hbWUiOiAiV29yZCBDb3VudCIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImxlbmd0aCIsDQogICAgICAgICAgIm5hbWUiOiAiTGVuZ3RoIiwNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAidGV4dF9jb250ZW50Ijogew0KICAgICAgICAgICJ0eXBlIjogInRleHRhcmVhIiwNCiAgICAgICAgICAibGFiZWwiOiAiVGV4dCBDb250ZW50IiwNCiAgICAgICAgICAidmFsdWUiOiAiSGVsbG8sIFdvcmxkISINCiAgICAgICAgfQ0KICAgICAgfSwNCiAgICAgICJleGVjdXRvciI6ICJ0ZXh0X2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJ0aW1lciI6IHsNCiAgICAgICJpZCI6ICJ0aW1lciIsDQogICAgICAibmFtZSI6ICJUaW1lciIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiRGVsYXkgZXhlY3V0aW9uIGZvciBzcGVjaWZpZWQgbWlsbGlzZWNvbmRzIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1jbG9jayIsDQogICAgICAiY29sb3IiOiAid2FybmluZyIsDQogICAgICAiY2F0ZWdvcnkiOiAidHJpZ2dlciIsDQogICAgICAiZXhlY3V0aW9uX21vZGUiOiAiYm90aCIsDQogICAgICAiaW5wdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidHJpZ2dlciIsDQogICAgICAgICAgIm5hbWUiOiAiVHJpZ2dlciIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidHJpZ2dlciIsDQogICAgICAgICAgIm5hbWUiOiAiVHJpZ2dlciIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICJpZCI6ICJ0aW1lc3RhbXAiLA0KICAgICAgICAgICJuYW1lIjogIlRpbWVzdGFtcCIsDQogICAgICAgICAgInR5cGUiOiAibnVtYmVyIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImVsYXBzZWQiLA0KICAgICAgICAgICJuYW1lIjogIkVsYXBzZWQiLA0KICAgICAgICAgICJ0eXBlIjogIm51bWJlciINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJjb25maWciOiB7DQogICAgICAgICJpbnRlcnZhbCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJJbnRlcnZhbCAobXMpIiwNCiAgICAgICAgICAidmFsdWUiOiAxMDAwLA0KICAgICAgICAgICJtaW4iOiAxMDAsDQogICAgICAgICAgIm1heCI6IDYwMDAwLA0KICAgICAgICAgICJzdGVwIjogMTAwDQogICAgICAgIH0sDQogICAgICAgICJjb3VudCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICJsYWJlbCI6ICJDb3VudCIsDQogICAgICAgICAgInZhbHVlIjogMSwNCiAgICAgICAgICAibWluIjogMSwNCiAgICAgICAgICAibWF4IjogMTAwLA0KICAgICAgICAgICJzdGVwIjogMQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogInRpbWVyX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJ2ZnNfbG9hZCI6IHsNCiAgICAgICJpZCI6ICJ2ZnNfbG9hZCIsDQogICAgICAibmFtZSI6ICJWRlMgTG9hZCIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiTG9hZCBkYXRhIGZyb20gdGhlIFZpcnR1YWwgRmlsZSBTeXN0ZW0iLA0KICAgICAgImljb24iOiAiZmFzIGZhLWZvbGRlci1vcGVuIiwNCiAgICAgICJjb2xvciI6ICJwcmltYXJ5IiwNCiAgICAgICJjYXRlZ29yeSI6ICJzdG9yYWdlIiwNCiAgICAgICJleGVjdXRpb25fbW9kZSI6ICJib3RoIiwNCiAgICAgICJpbnB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAidHJpZ2dlciIsDQogICAgICAgICAgIm5hbWUiOiAiVHJpZ2dlciIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogImRhdGEiLA0KICAgICAgICAgICJuYW1lIjogIkRhdGEiLA0KICAgICAgICAgICJ0eXBlIjogImRhdGEiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZmlsZV9wYXRoIiwNCiAgICAgICAgICAibmFtZSI6ICJGaWxlIFBhdGgiLA0KICAgICAgICAgICJ0eXBlIjogInRleHQiDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAiZmlsZV9wYXRoIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJGaWxlIFBhdGgiLA0KICAgICAgICAgICJ2YWx1ZSI6ICIvbXlfZGF0YS5qc29uIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiL2Fic29sdXRlL3BhdGgvaW4vdmZzIg0KICAgICAgICB9LA0KICAgICAgICAiZm9ybWF0Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkZvcm1hdCIsDQogICAgICAgICAgInZhbHVlIjogImpzb24iLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgImpzb24iLA0KICAgICAgICAgICAgInRleHQiLA0KICAgICAgICAgICAgImJpbmFyeSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJhdXRvX3JlbG9hZCI6IHsNCiAgICAgICAgICAidHlwZSI6ICJzZWxlY3QiLA0KICAgICAgICAgICJsYWJlbCI6ICJBdXRvIFJlbG9hZCBvbiBDaGFuZ2UiLA0KICAgICAgICAgICJ2YWx1ZSI6ICJmYWxzZSIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidHJ1ZSIsDQogICAgICAgICAgICAiZmFsc2UiDQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImV4ZWN1dG9yIjogInZmc19sb2FkX2V4ZWN1dG9yIiwNCiAgICAgICJ0ZW1wbGF0ZSI6ICJzdGFuZGFyZCINCiAgICB9LA0KICAgICJ2ZnNfc2F2ZSI6IHsNCiAgICAgICJpZCI6ICJ2ZnNfc2F2ZSIsDQogICAgICAibmFtZSI6ICJWRlMgU2F2ZSIsDQogICAgICAiZGVzY3JpcHRpb24iOiAiU2F2ZSBkYXRhIHRvIHRoZSBWaXJ0dWFsIEZpbGUgU3lzdGVtIiwNCiAgICAgICJpY29uIjogImZhcyBmYS1zYXZlIiwNCiAgICAgICJjb2xvciI6ICJwcmltYXJ5IiwNCiAgICAgICJjYXRlZ29yeSI6ICJzdG9yYWdlIiwNCiAgICAgICJleGVjdXRpb25fbW9kZSI6ICJib3RoIiwNCiAgICAgICJpbnB1dHMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaWQiOiAiZGF0YSIsDQogICAgICAgICAgIm5hbWUiOiAiRGF0YSIsDQogICAgICAgICAgInR5cGUiOiAiZGF0YSINCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgICJvdXRwdXRzIjogWw0KICAgICAgICB7DQogICAgICAgICAgImlkIjogInN1Y2Nlc3MiLA0KICAgICAgICAgICJuYW1lIjogIlN1Y2Nlc3MiLA0KICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iDQogICAgICAgIH0NCiAgICAgIF0sDQogICAgICAiY29uZmlnIjogew0KICAgICAgICAiZmlsZV9wYXRoIjogew0KICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICJsYWJlbCI6ICJGaWxlIFBhdGgiLA0KICAgICAgICAgICJ2YWx1ZSI6ICIvbXlfZGF0YS5qc29uIiwNCiAgICAgICAgICAicGxhY2Vob2xkZXIiOiAiL2Fic29sdXRlL3BhdGgvaW4vdmZzIg0KICAgICAgICB9LA0KICAgICAgICAiZm9ybWF0Ijogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkZvcm1hdCIsDQogICAgICAgICAgInZhbHVlIjogImpzb24iLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgImpzb24iLA0KICAgICAgICAgICAgInRleHQiLA0KICAgICAgICAgICAgImJpbmFyeSINCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgICJvdmVyd3JpdGUiOiB7DQogICAgICAgICAgInR5cGUiOiAic2VsZWN0IiwNCiAgICAgICAgICAibGFiZWwiOiAiT3ZlcndyaXRlIiwNCiAgICAgICAgICAidmFsdWUiOiAidHJ1ZSIsDQogICAgICAgICAgIm9wdGlvbnMiOiBbDQogICAgICAgICAgICAidHJ1ZSIsDQogICAgICAgICAgICAiZmFsc2UiDQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiYXBwZW5kIjogew0KICAgICAgICAgICJ0eXBlIjogInNlbGVjdCIsDQogICAgICAgICAgImxhYmVsIjogIkFwcGVuZCBNb2RlIiwNCiAgICAgICAgICAidmFsdWUiOiAiZmFsc2UiLA0KICAgICAgICAgICJvcHRpb25zIjogWw0KICAgICAgICAgICAgInRydWUiLA0KICAgICAgICAgICAgImZhbHNlIg0KICAgICAgICAgIF0NCiAgICAgICAgfQ0KICAgICAgfSwNCiAgICAgICJleGVjdXRvciI6ICJ2ZnNfc2F2ZV9leGVjdXRvciIsDQogICAgICAidGVtcGxhdGUiOiAic3RhbmRhcmQiDQogICAgfQ0KICB9DQp9",
      "size": 21438
    }
  ]
}